-- psql -U bodastage -d bodastage -a -f nok_cm_3g.sql
CREATE TABLE IF NOT EXISTS nok_cm_3g.A2NE( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.A2ST( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "AAL2EndAddress" char(250) , "VCI" char(250) , "VPI" char(250) , "interfaceNumber" char(250) , "stcAlarmEnable" char(250) , "unitNumber" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.A2UT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "VCI" char(250) , "VPI" char(250) , "interfaceNumber" char(250) , "pid" char(250) , "queue2Weight" char(250) , "queue3Weight" char(250) , "queue4Weight" char(250) , "unitNumber" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.ACCP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "egressBandwidth" char(250) , "ingressBandwidth" char(250) , "maxNumVCIBitsSupported" char(250) , "maxNumVPIBitsSupported" char(250) , "upcNpc" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.ADJG( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "AdjgMCC" char(250) , "AdjgMNC" char(250) , "TargetCellDN" char(250) , "ADJGChangeOrigin" char(250) , "ADJGType" char(250) , "AdjgBCC" char(250) , "AdjgBCCH" char(250) , "AdjgBandIndicator" char(250) , "AdjgCI" char(250) , "AdjgLAC" char(250) , "AdjgNCC" char(250) , "AdjgSIB" char(250) , "AdjgTxPwrMaxRACH" char(250) , "AdjgTxPwrMaxTCH" char(250) , "NrtHopgIdentifier" char(250) , "RtHopgIdentifier" char(250) , "name" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.ADJI( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "AdjiMCC" char(250) , "AdjiMNC" char(250) , "TargetCellDN" char(250) , "name" char(250) , "ADJIChangeOrigin" char(250) , "AdjiCI" char(250) , "AdjiCPICHTxPwr" char(250) , "AdjiComLoadMeasDRNCCellNCHO" char(250) , "AdjiEcNoOffsetNCHO" char(250) , "AdjiHandlingBlockedCellSLHO" char(250) , "AdjiLAC" char(250) , "AdjiNCHOHSPASupport" char(250) , "AdjiRAC" char(250) , "AdjiRNCid" char(250) , "AdjiSIB" char(250) , "AdjiScrCode" char(250) , "AdjiTxDiv" char(250) , "AdjiTxPwrDPCH" char(250) , "AdjiTxPwrRACH" char(250) , "AdjiUARFCN" char(250) , "BlindHOTargetCell" char(250) , "NrtHopiIdentifier" char(250) , "RtHopiIdentifier" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.ADJL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "ADJLChangeOrigin" char(250) , "AdjLEARFCN" char(250) , "AdjLMeasBw" char(250) , "AdjLSelectFreq" char(250) , "HopLIdentifier" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.ADJS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "AdjsMCC" char(250) , "AdjsMNC" char(250) , "TargetCellDN" char(250) , "ADJSChangeOrigin" char(250) , "AdjsCI" char(250) , "AdjsCPICHTxPwr" char(250) , "AdjsDERR" char(250) , "AdjsEcNoOffset" char(250) , "AdjsLAC" char(250) , "AdjsRAC" char(250) , "AdjsRNCid" char(250) , "AdjsSIB" char(250) , "AdjsScrCode" char(250) , "AdjsTxDiv" char(250) , "AdjsTxPwrRACH" char(250) , "HSDPAHopsIdentifier" char(250) , "NrtHopsIdentifier" char(250) , "RTWithHSDPAHopsIdentifier" char(250) , "RtHopsIdentifier" char(250) , "SRBHopsIdentifier" char(250) , "name" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.ADR4GW( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "bfdId" char(250) , "preference" char(250) , "routeType" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.AMGR( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "ldapConnectionType" char(250) , "primaryLdapPort" char(250) , "primaryLdapServer" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.ANBA( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "VCI" char(250) , "VPI" char(250) , "interfaceNumber" char(250) , "nbapType" char(250) , "unitNumber" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.ANTL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "alDcVoltageEnabled" char(250) , "antId" char(250) , "antennaRoundTripDelay" char(250) , "antennaTotalLoss" char(250) , "cableLength" char(250) , "communication3gppEnabled" char(250) , "feederLoss" char(250) , "feederVoltage" char(250) , "multiplexerAmount" char(250) , "multiplexerLoss" char(250) , "multiplexerTotalDelay" char(250) , "multiplexerType" char(250) , "rModId" char(250) , "ulDelay" char(250) , "velocityFactor" char(250) , "vswrMajorAlarm" char(250) , "vswrMinorAlarm" char(250) , "additionalRxGain" char(250) , "forcedVoltage" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.BFD( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "bfdActivation" char(250) , "bfdAdminUp" char(250) , "bfdDestAddress" char(250) , "bfdDetectMult" char(250) , "bfdSourceIpAddr" char(250) , "bfdSourceUdpPort" char(250) , "bfdType" char(250) , "desMinTxInt" char(250) , "function" char(250) , "reqMinRxInt" char(250) , "bfdGrp" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.BFDGRP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.BTSSCW( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "a20WLicencesInUse" char(250) , "actDistributedSite15" char(250) , "actRfChaining" char(250) , "antLineSupervisionEnabled" char(250) , "antRxLevelMonitoringEnabled" char(250) , "antTiltSupportEnabled" char(250) , "btsConfiguration" char(250) , "btsId" char(250) , "btsName" char(250) , "cqiDefaultHsCellFach" char(250) , "ext2M048ClkInUse" char(250) , "extendedBtsSiteCapacity" char(250) , "fdeEnabled" char(250) , "gpsCtrlBlockForCoLocatedBts" char(250) , "gpsInUse" char(250) , "happyBitPingFiltUse" char(250) , "happyBitUphThreshold" char(250) , "hsdpa16QAMSupport" char(250) , "hsdpaBbResAllocation" char(250) , "hsdpaFairPacketSched" char(250) , "hsdpaSchedList_hsdpaThroughputStep_mod_sched" char(250) , "intShutdownInUse" char(250) , "iubClkInUse" char(250) , "maxIubDelayThreshold" char(250) , "midIubDelayThreshold" char(250) , "minIubDelayThreshold" char(250) , "numberOfBlindRepetitionHsCellFach" char(250) , "numberOfHSDPASet1" char(250) , "numberOfHSDPASet2" char(250) , "numberOfHSDPASet3" char(250) , "numberOfHSUPASet1" char(250) , "numberOfR99ChannelElements" char(250) , "qosSchedList_ccPolicy_id_weight" char(250) , "reservationPercentage" char(250) , "rncType" char(250) , "sharedHsdpaSheduler" char(250) , "singleCellInUse" char(250) , "actEthernetSec" char(250) , "assocMaxRetrans" char(250) , "ext2M048ClkOutOn" char(250) , "mainsPowerAlarmId" char(250) , "numOfLines" char(250) , "pathMaxRetrans" char(250) , "syncPropagationEnabled" char(250) , "aldSwDownloadEnabled" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.CABINET( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "cabinetType" char(250) , "locationName" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.CCFA( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "enableBundleUtlStatistics" char(250) , "ubrPlusEnabled" char(250) , "vccBundleEnabled" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.CERTH( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "btsCertificateUpdateTime" char(250) , "caCertificateUpdateTime" char(250) , "cmpServerIpAddress" char(250) , "cmpServerPort" char(250) , "crServerIpAddress" char(250) , "crServerPort" char(250) , "crlUpdatePeriod" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.CESIF( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "cesMinUDPPort" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.CMOB( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "ACBarredListSystem" char(250) , "CMOBChangeOrigin" char(250) , "CellAccessRestriction" char(250) , "RestrictionGroupName" char(250) , "RestrictionGroupType" char(250) , "TrafficRestriction" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.COCO( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "AAL2LossRatio" char(250) , "AAL2Multiplexing" char(250) , "AAL2MuxDelay" char(250) , "AAL2QueueHSDPAWithFC" char(250) , "AAL2QueueHSDPAWithoutFC" char(250) , "AAL2QueueHSUPA" char(250) , "AAL2QueueNRTDCHWithoutFC" char(250) , "AAL2QueueRTDCH" char(250) , "AAL2SignLinkTP_AAL2SigCDVT01Egr_AAL2SigCDVT01Ing_AAL2SigEarlyPacketDiscard_AAL2SigEgressMDCR_AAL2SigEgressUBRShare_AAL2SigIngressMDCR_AAL2SigIngressUBRShare_AAL2SigPCR01Egr_AAL2SigPCR01Ing_AAL2SigPartialPacketDiscard_AAL2SigServiceCategory_AAL2SignLinkATMIfId_AAL2SignLinkTPId_AAL2SignLinkVCI_AAL2SignLinkVPI" char(250) , "AAL2TP_AAL2PathId_AAL2PathType_AAL2SignLinkATMIfId_AAL2SignLinkVCI_AAL2SignLinkVPI_AAL2UPATMIfId_AAL2UPCDVT01Egr_AAL2UPCDVT01Ing_AAL2UPEgressMDCR_AAL2UPEgressUBRShare_AAL2UPIngressMDCR_AAL2UPIngressUBRShare_AAL2UPPCR01Egr_AAL2UPPCR01Ing_AAL2UPServiceCategory_AAL2UPUsage_AAL2UPVCI_AAL2UPVPI_COCOA2EA_VCCInBundle_WAMId" text , "ATMEPProfileId" char(250) , "CNBAPCDVT01Egr" char(250) , "CNBAPCDVT01Ing" char(250) , "CNBAPEarlyPacketDiscard" char(250) , "CNBAPEgressMDCR" char(250) , "CNBAPEgressUBRShare" char(250) , "CNBAPIngressMDCR" char(250) , "CNBAPIngressUBRShare" char(250) , "CNBAPPCR01Egr" char(250) , "CNBAPPCR01Ing" char(250) , "CNBAPPartialPacketDiscard" char(250) , "CNBAPServiceCategory" char(250) , "CNBAPTPATMIfId" char(250) , "CNBAPVCI" char(250) , "CNBAPVPI" char(250) , "COCOChangeOrigin" char(250) , "CalculateCDVT" char(250) , "CreateATMTP" char(250) , "DNBAPTP_CControlPortID_DNBAPATMIfId_DNBAPCDVT01Egr_DNBAPCDVT01Ing_DNBAPEarlyPacketDiscard_DNBAPEgressMDCR_DNBAPEgressUBRShare_DNBAPIngressMDCR_DNBAPIngressUBRShare_DNBAPPCR01Egr_DNBAPPCR01Ing_DNBAPPartialPacketDiscard_DNBAPServiceCategory_DNBAPVCI_DNBAPVPI" char(250) , "GenerateAAL2Num" char(250) , "InternalHSDPAFCMethodBTS" char(250) , "VCCBundleParams_VCCBundleEBS_VCCBundleId_VCCBundlePCR" char(250) , "VPLTP_COCOVPI_VPLTPATMIfId_VPLTPCDVT01Egr_VPLTPEgressMDCR_VPLTPPCR01Egr_VPLTPServiceCategory_VPLTPTrafficShaping" char(250) , "WBTSId" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.CONNECTOR( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "destinationConnector" char(250) , "destinationHolder" char(250) , "location" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.ETHLK( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "acceptableFrameTypes" char(250) , "administrativeState" char(250) , "flushFdbOnLos" char(250) , "l2BurstSize" char(250) , "l2IngressRate" char(250) , "l2ShaperRate" char(250) , "linkFlappingPreventionTimer" char(250) , "linkOAMEnabled" char(250) , "macAddr" char(250) , "portDefaultPriority" char(250) , "portDefaultVlanId" char(250) , "speedAndDuplex" char(250) , "synchEMode" char(250) , "l2VlanIdList_highValue_lowValue" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.FMCG( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "AMRDirReCell" char(250) , "DLDPCHTxPwrClOffset" char(250) , "FMCGChangeOrigin" char(250) , "GSMcauseCPICHEcNo" char(250) , "GSMcauseCPICHrscp" char(250) , "GSMcauseTxPwrDL" char(250) , "GSMcauseTxPwrUL" char(250) , "GSMcauseUplinkQuality" char(250) , "GsmDLTxPwrThrAMR" char(250) , "GsmDLTxPwrThrCS" char(250) , "GsmDLTxPwrThrNrtPS" char(250) , "GsmDLTxPwrThrRtPS" char(250) , "GsmMaxMeasPeriod" char(250) , "GsmMeasAveWindow" char(250) , "GsmMeasRepInterval" char(250) , "GsmMinHoInterval" char(250) , "GsmMinMeasInterval" char(250) , "GsmMinSLHOInterval" char(250) , "GsmNcellSearchPeriod" char(250) , "GsmUETxPwrFilterCoeff" char(250) , "GsmUETxPwrThrAMR" char(250) , "GsmUETxPwrThrCS" char(250) , "GsmUETxPwrThrNrtPS" char(250) , "GsmUETxPwrThrRtPS" char(250) , "GsmUETxPwrTimeHyst" char(250) , "ISHOClcauseCPICHEcNo" char(250) , "ISHOClcauseCPICHrscp" char(250) , "ISHOClcauseTxPwrDL" char(250) , "ISHOClcauseTxPwrUL" char(250) , "MaxBSICIdentTime" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.FMCI( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "FMCIChangeOrigin" char(250) , "IFHOcauseCPICHEcNo" char(250) , "IFHOcauseCPICHrscp" char(250) , "IFHOcauseTxPwrDL" char(250) , "IFHOcauseTxPwrUL" char(250) , "IFHOcauseUplinkQuality" char(250) , "InterFreqDLTxPwrThrAMR" char(250) , "InterFreqDLTxPwrThrCS" char(250) , "InterFreqDLTxPwrThrNrtPS" char(250) , "InterFreqDLTxPwrThrRtPS" char(250) , "InterFreqMaxMeasPeriod" char(250) , "InterFreqMeasAveWindow" char(250) , "InterFreqMeasRepInterval" char(250) , "InterFreqMinHoInterval" char(250) , "InterFreqMinMeasInterval" char(250) , "InterFreqMinSLHOInterval" char(250) , "InterFreqNcellSearchPeriod" char(250) , "InterFreqUETxPwrFilterCoeff" char(250) , "InterFreqUETxPwrThrAMR" char(250) , "InterFreqUETxPwrThrCS" char(250) , "InterFreqUETxPwrThrNrtPS" char(250) , "InterFreqUETxPwrThrRtPS" char(250) , "InterFreqUETxPwrTimeHyst" char(250) , "MBLBMobilityOffset" char(250) , "MBLBMobilityRABComb" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.FMCS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "ActiveSetWeightingCoefficient" char(250) , "AdditionReportingInterval" char(250) , "AdditionTime" char(250) , "AdditionWindow" char(250) , "DSRepBasedSHO" char(250) , "DropReportingInterval" char(250) , "DropTime" char(250) , "DropWindow" char(250) , "EDCHAddEcNoOffset" char(250) , "EDCHRemEcNoOffset" char(250) , "EcNoFilterCoefficient" char(250) , "FMCSChangeOrigin" char(250) , "HHoEcNoCancel" char(250) , "HHoEcNoCancelTime" char(250) , "HHoEcNoThreshold" char(250) , "HHoEcNoTimeHysteresis" char(250) , "HHoRscpCancel" char(250) , "HHoRscpCancelTime" char(250) , "HHoRscpFilterCoefficient" char(250) , "HHoRscpThreshold" char(250) , "HHoRscpTimeHysteresis" char(250) , "MaxActiveSetSize" char(250) , "ReplacementReportingInterval" char(250) , "ReplacementTime" char(250) , "ReplacementWindow" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.FTM( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "adaptationVersionMajor" char(250) , "locationName" char(250) , "softwareReleaseVersion" char(250) , "systemTitle" char(250) , "userLabel" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.FUUNIT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "functionalUnitType" char(250) , "supportedByUnit" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.HOPG( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "AdjgHCSpriority" char(250) , "AdjgHCSthreshold" char(250) , "AdjgMinRxLevNCHO" char(250) , "AdjgPenaltyTime" char(250) , "AdjgPenaltyTimeNCHO" char(250) , "AdjgPriorityCoverage" char(250) , "AdjgPrioritySLHO" char(250) , "AdjgQoffset1" char(250) , "AdjgQrxlevMin" char(250) , "AdjgRxLevMinHO" char(250) , "AdjgTempOffset1" char(250) , "HOPGChangeOrigin" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.HOPI( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "AdjiEcNoMargin" char(250) , "AdjiHCSpriority" char(250) , "AdjiHCSthreshold" char(250) , "AdjiMinEcNo" char(250) , "AdjiMinEcNoNCHO" char(250) , "AdjiMinRSCP" char(250) , "AdjiMinRscpNCHO" char(250) , "AdjiPenaltyTime" char(250) , "AdjiPenaltyTimeNCHO" char(250) , "AdjiPlossMargin" char(250) , "AdjiPriorityCoverage" char(250) , "AdjiPriorityDCellCAHO" char(250) , "AdjiPriorityHSCAHO" char(250) , "AdjiPriorityMIMOCAHO" char(250) , "AdjiPriorityQuality" char(250) , "AdjiPrioritySLHO" char(250) , "AdjiQoffset1" char(250) , "AdjiQoffset2" char(250) , "AdjiQqualMin" char(250) , "AdjiQrxlevMin" char(250) , "AdjiTempOffset1" char(250) , "AdjiTempOffset2" char(250) , "BlindHORSCPThr" char(250) , "HOPIChangeOrigin" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.HOPL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "AdjLAbsPrioCellReselec" char(250) , "AdjLFreqPriority" char(250) , "AdjLQqualminEUTRA" char(250) , "AdjLQrxlevminEUTRA" char(250) , "AdjLThreshigh" char(250) , "AdjLThreshigh2" char(250) , "AdjLThreslow" char(250) , "AdjLThreslow2" char(250) , "HOPLChangeOrigin" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.HOPS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "AdjsHCSpriority" char(250) , "AdjsHCSthreshold" char(250) , "AdjsPenaltyTime" char(250) , "AdjsQoffset1" char(250) , "AdjsQoffset2" char(250) , "AdjsQqualMin" char(250) , "AdjsQrxlevMin" char(250) , "AdjsTempOffset1" char(250) , "AdjsTempOffset2" char(250) , "EcNoAveragingWindow" char(250) , "EnableInterRNCsho" char(250) , "EnableRRCRelease" char(250) , "HHOMarginAverageEcNo" char(250) , "HHOMarginPeakEcNo" char(250) , "HOPSChangeOrigin" char(250) , "HSDPAAvailabilityIur" char(250) , "HSUPAAvailabilityIur" char(250) , "ReleaseMarginAverageEcNo" char(250) , "ReleaseMarginPeakEcNo" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.HW( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "NEType" char(250) , "locationName" char(250) , "operationalState" char(250) , "systemTitle" char(250) , "vendorName" char(250) , "serialNumber" char(250) , "softwareReleaseVersion" char(250) , "systemReleaseVersion" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IAIF( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "VCI" char(250) , "VPI" char(250) , "destIpAddr" char(250) , "interfaceNumber" char(250) , "unitNumber" char(250) , "atmIfId" char(250) , "encapsulationMethod" char(250) , "usage" char(250) , "vci" char(250) , "vpi" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IBFD( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "alarmEnabled" char(250) , "bfdEnabled" char(250) , "dstIp" char(250) , "ipbrId" char(250) , "profileId" char(250) , "sessionType" char(250) , "srcIp" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IBFP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "desiredMinTx" char(250) , "detectMult" char(250) , "dscp" char(250) , "profileName" char(250) , "requiredMinRx" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IDNS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "cache" char(250) , "localDomain" char(250) , "roundRobin" char(250) , "serverIPAddr_addrValue_addrVer" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IDSP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "dscpProfileName" char(250) , "profileList_dscpNumber_phb" text );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IEIF( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "cir" char(250) , "confCost" char(250) , "helloInterval" char(250) , "ipAddr_localIpAddr_netmask" char(250) , "mtu" char(250) , "mtuMismatchDetection" char(250) , "ospfWithBfd" char(250) , "qosEnabled" char(250) , "retransInterval" char(250) , "routerDeadInterval" char(250) , "sbs" char(250) , "sbsTotal" char(250) , "shapedBandwidth" char(250) , "sir" char(250) , "sirTotal" char(250) , "trafficPathShapingEnable" char(250) , "transmitDelay" char(250) , "upperLayerShaping" char(250) , "vlanEnabled" char(250) , "vlanId" char(250) , "IPV4Addr_addrTypeIPV4_addrValueIPV4_destAddrIPV4_netmask" char(250) , "administrativeState" char(250) , "ifType" char(250) , "IPV4Addr_addrTypeIPV4_addrValueIPV4_netmask" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IFPG( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "transIfPuPtrs" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IGIF( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "RncEthernetBw" char(250) , "ethInterfaceRate" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IHCP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IICP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "dscp" char(250) , "echoReplyTmout" char(250) , "echoReqPeriod" char(250) , "maxLostPkt" char(250) , "payloadLength" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IMAG( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "administrativeState" char(250) , "imaVersionId" char(250) , "interfaceNumber" char(250) , "interfaces" char(250) , "minNumLinks" char(250) , "unitNumber" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.INTP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "ntpServers" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IPBR( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "committedBW" char(250) , "committedDcnBW" char(250) , "committedSigBW" char(250) , "ifcFlag" char(250) , "ipBasedRouteName" char(250) , "localMuxUDPPort" char(250) , "maxMuxPackets" char(250) , "ratio" char(250) , "remoteMuxUDPPort" char(250) , "routeBW" char(250) , "udpMuxDSCP" char(250) , "udpMuxEnabled" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IPHB( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "phbProfileName" char(250) , "profileList_maxDrop_maxThreshold_minThreshold_phb_quePriority_queWeight_schedule_vlanPri" char(250) , "profileList_maxDrop_maxThreshold_minThreshold_phb_quePriority_schedule_vlanPri" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IPNB( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "CNBAPICSUIndex" char(250) , "SCTPPortNumberCNBAP" char(250) , "DNBAP_CControlPortID_DNBAPICSUIndex_SCTPPortNumberDNBAP" char(250) , "IPBasedRouteId" char(250) , "IPNBChangeOrigin" char(250) , "MaxSCTPFrameSize" char(250) , "MinSCTPPortIub" char(250) , "NBAPDSCP" char(250) , "NodeBIPAddress" char(250) , "WBTSId" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IPNO( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "bfdHoldUpTime" char(250) , "btsId" char(250) , "btsIpAddr" char(250) , "btsSubnetMacAddr" char(250) , "cesopsnIpAddress" char(250) , "disableFtp" char(250) , "enableSoam" char(250) , "flexBusIpAddr" char(250) , "fpLocalUdpPort" char(250) , "fpMuxAmount" char(250) , "fpMuxDelay" char(250) , "fpRemoteUdpPort" char(250) , "ftmIpAddr" char(250) , "ftmNetmask" char(250) , "iHSPAmode" char(250) , "icmpResponseEnabled" char(250) , "linkOAMLoopbackSupport" char(250) , "mtu" char(250) , "oamCir" char(250) , "oamTlvReply" char(250) , "omsTls" char(250) , "ret1IpAddr" char(250) , "rncIpAddr" char(250) , "transportMode" char(250) , "twampMessageRate" char(250) , "cPlaneIpAddress" char(250) , "mPlaneIpAddress" char(250) , "planeMacAddr" char(250) , "sPlaneIpAddress" char(250) , "twampFlag_twampIpAddress_twampReflFlag_udpEchoFlag" char(250) , "uPlane2IpAddress" char(250) , "uPlaneIpAddress" char(250) , "IPForwardingIPV4" char(250) , "defaultTTL" char(250) , "subnetsAreLocal" char(250) , "hostName" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IPQM( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "BackgroundTCToDSCP" char(250) , "ConversationalTCToDSCP" char(250) , "IPQMChangeOrigin" char(250) , "InteractiveTHP1TCToDSCP" char(250) , "InteractiveTHP2TCToDSCP" char(250) , "InteractiveTHP3TCToDSCP" char(250) , "StreamingTCToDSCP" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IPRM( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "RmExceptions_sourceTwoDiscr_userLabel" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IPRO( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "addrValueIPV4" char(250) , "ifName" char(250) , "ipBasedRouteId" char(250) , "phbAF1" char(250) , "phbAF2" char(250) , "phbAF3" char(250) , "phbAF4" char(250) , "phbBE" char(250) , "phbEF" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IPRT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "staticRoutes_bfdId_destIpAddr_gateway_netmask_preference" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IPSECC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "ipSecEnabled" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IQOS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "dspmProfileId" char(250) , "dspmProfileName" char(250) , "phbProfileId" char(250) , "phbProfileName" char(250) , "status" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.ISBFP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "desiredMinTx" char(250) , "detectMult" char(250) , "dscp" char(250) , "holdupTime" char(250) , "profileName" char(250) , "requiredMinRx" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.ITRKGRP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "trkGrpBoolVal" char(250) , "trkGrpOperation" char(250) , "trkType" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.ITRKOBJ( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IUBSNT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "IPV4MaskLength" char(250) , "IPV4SubnetAddress" char(250) , "assocMaxRetrans" char(250) , "hbInterval" char(250) , "maxInitRetrans" char(250) , "pathMaxRetrans" char(250) , "rtoInitial" char(250) , "rtoMax" char(250) , "rtoMin" char(250) , "sackPeriod" char(250) , "validCookieLife" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IUCS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "AAL2PTSigForIuCS" char(250) , "CNDomainVersion" char(250) , "CNId" char(250) , "CSCNNRI_NRIMaxForCSCN_NRIMinForCSCN" text , "CSFlexiIuWeight" char(250) , "DefaultCN" char(250) , "IUCSChangeOrigin" char(250) , "IUOIdentifier" char(250) , "IuState" char(250) , "MinUDPPortCS" char(250) , "NetworkInd" char(250) , "RelocationSupport" char(250) , "RtcpActivation" char(250) , "SignPointCode" char(250) , "TRafC" char(250) , "TRatC" char(250) , "TigOR" char(250) , "TinTR" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IUCSIP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "DestIPAddressCS" char(250) , "IPBasedRouteIdCS" char(250) , "IPNetmaskCS" char(250) , "IPQMIdCS" char(250) , "IUCSIPChangeOrigin" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IUO( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "CSCNDRXLength" char(250) , "CS_T3212" char(250) , "IUOChangeOrigin" char(250) , "IuBarringDelayTimerCS" char(250) , "IuBarringDelayTimerPS" char(250) , "IuBarringRecoveryGroupCS" char(250) , "IuBarringRecoveryGroupPS" char(250) , "IuBarringRecoveryTimerCS" char(250) , "IuBarringRecoveryTimerPS" char(250) , "IubTransportSharingInd" char(250) , "NRILengthForCSCN" char(250) , "NRILengthForPSCN" char(250) , "NullNRIForCSPool" char(250) , "NullNRIForPSPool" char(250) , "OperatorWeight" char(250) , "MCC" char(250) , "MNC" char(250) , "MNCLength" char(250) , "PSCNDRXLength" char(250) , "PS_NMO" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IUPS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "CNDomainVersion" char(250) , "CNId" char(250) , "CellFACHRelocSupport" char(250) , "DefaultCN" char(250) , "IUOIdentifier" char(250) , "IUPSChangeOrigin" char(250) , "IuState" char(250) , "NetworkInd" char(250) , "PSCNNRI_NRIMaxForPSCN_NRIMinForPSCN" text , "PSFlexiIuWeight" char(250) , "RelocationSupport" char(250) , "SignPointCode" char(250) , "TDataFwd" char(250) , "TRafC" char(250) , "TRatC" char(250) , "TigOR" char(250) , "TinTR" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IUPSIP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "DestIPAddressPS" char(250) , "IPBasedRouteIdPS" char(250) , "IPNetmaskPS" char(250) , "IPQMIdPS" char(250) , "IUPSIPChangeOrigin" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IUR( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "NeighbouringPLMNid_MCC_MNC" char(250) , "name" char(250) , "AAL2PTSigForIur" char(250) , "CellFACHnRncRelocSupport" char(250) , "DSCPHighIur" char(250) , "DSCPLowIur" char(250) , "DSCPMedDCHIur" char(250) , "DelayThresholdMaxIur" char(250) , "DelayThresholdMidIur" char(250) , "DelayThresholdMinIur" char(250) , "HSDPACCEnabledIur" char(250) , "HSDPAULCToDSCPIur" char(250) , "HSPAOverIur" char(250) , "HSUPACCIurEnabled" char(250) , "HSUPADLCToDSCPIur" char(250) , "IBTSSharing" char(250) , "IPBasedRouteIdIur" char(250) , "IURChangeOrigin" char(250) , "InterfaceMode" char(250) , "IurUPSupport" char(250) , "MaxFPDLFrameSizeIur" char(250) , "MaxIurNRTHSDSCHBitRate" char(250) , "MinUDPPortIur" char(250) , "NRncId" char(250) , "NRncNetworkInd" char(250) , "NRncRelocationSupport" char(250) , "NRncSignPointCode" char(250) , "NRncVersion" char(250) , "NeighbouringRNWElement" char(250) , "OverbookingSwitchIur" char(250) , "ProbabilityFactorMaxIur" char(250) , "RNSAPCongAndPreemption" char(250) , "ToAWEOffsetNRTDCHIP" char(250) , "ToAWEOffsetRTDCHIP" char(250) , "ToAWSOffsetNRTDCHIP" char(250) , "ToAWSOffsetRTDCHIP" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.IVIF( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "cESoPSN" char(250) , "cir" char(250) , "confCost" char(250) , "helloInterval" char(250) , "localIpAddr" char(250) , "mtuMismatchDetection" char(250) , "netmask" char(250) , "ospfWithBfd" char(250) , "qosEnabled" char(250) , "retransInterval" char(250) , "routerDeadInterval" char(250) , "sbs" char(250) , "sir" char(250) , "transmitDelay" char(250) , "vlanId" char(250) , "parentInterface" char(250) , "vid" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.L2SWI( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "defaultPCPUntagged" char(250) , "dscpMap_dscp_priorityQueue" text , "enableLayer2Switching" char(250) , "l2PriorityQueueWeight2" char(250) , "l2PriorityQueueWeight3" char(250) , "l2PriorityQueueWeight4" char(250) , "portDefaultPriority" char(250) , "portDefaultVlanId" char(250) , "priorityQueueNonIP" char(250) , "priorityQueuePcp0" char(250) , "priorityQueuePcp1" char(250) , "priorityQueuePcp2" char(250) , "priorityQueuePcp3" char(250) , "priorityQueuePcp4" char(250) , "priorityQueuePcp5" char(250) , "priorityQueuePcp6" char(250) , "priorityQueuePcp7" char(250) , "qosClassification" char(250) , "vlanAwareSwitch" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.LCELGW( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "accessBbCapacity" char(250) , "cellGroupName" char(250) , "dedicatedBbCapacity" char(250) , "hsupaBbDecodCapacity" char(250) , "hsupaBbMinimumUsers" char(250) , "lCelIdList" char(250) , "minNumHsfachUsers" char(250) , "sModId" char(250) , "shareOfHSDPAUser" char(250) , "shareOfHSUPALicences" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.LCELW( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "allowedCarrierList" char(250) , "cellRange" char(250) , "defaultCarrier" char(250) , "expirationTime" char(250) , "hspaMapping" char(250) , "intShutdownTimeout" char(250) , "maxCarrierPower" char(250) , "mimoType" char(250) , "rachCapacity" char(250) , "resourceList_antlId_txRxUsage" char(250) , "shutdownStepAmount" char(250) , "shutdownWindow" char(250) , "vamEnabled" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.MHA( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "active" char(250) , "aisgProtocol" char(250) , "alarmThresholdLevel" char(250) , "antBearing" char(250) , "antModel" char(250) , "antSerial" char(250) , "antlId" char(250) , "baseStationID" char(250) , "connection" char(250) , "downlinkDelay" char(250) , "gainResolution" char(250) , "hwVersion" char(250) , "installerID" char(250) , "lnaNumber" char(250) , "manufacturer" char(250) , "maxGain" char(250) , "mhaAisgModeEnabled" char(250) , "mhaAlarmDetection" char(250) , "mhaGain" char(250) , "mhaType" char(250) , "minGain" char(250) , "prodCode" char(250) , "releaseId3Gpp" char(250) , "scannedAntennaInterface" char(250) , "sectorID" char(250) , "serNum" char(250) , "substance" char(250) , "swVersion" char(250) , "tmaSubunitRxFreqBandMax" char(250) , "tmaSubunitRxFreqBandMin" char(250) , "tmaSubunitTxFreqBandMax" char(250) , "tmaSubunitTxFreqBandMin" char(250) , "tmaSubunitType" char(250) , "uplinkDelay" char(250) , "wmhConnector" char(250) , "installDate" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.MODULE( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "identificationCode" char(250) , "state" char(250) , "subrackSpecificType" char(250) , "userLabel" char(250) , "vendorName" char(250) , "serialNumber" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.MRBTS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "actSwMonitoring" char(250) , "autoConfBlocked" char(250) , "commissioningRequired" char(250) , "enAutoLicReq" char(250) , "resetToTestDedicated" char(250) , "sharedRfTechnologies" char(250) , "timeZone" char(250) , "unitList_primaryConnection_prodCode_unitName_unitNumber_variant" char(250) , "unitList_primaryConnection_prodCode_secondaryConnection_unitName_unitNumber_variant" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.OSPFV2( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "confPref" text , "ospfEnabled" char(250) , "ospfRouterId" char(250) , "refBandwidth" char(250) , "spfDelay" char(250) , "spfHoldTime" char(250) , "spfMaxHoldTime" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.PISCHDLITEM( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "ActionMode" char(250) , "NEList_BaseId" char(250) , "PIObjects" char(250) , "PlanName" char(250) , "StartDate" char(250) , "StopDate" char(250) , "periods_day_duration_hour_interval_minute" char(250) , "priority" char(250) , "scheduleIdentifier" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.PMSCHDLS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.PPTT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "administrativeState" char(250) , "interfaceNumber" char(250) , "pdhLbo" char(250) , "pdhLineType" char(250) , "unitNumber" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.PWNE( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "bfdTimer_bfdDetectMult_desiredMinTxIntvl_requiredMinRxIntvl" char(250) , "cwEnable" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.QOS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "perHopBehaviourWeightList_assuredForwardingClass1_assuredForwardingClass2_assuredForwardingClass3_assuredForwardingClass4_bestEffort" char(250) , "trafficTypesMap_dscpList_pHB_trafficType_vlanPrio" char(250) , "trafficTypesMap_pHB_trafficType_vlanPrio" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.RMOD( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "climateControlProfiling" char(250) , "connectionList_linkId_positionInChain_sModId" char(250) , "moduleLocation" char(250) , "prodCode" char(250) , "radioSiteId" char(250) , "serNum" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.RNAC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "AMRLoadTxPower" char(250) , "AMRNumofReconf" char(250) , "AMRwinSizeSCload" char(250) , "AdjustmentPeriod" char(250) , "AdjustmentRatio" char(250) , "BitRateSetPSNRT" char(250) , "DCHSlopeOfTheCurve" char(250) , "DLInLoopPCStepSizeCPC" char(250) , "DLLoadSource" char(250) , "DLmaxBitRateSF128" char(250) , "DLmaxBitRateSF16" char(250) , "DLmaxBitRateSF256" char(250) , "DLmaxBitRateSF32" char(250) , "DLmaxBitRateSF64" char(250) , "DLpuncturingLimit" char(250) , "DownlinkInnerLoopPCStepSize" char(250) , "DynHSUPABLERAlgTrgTime" char(250) , "DynHSUPABLERBurstDataRx" char(250) , "DynHSUPABLERContDataRx10" char(250) , "DynHSUPABLERContDataRx2" char(250) , "DynHSUPABLERFrameWinSiz" char(250) , "DynHSUPABLERMaxRateThrB" char(250) , "DynHSUPABLERMaxRateThrC10" char(250) , "DynHSUPABLERMaxRateThrC2" char(250) , "DynHSUPABLERPeakRateRx" char(250) , "DynHSUPABLERThrBurstyTP" char(250) , "DynHSUPABurstyPeriod" char(250) , "EDCHSlopeOfTheCurve" char(250) , "EmeCallLevelValue" char(250) , "EmeCallPCIValue" char(250) , "EmeCallPVIValue" char(250) , "ExpectReorderingPDCP" char(250) , "FOLPCSIRTgtModInt" char(250) , "FOLPCStepSizSIRTgt" char(250) , "FmaxPeriodPDCP" char(250) , "FmaxTimePDCP" char(250) , "FreePtxSafetyMarginStr" char(250) , "PrachBetaC120" char(250) , "PrachBetaC15" char(250) , "PrachBetaC30" char(250) , "PrachBetaC60" char(250) , "PrachBetaD120" char(250) , "PrachBetaD15" char(250) , "PrachBetaD30" char(250) , "PrachBetaD60" char(250) , "HeaderCompressionMethod" char(250) , "L1BurstDataBLERTrgtEDCH" char(250) , "L1ContBLERTrgtEDCH10" char(250) , "L1ContBLERTrgtEDCH2" char(250) , "L1PeakRateBLERTrgtEDCH" char(250) , "LoadBasedAMRCodecMode" char(250) , "MaxAdjustmentStep" char(250) , "MaxFreezingTime" char(250) , "MaxHeaderPDCP" char(250) , "MaxNumberOfReAttemptsCong" char(250) , "MinPrefChange" char(250) , "NonTCPspacePDCP" char(250) , "PCPreamble" char(250) , "PCrangeDL" char(250) , "PagingRestrictionInd" char(250) , "PeriodULRCAMR" char(250) , "PrefSubtract" char(250) , "RAU_LAU_RestrictionInd" char(250) , "RNACChangeOrigin" char(250) , "RNARDSACCell_DCH" char(250) , "RNARDSACCell_PCH" char(250) , "RNARDSACGuardTime" char(250) , "RRCConnSetupMsgSize" char(250) , "SRBDelay" char(250) , "SignallingLinkInactivityTimer" char(250) , "StepSizeForDCHBLER" char(250) , "StepSizeForEDCHBLER" char(250) , "TCPspacePDCP" char(250) , "TDMultForHSDPAStreaming" char(250) , "TFDCHZeroBitRate" char(250) , "ULFastOLPCDTXthld" char(250) , "ULmaxBitRateSF128" char(250) , "ULmaxBitRateSF16" char(250) , "ULmaxBitRateSF256" char(250) , "ULmaxBitRateSF32" char(250) , "ULmaxBitRateSF64" char(250) , "ULmaxBitRateSF8" char(250) , "ULpuncturingLimit" char(250) , "UlScrCodeMin" char(250) , "UpLinkInitialTransmitPowerMode" char(250) , "UpLinkRecoveryPeriodPowerMode" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.RNC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "ActivePRNC" char(250) , "AlarmSetforWCELBLINIT" char(250) , "CBCSourceIPAddress" char(250) , "CSAttachDetachAllowed" char(250) , "CommonMCC" char(250) , "CommonMNC" char(250) , "CommonMNCLength" char(250) , "ConnectionRetryCounter" char(250) , "DLBLERConfInterval" char(250) , "ExtendedULDLactivationTmr" char(250) , "MACLogChPriSRB1" char(250) , "MACLogChPriSRB2" char(250) , "MACLogChPriSRB3" char(250) , "MaxAMRCapacityErl" char(250) , "MaxCarrierConnectivity" char(250) , "MaxIubPSThroughputMbps" char(250) , "N302" char(250) , "N304" char(250) , "N308" char(250) , "OMSBackupIpAddress" char(250) , "OMSIpAddress" char(250) , "PWSMDuration" char(250) , "PWSMExceededTrafficDur" char(250) , "PageRep1stInterv" char(250) , "PageRep2ndInterv" char(250) , "RANAPprocInitWait" char(250) , "RNCChangeOrigin" char(250) , "RNCIPAddress" char(250) , "RNCName" char(250) , "RTservicesForPS" char(250) , "RestrictionInterval" char(250) , "RncClientTLSMode" char(250) , "RncOptions" text , "SIB11_priority" char(250) , "SIB15_priority" char(250) , "SIB18_priority" text , "SIB19Priority" char(250) , "SIB1_priority" char(250) , "SIB2_priority" char(250) , "SIB3_priority" char(250) , "SIB5_priority" text , "SecOMSIpAddress" text , "ServingOMS" char(250) , "ServingOMSAdminSetting" char(250) , "T302" char(250) , "T304" char(250) , "T305" char(250) , "T307" char(250) , "T308" char(250) , "T309" char(250) , "T314" char(250) , "T316" char(250) , "T317" char(250) , "ToAWE_NRT_DCH_tti10" char(250) , "ToAWE_NRT_DCH_tti20" char(250) , "ToAWE_NRT_DCH_tti40" char(250) , "ToAWE_RT_DCH_tti10" char(250) , "ToAWE_RT_DCH_tti20" char(250) , "ToAWE_RT_DCH_tti40" char(250) , "ToAWE_Speech" char(250) , "ToAWS_NRT_DCH_tti10" char(250) , "ToAWS_NRT_DCH_tti20" char(250) , "ToAWS_NRT_DCH_tti40" char(250) , "ToAWS_RT_DCH_tti10" char(250) , "ToAWS_RT_DCH_tti20" char(250) , "ToAWS_RT_DCH_tti40" char(250) , "ToAWS_Speech" char(250) , "ULBLERConfInterval" char(250) , "UL_DLcapacityReqWait" char(250) , "WCELIdleAlarmTimeout" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.RNFC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "AMRCodecSetEnabled" char(250) , "AMRWithEDCH" char(250) , "AMRWithHSDSCH" char(250) , "AutomDLPlanUpdEnabled" char(250) , "BTSLoadIndSel" char(250) , "CCCHforCUCallowed" char(250) , "CMmasterSwitch" char(250) , "CSCallSetUpFACHPCHImpr" char(250) , "CSFBEnabled" char(250) , "CUCforPCHtoDCHallowed" char(250) , "CVUserInactInSignConnRel" char(250) , "DCH00SuppOnIurEnabled" char(250) , "DCHBitRateBalancing" char(250) , "DCHScheOverIur" char(250) , "DCHtoPCHEnabled" char(250) , "DLOptimisationUsage" char(250) , "DynUsageHSDPAReturnChannel" char(250) , "EUTRAdetection" char(250) , "FRLCEnabled" char(250) , "FastDormancyEnabled" char(250) , "FastPCHSwitchEnabled" char(250) , "FasterOLPCEnabled" char(250) , "FemtoHandoverControl" char(250) , "FlexULRLCEnabled" char(250) , "FlexUpgrUsage" char(250) , "HLSModeSelection" char(250) , "HSDPA16KBPSReturnChannel" char(250) , "HSDPA48UsersEnabled" char(250) , "HSDPADynamicResourceAllocation" char(250) , "HSDPAMobility" char(250) , "HSPAInterRNCMobility" char(250) , "HSPAOverIurExt" char(250) , "HSUPADynBLEREnabled" char(250) , "IFHOOverIurEnabled" char(250) , "IFHOOverIurExt" char(250) , "ISHOCancellation" char(250) , "ISHOInIurMobility" char(250) , "IuPSrelWait3G2GMultiServ" char(250) , "LFDProfEnabled" char(250) , "MIBPLMNIdIncluded" char(250) , "MOCNenabled" char(250) , "MRABRelocVendSpCorr" char(250) , "PBSpolicy" char(250) , "PPACEnabled" char(250) , "PSOpThroUsage" char(250) , "PWSMDriftAllowed" char(250) , "PostVerifPeriodDLSynch" char(250) , "PowerBalancing" char(250) , "RABDRAEnabled" char(250) , "RABFailDueUESTCorr" char(250) , "RNFCChangeOrigin" char(250) , "RRCSetupCCHEnabledR99" char(250) , "SIBCapabilityCheck" char(250) , "SLHOCmAllowedNRT" char(250) , "SRVCCEnabled" char(250) , "SignConnActivitySupervision" char(250) , "SubscriberTrace" char(250) , "WBAMRCodecSetEnabled" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.RNHSPA( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "WeightForARP1" char(250) , "WeightForARP2" char(250) , "WeightForARP3" char(250) , "ATOSRBsOnHSPA" char(250) , "N10msCPCOptObjective" char(250) , "N10msCQIDTXTimer" char(250) , "N10msCQIFeedbackCPC" char(250) , "N10msInacThrUEDRXCycle" char(250) , "N10msInacThrUEDTXCycl2" char(250) , "N10msMACDTXCycle" char(250) , "N10msMACInacThr" char(250) , "N10msUEDPCCHburst1" char(250) , "N10msUEDPCCHburst2" char(250) , "N10msUEDRXCycle" char(250) , "N10msUEDTXCycle1" char(250) , "N10msUEDTXCycle2" char(250) , "N10msUEDTXLongPreamble" char(250) , "N2msCPCOptObjective" char(250) , "N2msCQIDTXTimer" char(250) , "N2msCQIFeedbackCPC" char(250) , "N2msInacThrUEDRXCycle" char(250) , "N2msInacThrUEDTXCycl2" char(250) , "N2msMACDTXCycle" char(250) , "N2msMACInacThr" char(250) , "N2msUEDPCCHburst1" char(250) , "N2msUEDPCCHburst2" char(250) , "N2msUEDRXCycle" char(250) , "N2msUEDTXCycle1" char(250) , "N2msUEDTXCycle2" char(250) , "N2msUEDTXLongPreamble" char(250) , "S10msCPCOptObjective" char(250) , "S10msCQIDTXTimer" char(250) , "S10msCQIFeedbackCPC" char(250) , "S10msInacThrUEDRXCycle" char(250) , "S10msInacThrUEDTXCycl2" char(250) , "S10msMACDTXCycle" char(250) , "S10msMACInacThr" char(250) , "S10msUEDPCCHburst1" char(250) , "S10msUEDPCCHburst2" char(250) , "S10msUEDRXCycle" char(250) , "S10msUEDTXCycle1" char(250) , "S10msUEDTXCycle2" char(250) , "S10msUEDTXLongPreamble" char(250) , "S2msCPCOptObjective" char(250) , "S2msCQIDTXTimer" char(250) , "S2msCQIFeedbackCPC" char(250) , "S2msInacThrUEDRXCycle" char(250) , "S2msInacThrUEDTXCycl2" char(250) , "S2msMACDTXCycle" char(250) , "S2msMACInacThr" char(250) , "S2msUEDPCCHburst1" char(250) , "S2msUEDPCCHburst2" char(250) , "S2msUEDRXCycle" char(250) , "S2msUEDTXCycle1" char(250) , "S2msUEDTXCycle2" char(250) , "S2msUEDTXLongPreamble" char(250) , "V10msCPCOptObjective" char(250) , "V10msCQIDTXTimer" char(250) , "V10msCQIFeedbackCPC" char(250) , "V10msInacThrUEDRXCycle" char(250) , "V10msInacThrUEDTXCycl2" char(250) , "V10msMACDTXCycle" char(250) , "V10msMACInacThr" char(250) , "V10msUEDPCCHburst1" char(250) , "V10msUEDPCCHburst2" char(250) , "V10msUEDRXCycle" char(250) , "V10msUEDTXCycle1" char(250) , "V10msUEDTXCycle2" char(250) , "V10msUEDTXLongPreamble" char(250) , "V2msCPCOptObjective" char(250) , "V2msCQIDTXTimer" char(250) , "V2msCQIFeedbackCPC" char(250) , "V2msInacThrUEDRXCycle" char(250) , "V2msInacThrUEDTXCycl2" char(250) , "V2msMACDTXCycle" char(250) , "V2msMACInacThr" char(250) , "V2msUEDPCCHburst1" char(250) , "V2msUEDPCCHburst2" char(250) , "V2msUEDRXCycle" char(250) , "V2msUEDTXCycle1" char(250) , "V2msUEDTXCycle2" char(250) , "V2msUEDTXLongPreamble" char(250) , "CPICHECNOSRBHSPA" char(250) , "CPICHECNOThreEDCH2MS" char(250) , "CPICHRSCPThreEDCH2MS" char(250) , "CPICHRSCPThreSRBHSDPA" char(250) , "DCellVsMIMOPreference" char(250) , "DiscardTimerHSCSVoice" char(250) , "EDCHCTSwitchGuardTimer" char(250) , "EDCHMACdflowtputStrTtT" char(250) , "EDCHMaxHARQReTxStr" char(250) , "EDCHMaxHarqReTxSRB" char(250) , "EDCHMaxHarqReTxSRB2MS" char(250) , "EDCHMaxNumberOfHARQReTx" char(250) , "EDCHQOSClasses" char(250) , "EnablDelayHHO" char(250) , "EnablDelayStand" char(250) , "FDPCHAllocMinInterval" char(250) , "FDPCHAndSRBOnHSPATC" char(250) , "FDPCHSetupEC" char(250) , "FactorEDCHMaxBRPSstream" char(250) , "FactorEDCHMaxBitRate" char(250) , "FactorEDCHMaxBitRate2NRT" char(250) , "FactorEDCHMaxBitRate3NRT" char(250) , "HSDPACPICHCTSRepPer" char(250) , "HSDPACPICHEcNoThreshold" char(250) , "HSDPACellChangeRepetitionTime" char(250) , "HSDPAChaTypeSwitchWindow" char(250) , "HSDPAMaxCellChangeRepetition" char(250) , "HSDPAPeakRateLimitRABMax" char(250) , "HSDPAPriority" char(250) , "HSDPARRCdiversity" char(250) , "HSDPASRBWindow" char(250) , "HSDSCHCTSwitchGuardTimer" char(250) , "HSDSCHGuardTimerLowThroughput" char(250) , "HSDSCHQoSclasses" char(250) , "NBRForPri0DL" char(250) , "NBRForPri0UL" char(250) , "NBRForPri10DL" char(250) , "NBRForPri10UL" char(250) , "NBRForPri11DL" char(250) , "NBRForPri11UL" char(250) , "NBRForPri12DL" char(250) , "NBRForPri12UL" char(250) , "NBRForPri1DL" char(250) , "NBRForPri1UL" char(250) , "NBRForPri2DL" char(250) , "NBRForPri2UL" char(250) , "NBRForPri3DL" char(250) , "NBRForPri3UL" char(250) , "NBRForPri4DL" char(250) , "NBRForPri4UL" char(250) , "NBRForPri5DL" char(250) , "NBRForPri5UL" char(250) , "NBRForPri6DL" char(250) , "NBRForPri6UL" char(250) , "NBRForPri7DL" char(250) , "NBRForPri7UL" char(250) , "NBRForPri8DL" char(250) , "NBRForPri8UL" char(250) , "NBRForPri9DL" char(250) , "NBRForPri9UL" char(250) , "HSPDSCHAdjustPeriod" char(250) , "HappyBitDelayConditionEDCH" char(250) , "HsdschGuardTimerHO" char(250) , "InacUserNbrXXXOverNRT" char(250) , "InacUsersOverloadFact" char(250) , "MACdflowthroughputRelThr" char(250) , "MACdflowthroughputTimetoTrigger" char(250) , "MACdflowtputStrTtT" char(250) , "MACdflowutilStrTtT" char(250) , "MEHCQIFeedbackCycle" char(250) , "MEHHSUPAUserIncr" char(250) , "MaxBitRateNRTMACDFlow" char(250) , "MaxCSDelayRNCETTI10" char(250) , "MaxCSDelayRNCETTI2" char(250) , "MaxCSDelayUE" char(250) , "MaxEHARQReTxCSAMR10" char(250) , "MaxEHARQReTxCSAMR2" char(250) , "MaxReWaitTime" char(250) , "MaxReWaitTime2msTTI" char(250) , "MaxReWaitTimeRT" char(250) , "MaxSetOfEDPDCHCSAMR10" char(250) , "MaxSetOfEDPDCHCSAMR2" char(250) , "NRTRBBRWithEDCHStr" char(250) , "PeriodicityForSI" char(250) , "PowerOffsetEHARQVoice" char(250) , "PowerOffsetForSI" char(250) , "RNHSPAChangeOrigin" char(250) , "SmartHSPATimeToTrigger" char(250) , "SmartHSPATputAveWin" char(250) , "T1HSCSVoice" char(250) , "TGPLAMRHSDPAInterFreq" char(250) , "TGPLHSDPAInterFreq" char(250) , "ThresholdMaxEDPDCHSR1920kbps" char(250) , "ThresholdMaxEDPDCHSR3840kbps" char(250) , "ThresholdMaxEDPDCHSR960kbps" char(250) , "UPResAllocInCellDCHWait" char(250) , "VCPHSDPAPrevDuration" char(250) , "VCPHSDPAUserIncr" char(250) , "WeightDCHBG" char(250) , "WeightDCHTHP1" char(250) , "WeightDCHTHP2" char(250) , "WeightDCHTHP3" char(250) , "WeightHSPABG" char(250) , "WeightHSPATHP1" char(250) , "WeightHSPATHP2" char(250) , "WeightHSPATHP3" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.RNMOBI( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "AnchorFmciIdentifier" char(250) , "AnchorFmcsIdentifier" char(250) , "AnchorHopiIdentifier" char(250) , "AnchorHopsIdentifier" char(250) , "CellReselectionObservingTime" char(250) , "DRRCForHSDPALayerServices" char(250) , "DirectedRRCForHSDPALayerEnhanc" char(250) , "DisablePowerInHSDPALayeringDecision" char(250) , "EcnoDifferenceThreshold" char(250) , "EnableULQualDetRep" char(250) , "FastDormOverCpcPri" char(250) , "FastUECancel" char(250) , "FastUEPeriod" char(250) , "FastUEThreshold" char(250) , "GANetwARFCN" char(250) , "GANetwBCC" char(250) , "GANetwNCC" char(250) , "GapPositionSingleFrame" char(250) , "GsmHandoverAMR" char(250) , "GsmHandoverCS" char(250) , "GsmHandoverNrtPS" char(250) , "GsmHandoverRtPS" char(250) , "HSCAHORabCombSupport" char(250) , "HSDPACPICHAveWindow" char(250) , "HSDPACPICHReportPeriod" char(250) , "HSDPACellChangeMinInterval" char(250) , "HSDPALayerLoadShareThreshold" char(250) , "HSDPASIRErrorAveWindow" char(250) , "HSDPASIRErrorFilterCoefficient" char(250) , "HSDPASIRErrorReportPeriod" char(250) , "HSDPASIRErrorServCell" char(250) , "HSDPASIRErrorTargetCell" char(250) , "HSDPAServCellWindow" char(250) , "HSPADRNCEcNoOffset" char(250) , "HSPADRNCSIRErrorOffset" char(250) , "IBTSRabCombSupport" char(250) , "LHOMinNrtDchAllocTime" char(250) , "LowerRxTxTimeDiff" char(250) , "MBLBGuardTimer" char(250) , "MaxCellReselections" char(250) , "MaxNumISHOClPerAS" char(250) , "MultipleBSICIdent" char(250) , "NCHOFilterCoeffComLoadMeasDRNCCell" char(250) , "NCHOHystComLoadMeasDRNCCell" char(250) , "NCHOThrComLoadMeasDRNCCell" char(250) , "PreferBandForLayering" char(250) , "RANAPCause1LoadHO" char(250) , "RANAPCause2LoadHO" char(250) , "RANAPCause3LoadHO" char(250) , "RANAPCause1ServHO" char(250) , "RANAPCause2ServHO" char(250) , "RANAPCause3ServHO" char(250) , "RNMOBIChangeOrigin" char(250) , "SLHOHandlingOfCellLoadMeasNotAct" char(250) , "SLHOProfileBackgroundPSNRTData" char(250) , "SLHOProfileConvCSSpeech" char(250) , "SLHOProfileConvCSTData" char(250) , "SLHOProfileConvPSRTData" char(250) , "SLHOProfileConvPSSpeech" char(250) , "SLHOProfileInteractivePSNRTData" char(250) , "SLHOProfileStreamCSNTData" char(250) , "SLHOProfileStreamPSRTData" char(250) , "SLHOUseBackgroundPSNRTData" char(250) , "SLHOUseConvCSSpeech" char(250) , "SLHOUseConvCSTData" char(250) , "SLHOUseConvPSRTData" char(250) , "SLHOUseConvPSSpeech" char(250) , "SLHOUseInteractivePSNRTData" char(250) , "SLHOUseStreamCSNTData" char(250) , "SLHOUseStreamPSRTData" char(250) , "ServBtwnHSDPALayers" char(250) , "ServicesToHSDPALayer" char(250) , "SmartLTELayeringPrevT" char(250) , "SmartLTELayeringServ" char(250) , "TGPLdoubleframeNRTPSgsm" char(250) , "TGPLdoubleframeNRTPSinterFreq" char(250) , "TGPLsingleframeAMRgsm" char(250) , "TGPLsingleframeAMRinterFreq" char(250) , "TGPLsingleframeCSgsm" char(250) , "TGPLsingleframeCSinterFreq" char(250) , "TGPLsingleframeNRTPSgsm" char(250) , "TGPLsingleframeNRTPSinterFreq" char(250) , "TGPLsingleframeRTPSgsm" char(250) , "TGPLsingleframeRTPSinterFreq" char(250) , "TRelocOverall" char(250) , "TRelocPrep" char(250) , "UEQualityRepInterv" char(250) , "UETxPowerMaxRef" text , "ULQualDetRepThreshold" char(250) , "UpperRxTxTimeDiff" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.RNPS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "ActivationTimeOffset" char(250) , "CellDCHtestTmr" char(250) , "CrQueuingTimeDL" char(250) , "CrQueuingTimeUL" char(250) , "DCHUtilBelowDowngradeThr" char(250) , "DCHUtilHighAveWin" char(250) , "DCHUtilHighBelowNRTDataRateThr" char(250) , "DCHUtilHighTimeToTrigger" char(250) , "DCHUtilLowerAveWin128" char(250) , "DCHUtilLowerAveWin256" char(250) , "DCHUtilLowerAveWin32" char(250) , "DCHUtilLowerAveWin384" char(250) , "DCHUtilLowerAveWin64" char(250) , "DCHUtilLowerDowngradeThr128" char(250) , "DCHUtilLowerDowngradeThr256" char(250) , "DCHUtilLowerDowngradeThr32" char(250) , "DCHUtilLowerDowngradeThr384" char(250) , "DCHUtilLowerDowngradeThr64" char(250) , "DCHUtilLowerTimeToTrigger128" char(250) , "DCHUtilLowerTimeToTrigger256" char(250) , "DCHUtilLowerTimeToTrigger32" char(250) , "DCHUtilLowerTimeToTrigger384" char(250) , "DCHUtilLowerTimeToTrigger64" char(250) , "DCHUtilMeasGuardTime" char(250) , "DCHUtilUpperAveWin128" char(250) , "DCHUtilUpperAveWin256" char(250) , "DCHUtilUpperAveWin32" char(250) , "DCHUtilUpperAveWin384" char(250) , "DCHUtilUpperAveWin64" char(250) , "DCHUtilUpperDowngradeThr128" char(250) , "DCHUtilUpperDowngradeThr256" char(250) , "DCHUtilUpperDowngradeThr32" char(250) , "DCHUtilUpperDowngradeThr384" char(250) , "DCHUtilUpperDowngradeThr64" char(250) , "DCHUtilUpperTimeToTrigger128" char(250) , "DCHUtilUpperTimeToTrigger256" char(250) , "DCHUtilUpperTimeToTrigger32" char(250) , "DCHUtilUpperTimeToTrigger384" char(250) , "DCHUtilUpperTimeToTrigger64" char(250) , "DLOptimisationProhibitTime" char(250) , "DLOptimisationPwrOffset" char(250) , "FactorMinPBSinterval" char(250) , "InactDetForStreamingRB" char(250) , "IurPriority" char(250) , "MEHTVMPendingTime" char(250) , "PriForBackARP1" char(250) , "PriForBackARP2" char(250) , "PriForBackARP3" char(250) , "PriForConvOnHSPA" char(250) , "PriForIntSignaling" char(250) , "PriForIntTHP1ARP1" char(250) , "PriForIntTHP1ARP2" char(250) , "PriForIntTHP1ARP3" char(250) , "PriForIntTHP2ARP1" char(250) , "PriForIntTHP2ARP2" char(250) , "PriForIntTHP2ARP3" char(250) , "PriForIntTHP3ARP1" char(250) , "PriForIntTHP3ARP2" char(250) , "PriForIntTHP3ARP3" char(250) , "PriForSRBsOnHSPA" char(250) , "PriForStreamARP1" char(250) , "PriForStreamARP2" char(250) , "PriForStreamARP3" char(250) , "RNPSChangeOrigin" char(250) , "RTOverNRTPriThresholdARP1" char(250) , "RTOverNRTPriThresholdARP2" char(250) , "RTOverNRTPriThresholdARP3" char(250) , "SmartInactTimerFACH" char(250) , "SmartInactivityTimerDCH" char(250) , "ToCellFACHinTest" char(250) , "TrafVolThresholdDLHigh" char(250) , "TrafVolThresholdDLHighDCH128" char(250) , "TrafVolThresholdDLHighDCH16" char(250) , "TrafVolThresholdDLHighDCH256" char(250) , "TrafVolThresholdDLHighDCH32" char(250) , "TrafVolThresholdDLHighDCH64" char(250) , "TrafVolThresholdDLHighDCH8" char(250) , "TrafVolThresholdULHigh" char(250) , "TrafVolThresholdULHighDCH128" char(250) , "TrafVolThresholdULHighDCH16" char(250) , "TrafVolThresholdULHighDCH256" char(250) , "TrafVolThresholdULHighDCH32" char(250) , "TrafVolThresholdULHighDCH64" char(250) , "TrafVolThresholdULHighDCH8" char(250) , "TrafVolTimeToTriggerDL" char(250) , "TrafVolTimeToTriggerUL" char(250) , "ULLoadStateTTT" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.RNRLC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "AMRLCBufMaxOverbook2NRT" char(250) , "AMRLCBufMaxOverbook3NRT" char(250) , "AMRLCMaximumBufferUE100" char(250) , "AMRLCMaximumBufferUE1150" char(250) , "AMRLCMaximumBufferUE1250" char(250) , "AMRLCMaximumBufferUE150" char(250) , "AMRLCMaximumBufferUE1500" char(250) , "AMRLCMaximumBufferUE1800" char(250) , "AMRLCMaximumBufferUE1k" char(250) , "AMRLCMaximumBufferUE200" char(250) , "AMRLCMaximumBufferUE2300" char(250) , "AMRLCMaximumBufferUE2550" char(250) , "AMRLCMaximumBufferUE300" char(250) , "AMRLCMaximumBufferUE50" char(250) , "AMRLCMaximumBufferUE500" char(250) , "AMRLCMaximumBufferUE750" char(250) , "AMRLCmaximumBufferUE400" char(250) , "AMRLCOnDCHOfNRTPSCount" char(250) , "AMRLCOnDCHOfNRTPSFilterReTX" char(250) , "AMRLCOnDCHOfNRTPSMaxDAT" char(250) , "AMRLCOnDCHOfNRTPSMaxMRW" char(250) , "AMRLCOnDCHOfNRTPSMaxRST" char(250) , "AMRLCOnDCHOfNRTPSPeriodMax" char(250) , "AMRLCOnDCHOfNRTPSPeriodMin" char(250) , "AMRLCOnDCHOfNRTPSPollPDU" char(250) , "AMRLCOnDCHOfNRTPSPollSDU" char(250) , "AMRLCOnDCHOfNRTPSPollWindow" char(250) , "AMRLCOnDCHOfNRTPSTriggers" char(250) , "AMRLCOnDCHOfSRB136MaxDAT" char(250) , "AMRLCOnDCHOfSRB136PeriodMax" char(250) , "AMRLCOnDCHOfSRB136PeriodMin" char(250) , "AMRLCOnDCHOfSRB136PollPDU" char(250) , "AMRLCOnDCHOfSRB136PollSDU" char(250) , "AMRLCOnDCHOfSRB136PollWindow" char(250) , "AMRLCOnDCHOfSRB136Triggers" char(250) , "AMRLCOnDCHOfSRB34MaxDAT" char(250) , "AMRLCOnDCHOfSRB34PeriodMax" char(250) , "AMRLCOnDCHOfSRB34PeriodMin" char(250) , "AMRLCOnDCHOfSRB34PollPDU" char(250) , "AMRLCOnDCHOfSRB34PollSDU" char(250) , "AMRLCOnDCHOfSRB34PollWindow" char(250) , "AMRLCOnDCHOfSRB34Triggers" char(250) , "AMRLCOnDCHOfStreamCount" char(250) , "AMRLCOnDCHOfStreamDiscardTime" char(250) , "AMRLCOnDCHOfStreamFilterReTX" char(250) , "AMRLCOnDCHOfStreamMaxDAT" char(250) , "AMRLCOnDCHOfStreamMaxMRW" char(250) , "AMRLCOnDCHOfStreamMaxRST" char(250) , "AMRLCOnDCHOfStreamPeriodMax" char(250) , "AMRLCOnDCHOfStreamPeriodMin" char(250) , "AMRLCOnDCHOfStreamPollPDU" char(250) , "AMRLCOnDCHOfStreamPollSDU" char(250) , "AMRLCOnDCHOfStreamPollWindow" char(250) , "AMRLCOnDCHOfStreamTriggers" char(250) , "AMRLCOnEDCHOfNRTPSCount" char(250) , "AMRLCOnEDCHOfNRTPSMaxDAT" char(250) , "AMRLCOnEDCHOfNRTPSMaxMRW" char(250) , "AMRLCOnEDCHOfNRTPSMaxRST" char(250) , "AMRLCOnEDCHOfNRTPSPeriodMax" char(250) , "AMRLCOnEDCHOfNRTPSPeriodMin" char(250) , "AMRLCOnEDCHOfNRTPSPollPDU" char(250) , "AMRLCOnEDCHOfNRTPSPollSDU" char(250) , "AMRLCOnEDCHOfNRTPSPollWindow" char(250) , "AMRLCOnEDCHOfNRTPSTriggers" char(250) , "EDCHStrPSCount" char(250) , "EDCHStrPSDiscardTime" char(250) , "EDCHStrPSMaxDAT" char(250) , "EDCHStrPSMaxMRW" char(250) , "EDCHStrPSMaxRST" char(250) , "EDCHStrPSPeriodMax" char(250) , "EDCHStrPSPeriodMin" char(250) , "EDCHStrPSPollPDU" char(250) , "EDCHStrPSPollSDU" char(250) , "EDCHStrPSPollWindow" char(250) , "EDCHStrPSTriggers" char(250) , "AMRLCOnFACHOfPSMaxDAT" char(250) , "AMRLCOnFACHOfPSMaxMRW" char(250) , "AMRLCOnFACHOfPSMaxRST" char(250) , "AMRLCOnFACHOfPSPeriodMax" char(250) , "AMRLCOnFACHOfPSPeriodMin" char(250) , "AMRLCOnFACHOfPSPollPDU" char(250) , "AMRLCOnFACHOfPSPollSDU" char(250) , "AMRLCOnFACHOfPSPollWindow" char(250) , "AMRLCOnFACHOfPSTriggers" char(250) , "AMRLCOnFACHOfSRBMaxDAT" char(250) , "AMRLCOnFACHOfSRBPeriodMax" char(250) , "AMRLCOnFACHOfSRBPeriodMin" char(250) , "AMRLCOnFACHOfSRBPollPDU" char(250) , "AMRLCOnFACHOfSRBPollSDU" char(250) , "AMRLCOnFACHOfSRBPollWindow" char(250) , "AMRLCOnFACHOfSRBTriggers" char(250) , "AMRLCOnHSDSCHOfNRTPSCount" char(250) , "AMRLCOnHSDSCHOfNRTPSFilterReTX" char(250) , "AMRLCOnHSDSCHOfNRTPSMaxDAT" char(250) , "AMRLCOnHSDSCHOfNRTPSMaxMRW" char(250) , "AMRLCOnHSDSCHOfNRTPSMaxRST" char(250) , "AMRLCOnHSDSCHOfNRTPSPeriodMax" char(250) , "AMRLCOnHSDSCHOfNRTPSPeriodMin" char(250) , "AMRLCOnHSDSCHOfNRTPSPollPDU" char(250) , "AMRLCOnHSDSCHOfNRTPSPollSDU" char(250) , "AMRLCOnHSDSCHOfNRTPSPollWindow" char(250) , "AMRLCOnHSDSCHOfNRTPSTriggers" char(250) , "HSDSCHStrDiscardTime" char(250) , "HSDSCHStrPSCount" char(250) , "HSDSCHStrPSFilterReTX" char(250) , "HSDSCHStrPSMaxDAT" char(250) , "HSDSCHStrPSMaxMRW" char(250) , "HSDSCHStrPSMaxRST" char(250) , "HSDSCHStrPSPeriodMax" char(250) , "HSDSCHStrPSPeriodMin" char(250) , "HSDSCHStrPSPollPDU" char(250) , "HSDSCHStrPSPollSDU" char(250) , "HSDSCHStrPSPollWindow" char(250) , "HSDSCHStrPSTriggers" char(250) , "AMRLCRelatTXWindowRate1" char(250) , "AMRLCRelatTXWindowRate1Size" char(250) , "AMRLCRelatTXWindowRate2" char(250) , "AMRLCRelatTXWindowRate2Size" char(250) , "AMRLCRelatTXWindowRate3" char(250) , "AMRLCRelatTXWindowRate3Size" char(250) , "AMRLCRelatTXWindowRate4" char(250) , "AMRLCRelatTXWindowRate4Size" char(250) , "AMRLCRelatTXWindowRate5" char(250) , "AMRLCRelatTXWindowRate5Size" char(250) , "AMRLCRelatTXWindowRate6" char(250) , "AMRLCRelatTXWindowRate6Size" char(250) , "AMRLCRelatTXWindowRate7" char(250) , "AMRLCRelatTXWindowRate7Size" char(250) , "AMRLCRelatTXWindowRate8" char(250) , "AMRLCRelatTXWindowRate8Size" char(250) , "AMRLCRespTimeDCH10" char(250) , "AMRLCRespTimeDCH20" char(250) , "AMRLCRespTimeDCH40" char(250) , "AMRLCRespTimeDCHRevHSDSCH" char(250) , "AMRLCRespTimeRevEDCH" char(250) , "AMRLCRespTimeEDCH" char(250) , "AMRLCRespTimeFACHAndRACH" char(250) , "AMRLCRespTimeHSDSCHRevDCH" char(250) , "AMRLCRespTimeHSDSCHRevEDCH" char(250) , "AMRLCSRB3n4PeriodMax" char(250) , "AMRLCSRB3n4RespTime" char(250) , "AMRLCRespTimeSRBHSPA" char(250) , "AMRLCSRBHSPAMaxDAT" char(250) , "AMRLCSRBHSPAPeriodMax" char(250) , "AMRLCSRBHSPAPeriodMin" char(250) , "AMRLCSRBHSPAPollPDU" char(250) , "AMRLCSRBHSPAPollSDU" char(250) , "AMRLCSRBHSPAPollWindow" char(250) , "AMRLCSRBHSPATriggers" char(250) , "AMRLCTXWindowSizeSRB2" char(250) , "AMRLCTXWindowSizeSRB3" char(250) , "AMRLCTXWindowSizeSRB4" char(250) , "PDUSizeBitRateThr" char(250) , "PDUSizeCodeThreshold" char(250) , "PDUSizeSIRThr" char(250) , "RLCConfOptionFPS" char(250) , "RNRLCChangeOrigin" char(250) , "SDUdiscardModeRTPS" char(250) , "UMRLCEVoiceDiscardTime" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.RNTRM( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "A2EA" char(250) , "Af122AMRDL" char(250) , "Af122AMRUL" char(250) , "Af59AMRDL" char(250) , "Af59AMRUL" char(250) , "Af144CSStreDL" char(250) , "Af144CSStreUL" char(250) , "Af576CSStreDL" char(250) , "Af576CSStreUL" char(250) , "Af64CSConDL" char(250) , "Af64CSConUL" char(250) , "Af128And136DCCHDL" char(250) , "Af128And136DCCHUL" char(250) , "Af16And17DCCHDL" char(250) , "Af16And17DCCHUL" char(250) , "Af32And34DCCHDL" char(250) , "Af32And34DCCHUL" char(250) , "AfFACHCCDL" char(250) , "AfFACHCIDL" char(250) , "AfFACHContUL" char(250) , "AfFACHSDL" char(250) , "AfFACHUDL" char(250) , "AfRACH208UL" char(250) , "AfRACHContDL" char(250) , "AfRTHSDPA" char(250) , "AfRTHSUPA" char(250) , "AfSRBOnHSDPA" char(250) , "AfSRBOnHSUPA" char(250) , "Af128NRTDCHDL" char(250) , "Af128NRTDCHUL" char(250) , "Af16NRTDCHDL" char(250) , "Af16NRTDCHUL" char(250) , "Af256NRTDCHDL" char(250) , "Af256NRTDCHUL" char(250) , "Af32NRTDCHDL" char(250) , "Af32NRTDCHUL" char(250) , "Af384NRTDCHDL" char(250) , "Af384NRTDCHUL" char(250) , "Af64NRTDCHDL" char(250) , "Af64NRTDCHUL" char(250) , "Af8NRTDCHDL" char(250) , "Af8NRTDCHUL" char(250) , "AfPCHContUL" char(250) , "AfPCHDL" char(250) , "Af128RTPSAMDL" char(250) , "Af128RTPSAMUL" char(250) , "Af128RTPSUMDL" char(250) , "Af128RTPSUMUL" char(250) , "Af16RTPSAMDL" char(250) , "Af16RTPSAMUL" char(250) , "Af16RTPSUMDL" char(250) , "Af16RTPSUMUL" char(250) , "Af256RTPSAMDL" char(250) , "Af256RTPSUMDL" char(250) , "Af32RTPSAMDL" char(250) , "Af32RTPSAMUL" char(250) , "Af32RTPSUMDL" char(250) , "Af32RTPSUMUL" char(250) , "Af64RTPSAMDL" char(250) , "Af64RTPSAMUL" char(250) , "Af64RTPSUMDL" char(250) , "Af64RTPSUMUL" char(250) , "Af8RTPSAMDL" char(250) , "Af8RTPSAMUL" char(250) , "Af8RTPSUMDL" char(250) , "Af8RTPSUMUL" char(250) , "DSCPBTSOMToBTS" char(250) , "DSCPBTSOMToOMS" char(250) , "DSCPForGTPSignalling" char(250) , "EchoRequestSending" char(250) , "HSDPAFlowControlLowThresholdDedicatedVCC" char(250) , "HSDPAFlowControlLowThresholdSharedVCC" char(250) , "HSDPAFlowControlTargetDelayDedicatedVCC" char(250) , "HSDPAFlowControlTargetDelaySharedVCC" char(250) , "IPStackErrorTimer" char(250) , "IuDATree" char(250) , "IubDATree" char(250) , "IurDATree" char(250) , "N3Requests" char(250) , "RNTRMChangeOrigin" char(250) , "RespSyncCounterIP" char(250) , "RespSyncModEnableIP" char(250) , "RespSyncTimerIP" char(250) , "T3Response" char(250) , "THP1DelaySensitivitySwitch" char(250) , "THP2DelaySensitivitySwitch" char(250) , "THP3DelaySensitivitySwitch" char(250) , "ToAWEOffsetForOverbook" char(250) , "ToAWSOffsetForOverbook" char(250) , "ULCACSwitch" char(250) , "UsedSRBALCSet" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.RSTP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "actRstp" char(250) , "bridgeForwardDelay" char(250) , "bridgeHelloTime" char(250) , "bridgeIdentifierPriority" char(250) , "bridgeMaxAge" char(250) , "forcedProtocolVersion" char(250) , "transmitHoldCount" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.SBR4( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "netmask" char(250) , "srcIPAddr" char(250) , "subnet" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.SMOD( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "climateControlProfiling" char(250) , "extAlList_cancelDelay_descr_id_inUse_polarity_severity_startDelay" text , "moduleLocation" char(250) , "prodCode" char(250) , "serNum" char(250) , "syncMaster" char(250) , "technology" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.SPTT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.SRT4( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "dstIPAddr" char(250) , "netmask" char(250) , "subnet" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.SRTT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.STPG( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "ssmSelExt2M" char(250) , "ssmSelPDH" char(250) , "ssmSelSyncE" char(250) , "ssmType" char(250) , "synchERegenOn" char(250) , "synchroSourceList_clockProtocol_interfaceNumber_priority_ssmAcceptanceLevel_ssmEnabled_ssmTimeout_unitNumber" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.STPORT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "disableStpParticipation" char(250) , "portNumber" char(250) , "portPathCost" char(250) , "portPriority" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.SUBMODULE( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "identificationCode" char(250) , "serialNumber" char(250) , "unitType" char(250) , "vendorName" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.SUBRACK( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "dateOfLastService" char(250) , "identificationCode" char(250) , "interchangeability" char(250) , "locationName" char(250) , "serialNumber" char(250) , "subrackType" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.SVTT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.SYNC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.TCTT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "interfaceNumber" char(250) , "unitNumber" char(250) , "administrativeState" char(250) , "connectivityPtr" char(250) , "operationalState" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.TMPAR( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "cacCommittedBitRate" char(250) , "dcnCommittedBitRate" char(250) , "externalNATIpAddress" char(250) , "farEndSctpSubnetIpAddress" char(250) , "farEndSctpSubnetMask" char(250) , "minSCTPPort" char(250) , "minUDPPort" char(250) , "signallingCommittedBitRate" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.TOPB( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.TOPF( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "acceptedClockQuality" char(250) , "actTopFreqSynch" char(250) , "announceRequestMode" char(250) , "ieeeTelecomProfile" char(250) , "logMeanSyncValue" char(250) , "topDomainNumber" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.TRDE( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "conformanceDefinition" char(250) , "minDesiredCellRate" char(250) , "peakCellRate" char(250) , "ubrShare" char(250) , "userLabel" char(250) , "egressCDVTolerancePCRCLP0plus1" char(250) , "egressPeakCellRateCLP0plus1" char(250) , "serviceCategory" char(250) , "ingressCDVTolerancePCRCLP0plus1" char(250) , "ingressPeakCellRateCLP0plus1" char(250) , "egressMDCR" char(250) , "egressUBRShare" char(250) , "ingressMDCR" char(250) , "ingressUBRShare" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.TWAMP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "administrativeState" char(250) , "destIpAddress" char(250) , "destPort" char(250) , "dscp" char(250) , "messageSize" char(250) , "plrAlarmThreshold" char(250) , "rttAlarmThreshold" char(250) , "sourceIpAddress" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.TWAMPR( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.UNI( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "underlyingTTPPtr" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.UNIT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "unitTypeActual" char(250) , "unitTypeExpected" char(250) , "identificationCode" char(250) , "interchangeability" char(250) , "numberOfSlotsOccupied" char(250) , "operationalState" char(250) , "position" char(250) , "serialNumber" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.VBTS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "ControllerIdPair_IHSPAadapterId_ServingRNCId" char(250) , "DediMeasRepPeriodCSdata" char(250) , "DediMeasRepPeriodPSdata" char(250) , "DedicatedMeasReportPeriod" char(250) , "HARQRVConfiguration" char(250) , "MeasFiltCoeff" char(250) , "NodeBRABReconfigSupport" char(250) , "VBTSChangeOrigin" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.VCCT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "VCI" char(250) , "VPI" char(250) , "interfaceNumber" char(250) , "trafficDescriptorId" char(250) , "unitNumber" char(250) , "administrativeState" char(250) , "egressFrameDiscardEnabled" char(250) , "ingressFrameDiscardEnabled" char(250) , "operationalState" char(250) , "segmentEndPoint" char(250) , "trafficDescriptorPtr" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.VCEL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "CSAMRModeSET" char(250) , "CSAMRModeSETWB" char(250) , "DirectSCCEnabled" char(250) , "EDCHMinimumSetETFCI" char(250) , "EbNoSetIdentifier" char(250) , "FastActOfTargetServCell" char(250) , "FastCompletionOfSCC" char(250) , "HHoMaxAllowedBitrateDL" char(250) , "HHoMaxAllowedBitrateUL" char(250) , "HSDPAFmcgIdentifier" char(250) , "HSDPAFmciIdentifier" char(250) , "HSDPAFmcsIdentifier" char(250) , "HSDPAHopsIdentifier" char(250) , "HSDPAenabled" char(250) , "HSPAFmcsIdentifier" char(250) , "HSPASCCSpecificATO" char(250) , "HSPwrOffsetUpdateDelay" char(250) , "HSUPAEnabled" char(250) , "InitialBitRateDL" char(250) , "InitialBitRateUL" char(250) , "LAC" char(250) , "MaxBitRateDLPSNRT" char(250) , "MaxBitRateULPSNRT" char(250) , "MaxTotalUplinkSymbolRate" char(250) , "MinAllowedBitRateDL" char(250) , "MinAllowedBitRateUL" char(250) , "NrtFmcgIdentifier" char(250) , "NrtFmciIdentifier" char(250) , "NrtFmcsIdentifier" char(250) , "NrtHopgIdentifier" char(250) , "NrtHopiIdentifier" char(250) , "NrtHopsIdentifier" char(250) , "PowerOffsetUpdMsgSize" char(250) , "PtxOffsetHSSCCH" char(250) , "RAC" char(250) , "RTWithHSDPAFmcgIdentifier" char(250) , "RTWithHSPAFmcsIdentifier" char(250) , "RTwithHSDPAFmciIdentifier" char(250) , "RTwithHSDPAFmcsIdentifier" char(250) , "RTwithHSDPAHopsIdentifier" char(250) , "RelocComm_in_InterRNC_HHO" char(250) , "RtFmcgIdentifier" char(250) , "RtFmciIdentifier" char(250) , "RtFmcsIdentifier" char(250) , "RtHopgIdentifier" char(250) , "RtHopiIdentifier" char(250) , "RtHopsIdentifier" char(250) , "RxDivIndicator" char(250) , "SRBDCHFmcsId" char(250) , "SRBHopsIdentifier" char(250) , "VCELChangeOrigin" char(250) , "WACSetIdentifier" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.VCTT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "VCI" char(250) , "VPI" char(250) , "aalProfilePtr" char(250) , "enableChannelUtlStatistics" char(250) , "interfaceNumber" char(250) , "unitNumber" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.VPCT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "VPI" char(250) , "interfaceNumber" char(250) , "trafficDescriptorId" char(250) , "unitNumber" char(250) , "administrativeState" char(250) , "operationalState" char(250) , "segmentEndPoint" char(250) , "trafficDescriptorPtr" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.VPTT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "VPI" char(250) , "interfaceNumber" char(250) , "unitNumber" char(250) , "connectivityPtr" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.WAC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "DCHUtilRelAveWin" char(250) , "DCHUtilRelThrDL" char(250) , "DCHUtilRelThrUL" char(250) , "DCHUtilRelTimeToTrigger" char(250) , "EDCHMACdFlowThroughputAveWin" char(250) , "EDCHMACdFlowThroughputRelThr" char(250) , "EDCHMACdFlowThroughputTimetoTrigger" char(250) , "HSDPAInitialBRULStrNRT" char(250) , "HSDPAMaxBitrateUL" char(250) , "HSDPAMinBRULStrNRT" char(250) , "HSDPAinitialBitrateUL" char(250) , "HSDPAminAllowedBitrateUL" char(250) , "InactCPCBatOptT" char(250) , "InactCPCNoBatOptT" char(250) , "InactNonCPCBatOptT" char(250) , "InactNonCPCNoBatOptT" char(250) , "InactivityTimerDownlinkDCH128" char(250) , "InactivityTimerDownlinkDCH16" char(250) , "InactivityTimerDownlinkDCH256" char(250) , "InactivityTimerDownlinkDCH32" char(250) , "InactivityTimerDownlinkDCH320" char(250) , "InactivityTimerDownlinkDCH384" char(250) , "InactivityTimerDownlinkDCH64" char(250) , "InactivityTimerDownlinkDCH8" char(250) , "InactivityTimerUplinkDCH128" char(250) , "InactivityTimerUplinkDCH16" char(250) , "InactivityTimerUplinkDCH256" char(250) , "InactivityTimerUplinkDCH32" char(250) , "InactivityTimerUplinkDCH320" char(250) , "InactivityTimerUplinkDCH384" char(250) , "InactivityTimerUplinkDCH64" char(250) , "InactivityTimerUplinkDCH8" char(250) , "MACdflowthroughputAveWin" char(250) , "MACdflowutilRelThr" char(250) , "MACdflowutilTimetoTrigger" char(250) , "MSActivitySupervision" char(250) , "PrxNoiseMaxTuneAbsolute" char(250) , "TrafVolPendingTimeDL" char(250) , "TrafVolPendingTimeUL" char(250) , "TrafVolThresholdULLow" char(250) , "UL_DL_activation_timer" char(250) , "WACChangeOrigin" char(250) , "WaitTimeRRCbackground" char(250) , "WaitTimeRRCconversational" char(250) , "WaitTimeRRCemergency" char(250) , "WaitTimeRRChighPrioritySignalling" char(250) , "WaitTimeRRCinterRATreselection" char(250) , "WaitTimeRRCinteractive" char(250) , "WaitTimeRRClowPrioritySignalling" char(250) , "WaitTimeRRCother" char(250) , "WaitTimeRRCregistration" char(250) , "WaitTimeRRCstreaming" char(250) , "WaitTimeRRCsubscribed" char(250) , "WaitTimeRRCunknown" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.WBTS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "ATMInterfaceID" char(250) , "BTSAdditionalInfo" char(250) , "BTSIPAddress" char(250) , "BTSSupportForHSPACM" char(250) , "BlindHOIntraBTSQCheck" char(250) , "COCOId" char(250) , "DCNLinkStatus" char(250) , "DCNSecurityStatus" char(250) , "DLORLAveragingWindowSize" char(250) , "DSCPHigh" char(250) , "DSCPLow" char(250) , "DSCPMedDCH" char(250) , "DSCPMedHSPA" char(250) , "DediMeasRepPeriodCSdata" char(250) , "DediMeasRepPeriodPSdata" char(250) , "DedicatedMeasReportPeriod" char(250) , "DelayThresholdMax" char(250) , "DelayThresholdMax2msTTI" char(250) , "DelayThresholdMid" char(250) , "DelayThresholdMid2msTTI" char(250) , "DelayThresholdMin" char(250) , "DelayThresholdMin2msTTI" char(250) , "HARQRVConfiguration" char(250) , "HSDPA14MbpsPerUser" char(250) , "HSDPACCEnabled" char(250) , "HSDPAULCToDSCP" char(250) , "HSUPACCEnabled" char(250) , "HSUPADLCToDSCP" char(250) , "HSUPAXUsersEnabled" char(250) , "IPBasedRouteIdIub" char(250) , "IPBasedRouteIdIub2" char(250) , "IPBasedRouteIdIub3" char(250) , "IPBasedRouteIdIub4" char(250) , "IPNBId" char(250) , "InactCACThresholdATM" char(250) , "InactCACThresholdIP" char(250) , "InactUsersCIDThreshold" char(250) , "IntelligentSDPrioHO" char(250) , "IubTransportMedia" char(250) , "IubTransportSharing" char(250) , "LoadControlPeriodPS" char(250) , "MaxFPDLFrameSizeIub" char(250) , "MaxNumberEDCHLCG" char(250) , "MeasFiltCoeff" char(250) , "MinUDPPortIub" char(250) , "NESWVersion" char(250) , "NEType" char(250) , "NbrOfOverbookedHSDPAUsers" char(250) , "NodeBRABReconfigSupport" char(250) , "OverbookingSwitch" char(250) , "PDUSize656WithHSDSCH" char(250) , "PSAveragingWindowSize" char(250) , "PSRLAveragingWindowSize" char(250) , "PWSMAVTrafficVERLogic" char(250) , "PWSMEnableWakeUpTime" char(250) , "PWSMInUse" char(250) , "PWSMRemCellSDBeginHour" char(250) , "PWSMRemCellSDBeginMin" char(250) , "PWSMRemCellSDEndHour" char(250) , "PWSMRemCellSDEndMin" char(250) , "PWSMShutdownBeginHour" char(250) , "PWSMShutdownBeginMin" char(250) , "PWSMShutdownEndHour" char(250) , "PWSMShutdownEndMin" char(250) , "PWSMWeekday" char(250) , "ProbabilityFactorMax" char(250) , "ProbabilityFactorMax2msTTI" char(250) , "PrxAlpha" char(250) , "PrxMeasAveWindow" char(250) , "PrxTargetPSAdjustPeriod" char(250) , "PtxAlpha" char(250) , "PtxDPCHmax" char(250) , "PtxDPCHmin" char(250) , "PtxMeasAveWindow" char(250) , "RACHloadIndicationPeriod" char(250) , "RFSharingState" char(250) , "RRIndPeriod" char(250) , "RRMULDCHActivityFactorCSAMR" char(250) , "RRMULDCHActivityFactorCSNTData" char(250) , "RRMULDCHActivityFactorCSTData" char(250) , "RRMULDCHActivityFactorPSBackgr" char(250) , "RRMULDCHActivityFactorPSStream" char(250) , "RRMULDCHActivityFactorPSTHP1" char(250) , "RRMULDCHActivityFactorPSTHP2" char(250) , "RRMULDCHActivityFactorPSTHP3" char(250) , "RRMULDCHActivityFactorSRB" char(250) , "ReleaseTimerForSharedHSDPAallocation" char(250) , "SchedulingPeriod" char(250) , "SharedHSDPAVCCSelectionMethod" char(250) , "SharedHSDPAallocation" char(250) , "TQMId" char(250) , "TQMId2" char(250) , "TQMId3" char(250) , "TQMId4" char(250) , "ToAWEOffsetNRTDCHIP" char(250) , "ToAWEOffsetRTDCHIP" char(250) , "ToAWSOffsetNRTDCHIP" char(250) , "ToAWSOffsetRTDCHIP" char(250) , "VCI" char(250) , "VPI" char(250) , "WBTSChangeOrigin" char(250) , "WBTSName" char(250) , "WBTSSWBuildId" char(250) , "WinACRABsetupDL" char(250) , "WinACRABsetupUL" char(250) , "WinLCHSDPA" char(250) , "WinLCHSUPA" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.WCEL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "WCELMCC" char(250) , "WCELMNC" char(250) , "name" char(250) , "ACBarredList" char(250) , "AICHTraTime" char(250) , "AMROverSC" char(250) , "AMROverTransmission" char(250) , "AMROverTxNC" char(250) , "AMROverTxNonHSPA" char(250) , "AMROverTxTotal" char(250) , "AMRSF" char(250) , "AMRTargetSC" char(250) , "AMRTargetTransmission" char(250) , "AMRTargetTxNC" char(250) , "AMRTargetTxNonHSPA" char(250) , "AMRTargetTxTotal" char(250) , "AMRUnderSC" char(250) , "AMRUnderTransmission" char(250) , "AMRUnderTxNC" char(250) , "AMRUnderTxNonHSPA" char(250) , "AMRUnderTxTotal" char(250) , "ATOSRBsOnHSPA" char(250) , "AbsPrioCellReselec" char(250) , "ActivationTimeOffset" char(250) , "AdminCellState" char(250) , "AdminPICState" char(250) , "AllowedPreambleSignatures" char(250) , "AllowedRACHSubChannels" char(250) , "AltScramblingCodeCM" char(250) , "AssignedPICPool" char(250) , "BlindHOEcNoThrTarget" char(250) , "BlindHORSCPThrTarget" char(250) , "CCHSetupEnabled" char(250) , "CIRForFDPCH" char(250) , "CId" char(250) , "CPCEnabled" char(250) , "CPICHEcNoSRBMapRRC" char(250) , "CPICHRSCPSRBMapRRC" char(250) , "CPICHtoRefRABoffset" char(250) , "CSAMRModeSET" char(250) , "CSAMRModeSETWB" char(250) , "CSGroupId" char(250) , "CUCEcNoThreshold" char(250) , "CUCRSCPThreshold" char(250) , "CableLoss" char(250) , "CellAdditionalInfo" char(250) , "CellBarred" char(250) , "CellRange" char(250) , "CellSelQualMeas" char(250) , "CellWeightForHSDPALayering" char(250) , "Cell_Reserved" char(250) , "CodeTreeOptTimer" char(250) , "CodeTreeOptimisation" char(250) , "CodeTreeOptimisationGuardTime" char(250) , "CodeTreeUsage" char(250) , "DCellAndMIMOUsage" char(250) , "DCellHSDPACapaHO" char(250) , "DCellHSDPAEnabled" char(250) , "DCellHSDPAFmcsId" char(250) , "DLLoadStateTTT" char(250) , "DPCHOverHSPDSCHThreshold" char(250) , "DPCModeChangeSupport" char(250) , "DRRCprxMargin" char(250) , "DRRCprxOffset" char(250) , "DRRCptxMargin" char(250) , "DRRCptxOffset" char(250) , "DefMeasCtrlReading" char(250) , "DeltaPrxMaxDown" char(250) , "DeltaPrxMaxUp" char(250) , "DeltaPtxMaxDown" char(250) , "DeltaPtxMaxUp" char(250) , "DirectSCCEnabled" char(250) , "DirectedRRCEnabled" char(250) , "DirectedRRCForHSDPALayerEnabled" char(250) , "EDCHCapability" char(250) , "EDCHMinSetETFCIT0" char(250) , "EDCHMinimumSetETFCI" char(250) , "EDCHOpState" char(250) , "EbNoSetIdentifier" char(250) , "FDPCHCodeChangeEnabled" char(250) , "FDPCHEnabled" char(250) , "FDPCHSetup" char(250) , "FachLoadMarginCCH" char(250) , "FachLoadThresholdCCH" char(250) , "FastActOfTargetServCell" char(250) , "FastCompletionOfSCC" char(250) , "FastHSPAMobilityEnabled" char(250) , "HCS_PRIO" char(250) , "HHoMaxAllowedBitrateDL" char(250) , "HHoMaxAllowedBitrateUL" char(250) , "HSCapabilityHONumbUE" char(250) , "HSCapabilityHOPeriod" char(250) , "HSDPA64QAMallowed" char(250) , "HSDPA64UsersEnabled" char(250) , "HSDPACPICHAveWindow" char(250) , "HSDPACPICHReportPeriod" char(250) , "HSDPACellChangeMinInterval" char(250) , "HSDPAFmcgIdentifier" char(250) , "HSDPAFmciIdentifier" char(250) , "HSDPAFmcsIdentifier" char(250) , "HSDPALayeringCommonChEnabled" char(250) , "HSDPAMaxCellChangeRepetition" char(250) , "HSDPASRBWindow" char(250) , "HSDPAServCellWindow" char(250) , "HSDPAcapability" char(250) , "HSDPAenabled" char(250) , "HSDSCHOpState" char(250) , "HSLoadStateHSDBRLimit" char(250) , "HSLoadStateHSDOffset" char(250) , "HSLoadStateHSUBRLimit" char(250) , "HSLoadStateHSUOffset" char(250) , "HSLoadStateHSUResThr" char(250) , "HSPA72UsersPerCell" char(250) , "HSPACapaHO" char(250) , "HSPAFmcsIdentifier" char(250) , "HSPAQoSEnabled" char(250) , "HSPASCCSpecificATO" char(250) , "HSPDSCHCodeSet" char(250) , "HSPDSCHMarginSF128" char(250) , "HSPwrOffsetUpdateDelay" char(250) , "HSUPA2MSTTIEnabled" char(250) , "HSUPAEnabled" char(250) , "HspaMultiNrtRabSupport" char(250) , "IncomingLTEISHO" char(250) , "InitialBitRateDL" char(250) , "InitialBitRateUL" char(250) , "InterFreqScaleTresel" char(250) , "InterRATScaleTresel" char(250) , "IntraFreq_Cell_Reselect_Ind" char(250) , "LAC" char(250) , "LHOCapaReqRejRateDL" char(250) , "LHOCapaReqRejRateUL" char(250) , "LHODelayOFFCapaReqRejRate" char(250) , "LHODelayOFFHardBlocking" char(250) , "LHODelayOFFInterference" char(250) , "LHODelayOFFResRateSC" char(250) , "LHOHardBlockingBaseLoad" char(250) , "LHOHardBlockingRatio" char(250) , "LHOHystTimeCapaReqRejRate" char(250) , "LHOHystTimeHardBlocking" char(250) , "LHOHystTimeInterference" char(250) , "LHOHystTimeResRateSC" char(250) , "LHONRTTrafficBaseLoad" char(250) , "LHONumbUEInterFreq" char(250) , "LHONumbUEInterRAT" char(250) , "LHOPwrOffsetDL" char(250) , "LHOPwrOffsetUL" char(250) , "LHOResRateSC" char(250) , "LHOWinSizeOFFCapaReqRejRate" char(250) , "LHOWinSizeOFFHardBlocking" char(250) , "LHOWinSizeOFFInterference" char(250) , "LHOWinSizeOFFResRateSC" char(250) , "LHOWinSizeONCapaReqRejRate" char(250) , "LHOWinSizeONHardBlocking" char(250) , "LHOWinSizeONInterference" char(250) , "LHOWinSizeONResRateSC" char(250) , "LTECellReselection" char(250) , "LoadBasedCPICHEcNoSRBHSPA" char(250) , "LoadBasedCPICHEcNoThreEDCH2MS" char(250) , "MBLBInactivityEnabled" char(250) , "MBLBLoadInfoDistr" char(250) , "MBLBMobilityEnabled" char(250) , "MBLBRABSetupEnabled" char(250) , "MBLBRABSetupMultiRAB" char(250) , "MBLBStateTransEnabled" char(250) , "MEHHSDPAUserNbrCQI" char(250) , "MEHHSUPAUserNbr2msTTI" char(250) , "MEHLoadStateTtT" char(250) , "MEHMaxHSUPAUsers" char(250) , "MEHQueueThreshold" char(250) , "MEHULLHSDPAUALimit" char(250) , "MHA" char(250) , "MIMOEnabled" char(250) , "MIMOHSDPACapaHO" char(250) , "MIMOWith64QAMUsage" char(250) , "MassEventHandler" char(250) , "MaxBitRateDLPSNRT" char(250) , "MaxBitRateULPSNRT" char(250) , "MaxCodeReleases" char(250) , "MaxDLPowerCapability" char(250) , "MaxIncrInterferenceUL" char(250) , "MaxNbrOfHSSCCHCodes" char(250) , "MaxNumbHSDPAUsersS" char(250) , "MaxNumbHSDSCHMACdFS" char(250) , "MaxNumberEDCHCell" char(250) , "MaxNumberHSDPAUsers" char(250) , "MaxNumberHSDSCHMACdFlows" char(250) , "MaxNumberUECmHO" char(250) , "MaxNumberUECmSLHO" char(250) , "MaxNumberUEHSPACmHO" char(250) , "MaxNumberUEHSPACmNCHO" char(250) , "MaxTotalUplinkSymbolRate" char(250) , "MinAllowedBitRateDL" char(250) , "MinAllowedBitRateUL" char(250) , "MultiplePLMNListIncluded" char(250) , "N300" char(250) , "N312" char(250) , "N312Conn" char(250) , "N313" char(250) , "N315" char(250) , "NASsignVolThrDL" char(250) , "NASsignVolThrUL" char(250) , "NCr" char(250) , "NbrOfSCCPCHs" char(250) , "NonHCSNcr" char(250) , "NonHCSTcrMax" char(250) , "NonHCSTcrMaxHyst" char(250) , "NrtFmcgIdentifier" char(250) , "NrtFmciIdentifier" char(250) , "NrtFmcsIdentifier" char(250) , "NumberEDCHReservedSHOBranchAdditions" char(250) , "OCULNRTDCHGrantedMinAllocT" char(250) , "OCdlNrtDCHgrantedMinAllocT" char(250) , "PBSgrantedMinDCHallocTequalP" char(250) , "PBSgrantedMinDCHallocThigherP" char(250) , "PBSgrantedMinDCHallocTlowerP" char(250) , "PCH24kbpsEnabled" char(250) , "PFLIdentifier" char(250) , "PICState" char(250) , "PI_amount" char(250) , "PRACHDelayRange" char(250) , "PRACHRequiredReceivedCI" char(250) , "PRACHScramblingCode" char(250) , "PRACH_preamble_retrans" char(250) , "PSGroupId" char(250) , "PTxPICH" char(250) , "PWSMAVLimitDCHSDPA" char(250) , "PWSMAVLimitNRTHSDPA" char(250) , "PWSMAVLimitRTDCH" char(250) , "PWSMAVLimitRTHSDPA" char(250) , "PWSMAVPwrNRTHSDPA" char(250) , "PWSMAVPwrRTHSDPA" char(250) , "PWSMCellGroup" char(250) , "PWSMEXPwrLimit" char(250) , "PWSMEXUsrLimit" char(250) , "PWSMSDLimitDCHSDPA" char(250) , "PWSMSDLimitNRTDCH" char(250) , "PWSMSDLimitNRTHSDPA" char(250) , "PWSMSDLimitRTDCH" char(250) , "PWSMSDLimitRTHSDPA" char(250) , "PWSMSDPwrNRTHSDPA" char(250) , "PWSMSDPwrRTDCH" char(250) , "PWSMSDPwrRTHSDPA" char(250) , "PWSMShutdownOrder" char(250) , "PWSMShutdownRemCell" char(250) , "PowerOffsetLastPreamblePRACHmessage" char(250) , "PO1_15" char(250) , "PO1_30" char(250) , "PO1_60" char(250) , "PowerOffsetUpdMsgSize" char(250) , "PowerRampStepPRACHpreamble" char(250) , "PowerSaveHSPAType" char(250) , "PriScrCode" char(250) , "PrxLoadMarginDCH" char(250) , "PrxLoadMarginEDCH" char(250) , "PrxLoadMarginMaxDCH" char(250) , "PrxMaxOrigTargetBTS" char(250) , "PrxMaxTargetBTS" char(250) , "PrxMeasFilterCoeff" char(250) , "PrxNoise" char(250) , "PrxNoiseAutotuning" char(250) , "PrxOffset" char(250) , "PrxTarget" char(250) , "PrxTargetMax" char(250) , "PrxTargetPSMax" char(250) , "PrxTargetPSMin" char(250) , "PrxTargetPSStepDown" char(250) , "PrxTargetPSStepUp" char(250) , "PtxAICH" char(250) , "PtxCellMax" char(250) , "PtxDLabsMax" char(250) , "PtxFDPCHMax" char(250) , "PtxFDPCHMin" char(250) , "PtxHighHSDPAPwr" char(250) , "PtxMarginCCH" char(250) , "PtxMaxEHICH" char(250) , "PtxMaxHSDPA" char(250) , "PtxMeasFilterCoeff" char(250) , "PtxOffset" char(250) , "PtxOffsetEAGCH" char(250) , "PtxOffsetEAGCHDPCCH" char(250) , "PtxOffsetEHICHDPCCH" char(250) , "PtxOffsetERGCH" char(250) , "PtxOffsetERGCHDPCCH" char(250) , "PtxOffsetExxCH2ms" char(250) , "PtxOffsetExxCHSHO" char(250) , "PtxOffsetFDPCHSHO" char(250) , "PtxOffsetHSDPA" char(250) , "PtxPSstreamAbsMax" char(250) , "PtxPrimaryCCPCH" char(250) , "PtxPrimaryCPICH" char(250) , "PtxPrimarySCH" char(250) , "PtxSCCPCH1" char(250) , "PtxSCCPCH2" char(250) , "PtxSCCPCH2SF128" char(250) , "PtxSCCPCH3" char(250) , "PtxSecSCH" char(250) , "PtxTarget" char(250) , "PtxTargetHSDPA" char(250) , "PtxTargetPSAdjustPeriod" char(250) , "PtxTargetPSMax" char(250) , "PtxTargetPSMin" char(250) , "PtxTargetPSStepDown" char(250) , "PtxTargetPSStepUp" char(250) , "PtxTargetTotMax" char(250) , "PtxTargetTotMin" char(250) , "PtxThresholdCCH" char(250) , "QHCS" char(250) , "Qhyst1" char(250) , "Qhyst1FACH" char(250) , "Qhyst1PCH" char(250) , "Qhyst2" char(250) , "Qhyst2FACH" char(250) , "Qhyst2PCH" char(250) , "QqualMin" char(250) , "QrxlevMin" char(250) , "RAC" char(250) , "RACHCapacity" char(250) , "RACHInterFreqMesQuant" char(250) , "RACHIntraFreqMesQuant" char(250) , "RACH_Tx_NB01max" char(250) , "RACH_Tx_NB01min" char(250) , "RACH_tx_Max" char(250) , "RACHmeasFilterCoeff" char(250) , "RNARGroupId" char(250) , "RRCconnRepTimer1" char(250) , "RRCconnRepTimer2" char(250) , "RTWithHSDPAFmcgIdentifier" char(250) , "RTWithHSDPAFmciIdentifier" char(250) , "RTWithHSDPAFmcsIdentifier" char(250) , "RTWithHSPAFmcsIdentifier" char(250) , "RachLoadMarginCCH" char(250) , "RachLoadThresholdCCH" char(250) , "RefServForCodePower" char(250) , "RelocComm_in_InterRNC_HHO" char(250) , "RsrvdSignaturesOffset" char(250) , "RtFmcgIdentifier" char(250) , "RtFmciIdentifier" char(250) , "RtFmcsIdentifier" char(250) , "RxDivIndicator" char(250) , "SAC" char(250) , "SHCS_RAT" char(250) , "SHCS_RATConn" char(250) , "SIB11Length" char(250) , "SIB11bisLength" char(250) , "SIB12Length" char(250) , "SIB4Indicator" char(250) , "SIB7factor" char(250) , "SIRDPCCHOffsetEDPCH" char(250) , "SRBBitRateRRCSetupEC" char(250) , "SRBDCHFmcsId" char(250) , "SRBHSPAFmcsId" char(250) , "SRBMapRRCSetupEC" char(250) , "SectorID" char(250) , "ServHONumbUEInterFreq" char(250) , "ServHONumbUEInterRAT" char(250) , "ServHOPeriodInterFreq" char(250) , "ServHOPeriodInterRAT" char(250) , "ShutdownStepAmount" char(250) , "ShutdownWindow" char(250) , "Sintersearch" char(250) , "SintersearchConn" char(250) , "Sintrasearch" char(250) , "SintrasearchConn" char(250) , "Slimit_SearchRAT" char(250) , "Slimit_SearchRATConn" char(250) , "SmartLTELayeringEnabled" char(250) , "SmartLTELayeringRSCP" char(250) , "SmartLTELayeringTSysSel" char(250) , "SmartLTELayeringUA" char(250) , "SmartTrafVolThrDL" char(250) , "SmartTrafVolThrUL" char(250) , "SpeedScaleTresel" char(250) , "Sprioritysearch1" char(250) , "Sprioritysearch2" char(250) , "SsearchHCS" char(250) , "SsearchHCSConn" char(250) , "Ssearch_RAT" char(250) , "Ssearch_RATConn" char(250) , "T300" char(250) , "T312" char(250) , "T312Conn" char(250) , "T313" char(250) , "T315" char(250) , "TBarred" char(250) , "TCrmax" char(250) , "TCrmaxHyst" char(250) , "TPCCommandERTarget" char(250) , "TargetNSEDCHToTotalEDCHPR" char(250) , "Tcell" char(250) , "Threshservlow" char(250) , "Threshservlow2" char(250) , "ToAWE_CCH" char(250) , "ToAWS_CCH" char(250) , "TrafVolThresholdDLLow" char(250) , "Treselection" char(250) , "TreselectionFACH" char(250) , "TreselectionPCH" char(250) , "UARFCN" char(250) , "UEtxPowerMaxDPCH" char(250) , "UEtxPowerMaxPRACH" char(250) , "UEtxPowerMaxPRACHConn" char(250) , "ULLoadStateHSUBRLimit" char(250) , "ULLoadStateHSUOffset" char(250) , "URAId" char(250) , "UTRAN_DRX_length" char(250) , "UseOfHCS" char(250) , "UsersPerHSSCCHCode" char(250) , "VCPMaxHSDPAUsers" char(250) , "VCPPtxOffset" char(250) , "VoiceCallPriority" char(250) , "VoiceOverrideSTHSUPA" char(250) , "WACSetIdentifier" char(250) , "WCELChangeOrigin" char(250) , "WCelState" char(250) );
CREATE TABLE IF NOT EXISTS nok_cm_3g.WRAB( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "DeltaSIRAfterDownlink" char(250) , "DeltaSIRAfterUplink" char(250) , "DeltaSIRDownlink" char(250) , "DeltaSIRUplink" char(250) , "DownlinkOrthog" char(250) , "EDCHBLERAdjCSVoice10" char(250) , "EDCHBLERAdjCSVoice2" char(250) , "EbNoDCHOfPSNRTPriQua" char(250) , "EbNoDCHOfPSNRTPrim" char(250) , "EbNoDCHOfPSNRTSec" char(250) , "EbNoDCHOfPSNRTSecQua" char(250) , "EbNoDCHOfPSNRTSelQuaDL" char(250) , "EbNoDCHOfPSNRTSelQuaUL" char(250) , "EbNoDCHOfPSStrPriQua" char(250) , "EbNoDCHOfPSStrPrim" char(250) , "EbNoDCHOfPSStrSec" char(250) , "EbNoDCHOfPSStrSecQua" char(250) , "EbNoDCHOfPSStrSelQuaDL" char(250) , "EbNoDCHOfPSStrSelQuaUL" char(250) , "EbNoDCHOfSRB136" char(250) , "EbNoDCHOfSRB136Qua" char(250) , "EbNoDCHOfSRB34" char(250) , "EbNoDCHOfSRB34Qua" char(250) , "EbNoDCHRateGainCSAMR" char(250) , "EbNoDCHRateGainCSData" char(250) , "EbNoDCHRateGainPSData" char(250) , "EbNoDCHRateGainSFDown" char(250) , "EbNoDCHRateGainSFUp" char(250) , "EbNoDCHRateGainSRB" char(250) , "EbNoDCHRxDiv2" char(250) , "EbNoDCHRxDiv4" char(250) , "EbNoDCHTxDiv" char(250) , "EbNoEDCHCSAMR" char(250) , "EDCHPSStr128Kbps" char(250) , "EDCHPSStr16Kbps" char(250) , "EDCHPSStr248Kbps" char(250) , "EDCHPSStr32Kbps" char(250) , "EDCHPSStr64Kbps" char(250) , "EDCHPSStr8Kbps" char(250) , "EDCHPSStrOver248Kbps" char(250) , "EbNoDCHOfCSDataNT" char(250) , "EbNoDCHOfCSDataNTQua" char(250) , "EbNoDCHOfCSDataT" char(250) , "EbNoDCHOfCSDataTQua" char(250) , "EbNoDCHOfCSNBAMR122" char(250) , "EbNoDCHOfCSNBAMR59" char(250) , "EbNoDCHOfCSNBAMRQua" char(250) , "EbNoDCHOfCSNBAMRb" char(250) , "EbNoDCHOfCSNBAMRc" char(250) , "EbNoDCHOfCSWBAMR1265" char(250) , "EbNoDCHOfCSWBAMRQua" char(250) , "EbNoDCHOfCSWBAMRb" char(250) , "L1BLERTEDCHVoice10" char(250) , "L1BLERTEDCHVoice2" char(250) , "SIRDPCCHInitialDCH128" char(250) , "SIRDPCCHInitialDCH16" char(250) , "SIRDPCCHInitialDCH256" char(250) , "SIRDPCCHInitialDCH32" char(250) , "SIRDPCCHInitialDCH4" char(250) , "SIRDPCCHInitialDCH64" char(250) , "SIRDPCCHInitialDCH8" char(250) , "SIRDPCCHInitialDCHHS128" char(250) , "SIRDPCCHInitialDCHHS16" char(250) , "SIRDPCCHInitialDCHHS256" char(250) , "SIRDPCCHInitialDCHHS32" char(250) , "SIRDPCCHInitialDCHHS4" char(250) , "SIRDPCCHInitialDCHHS64" char(250) , "SIRDPCCHInitialDCHHS8" char(250) , "SIRDPCCHInitialDCHMax" char(250) , "SIRDPCCHInitialDCHMin" char(250) , "SIRDPCCHInitialDCHOffset" char(250) , "SIRDPCCHInitialDCHRxDiv2" char(250) , "SIRDPCCHInitialDCHRxDiv4" char(250) , "WRABChangeOrigin" char(250) );
