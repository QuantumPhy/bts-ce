-- psql -U bodastage -d bodastage -a -f nok_cm_2g.sql
-- \i nok_cm_2g_tables.sql

CREATE TABLE IF NOT EXISTS nok_cm_2g.ADCE( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "frequencyBandInUse" char(250) , "gprsMsTxPwrMaxCCH1x00" char(250) , "msTxPwrMaxGSM1x00" char(250) , "address" char(250) , "name" char(250) , "targetCellDN" char(250) , "adjCellBsicBcc" char(250) , "adjCellBsicNcc" char(250) , "adjacentCellIdCI" char(250) , "adjacentCellIdLac" char(250) , "adjacentCellIdMCC" char(250) , "adjacentCellIdMNC" char(250) , "adjcIndex" char(250) , "amrDadlbTargetCell" char(250) , "bcchFrequency" char(250) , "chainedAdjacentCell" char(250) , "dadlbTargetCell" char(250) , "drThreshold" char(250) , "enableDerivedHandoverPower" char(250) , "enableHoMarginLevQual" char(250) , "gprsEnabled" char(250) , "gprsMsTxpwrMaxCCH" char(250) , "gprsPenaltyTime" char(250) , "gprsRxlevAccessMin" char(250) , "gprsTemporaryOffset" char(250) , "hcsPriorityClass" char(250) , "hcsThreshold" char(250) , "hoLevelUmbrella" char(250) , "hoLoadFactor" char(250) , "hoMarginDelayTime" char(250) , "hoMarginLev" char(250) , "hoMarginPbgt" char(250) , "hoMarginQual" char(250) , "hoPriorityLevel" char(250) , "hoTargetArea" char(250) , "msTxPwrMaxGSM" char(250) , "neighbourCellRanking" char(250) , "rac" char(250) , "rxLevMinCell" char(250) , "synchronized" char(250) , "trhoTargetLevel" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.ADCE( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "frequencyBandInUse" char(250) , "gprsMsTxPwrMaxCCH1x00" char(250) , "msTxPwrMaxGSM1x00" char(250) , "address" char(250) , "name" char(250) , "targetCellDN" char(250) , "adjCellBsicBcc" char(250) , "adjCellBsicNcc" char(250) , "adjacentCellIdCI" char(250) , "adjacentCellIdLac" char(250) , "adjacentCellIdMCC" char(250) , "adjacentCellIdMNC" char(250) , "adjcIndex" char(250) , "amrDadlbTargetCell" char(250) , "bcchFrequency" char(250) , "chainedAdjacentCell" char(250) , "dadlbTargetCell" char(250) , "drThreshold" char(250) , "enableDerivedHandoverPower" char(250) , "enableHoMarginLevQual" char(250) , "gprsEnabled" char(250) , "gprsMsTxpwrMaxCCH" char(250) , "gprsPenaltyTime" char(250) , "gprsRxlevAccessMin" char(250) , "gprsTemporaryOffset" char(250) , "hcsPriorityClass" char(250) , "hcsThreshold" char(250) , "hoLevelUmbrella" char(250) , "hoLoadFactor" char(250) , "hoMarginDelayTime" char(250) , "hoMarginLev" char(250) , "hoMarginPbgt" char(250) , "hoMarginQual" char(250) , "hoPriorityLevel" char(250) , "hoTargetArea" char(250) , "msTxPwrMaxGSM" char(250) , "neighbourCellRanking" char(250) , "rac" char(250) , "rxLevMinCell" char(250) , "synchronized" char(250) , "trhoTargetLevel" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.ADJL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "barredLteAdjCellGroup" char(250) , "barredLteAdjCellList" char(250) , "barredLteAdjCellPattern" char(250) , "barredLteAdjCellPatternSense" char(250) , "earfcn" char(250) , "lteAdjCellMcc" char(250) , "lteAdjCellMinBand" char(250) , "lteAdjCellMinRxLevel" char(250) , "lteAdjCellMnc" char(250) , "lteAdjCellPriority" char(250) , "lteAdjCellReselectLowerThr" char(250) , "lteAdjCellReselectUpperThr" char(250) , "lteAdjCellTac" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.ADJL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "barredLteAdjCellGroup" char(250) , "barredLteAdjCellList" char(250) , "barredLteAdjCellPattern" char(250) , "barredLteAdjCellPatternSense" char(250) , "earfcn" char(250) , "lteAdjCellMcc" char(250) , "lteAdjCellMinBand" char(250) , "lteAdjCellMinRxLevel" char(250) , "lteAdjCellMnc" char(250) , "lteAdjCellPriority" char(250) , "lteAdjCellReselectLowerThr" char(250) , "lteAdjCellReselectUpperThr" char(250) , "lteAdjCellTac" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.ADJW( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "name" char(250) , "targetCellDN" char(250) , "AdjwCId" char(250) , "intSystemDaEcioThr" char(250) , "lac" char(250) , "mcc" char(250) , "minEcnoThreshold" char(250) , "mnc" char(250) , "rncId" char(250) , "sac" char(250) , "scramblingCode" char(250) , "txDiversityInd" char(250) , "uarfcn" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.ADJW( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "name" char(250) , "targetCellDN" char(250) , "AdjwCId" char(250) , "intSystemDaEcioThr" char(250) , "lac" char(250) , "mcc" char(250) , "minEcnoThreshold" char(250) , "mnc" char(250) , "rncId" char(250) , "sac" char(250) , "scramblingCode" char(250) , "txDiversityInd" char(250) , "uarfcn" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.BCF( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "latitude" char(250) , "longitude" char(250) , "name" char(250) , "adminState" char(250) , "autoUnlAllowed" char(250) , "batteryBackupProcedure" char(250) , "bcchTrxBatbuTimer" char(250) , "bcfOutputInUse" char(250) , "bcfType" char(250) , "clockSource" char(250) , "externalAlarmDefinition_inputId_inputTextId_polarity_reportingR" char(250) , "lapdLinkName" char(250) , "lapdLinkNumber" char(250) , "masterClockBcf" char(250) , "normTrxBatbuTimer" char(250) , "rxDifferenceLimit" char(250) , "syncMode" char(250) , "synchEnabled" char(250) , "synchStatus" char(250) , "outputDefinition_textId" char(250) , "notificationOrigin" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.BCF( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "latitude" char(250) , "longitude" char(250) , "name" char(250) , "adminState" char(250) , "autoUnlAllowed" char(250) , "batteryBackupProcedure" char(250) , "bcchTrxBatbuTimer" char(250) , "bcfOutputInUse" char(250) , "bcfType" char(250) , "clockSource" char(250) , "externalAlarmDefinition_inputId_inputTextId_polarity_reportingR" char(250) , "lapdLinkName" char(250) , "lapdLinkNumber" char(250) , "masterClockBcf" char(250) , "normTrxBatbuTimer" char(250) , "rxDifferenceLimit" char(250) , "syncMode" char(250) , "synchEnabled" char(250) , "synchStatus" char(250) , "outputDefinition_textId" char(250) , "notificationOrigin" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.BSC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "bscOptions" text , "dcsMacrocellThreshold" char(250) , "dcsMicrocellThreshold" char(250) , "address" char(250) , "name" char(250) , "neSwRelease" char(250) , "adjCellFreqsInMeasBAInfo" char(250) , "alrmChFail" char(250) , "alrmNoOfSei" char(250) , "alrmSchFail" char(250) , "alrmSdcch" char(250) , "alrmSeizReq" char(250) , "alrmTch" char(250) , "amhLowerLoadThreshold" char(250) , "amhMaxLoadOfTgtCell" char(250) , "amhTrhoGuardTime" char(250) , "amhUpperLoadThreshold" char(250) , "amrConfInHandovers" char(250) , "amrSetGradesEnabl" char(250) , "ansiEnvironment" char(250) , "batteryBackupTimer" char(250) , "bcsuLoadThr" char(250) , "bscType" char(250) , "btsLoadDepTchRateLower" char(250) , "btsLoadDepTchRateUpper" char(250) , "callReleaseLimit" char(250) , "delayHoPcEmergencyCalls" char(250) , "dfcaAmrFrConnection_softBlockingCn" char(250) , "dfcaAmrHrConnection_softBlockingCn" char(250) , "dfcaFrConnection_softBlockingCn" char(250) , "disableExtDr" char(250) , "disableIntHo" char(250) , "dtmFragmentationPenalty" char(250) , "emerCallOnFacch" char(250) , "extraTrxBcsuNumber" char(250) , "extraTrxMaxTrxInBcsu" char(250) , "fepInPcHoUse" char(250) , "frTchALim" char(250) , "freeTSLsCsDowngrade" char(250) , "freeTSLsCsUpgrade" char(250) , "freqInMeasBAInfo" char(250) , "gprsTerritoryCalc" char(250) , "gsmMacrocellThreshold" char(250) , "gsmMicrocellThreshold" char(250) , "hoPrefOrderInterfDl" char(250) , "hoPrefOrderInterfUl" char(250) , "hrTchALim" char(250) , "inactCriteria" char(250) , "inactEventsPerHour" char(250) , "incomeRateThreshold" char(250) , "initAmrChannelRate" char(250) , "internalHoToExternal" char(250) , "intraSegSdcchHoGuard" char(250) , "ishoPreferredForNonDtmMs" char(250) , "lapdLoadThr" char(250) , "loadRateChSearch" char(250) , "maxBcfCapacity" char(250) , "maxBtsCapacity" char(250) , "maxHldSdcch" char(250) , "maxHldTch" char(250) , "maxOnHiIf" char(250) , "maxTchTransactionRate" char(250) , "maxTrxCapacityHw" char(250) , "maxTrxCapacityReal" char(250) , "meanBepLimitUL_Prof0_2tsl" char(250) , "meanBepLimitUL_Prof0_3tsl" char(250) , "meanBepLimitUL_Prof0_4tsl" char(250) , "meanBepLimitUL_Prof1_2tsl" char(250) , "meanBepLimitUL_Prof1_3tsl" char(250) , "meanBepLimitUL_Prof1_4tsl" char(250) , "meanBepLimitUL_Prof2_3tsl" char(250) , "meanBepLimitUL_Prof2_4tsl" char(250) , "measPrdCh" char(250) , "measPrdFail" char(250) , "measPrdSdcch" char(250) , "measTchMhold" char(250) , "minHiIf" char(250) , "minHldTch" char(250) , "msDistanceBehaviour" char(250) , "msSpeedC11" char(250) , "msSpeedC12" char(250) , "noOfPrefCells" char(250) , "nokBtsOffHour" char(250) , "nokBtsOffMinute" char(250) , "nokBtsOnHour" char(250) , "nokBtsOnMinute" char(250) , "ordinaryCallOnFacch" char(250) , "pagingAnsOnFacch" char(250) , "pcuMaxNoDLtbfInCH" char(250) , "pcuMaxNoULtbfInCH" char(250) , "pfcAckBlerLimit_legacyStream" char(250) , "pfcAckBlerLimit_limit10004000ms" char(250) , "pfcAckBlerLimit_limit10150ms" char(250) , "pfcAckBlerLimit_limit200950ms" char(250) , "pfcAckBlerLimit_notAvailable" char(250) , "pfcUnackBlerLimit_legacyStream" char(250) , "pfcUnackBlerLimit_limit110e1" char(250) , "pfcUnackBlerLimit_limit110e2" char(250) , "pfcUnackBlerLimit_limit110e3" char(250) , "pfcUnackBlerLimit_limit710e3" char(250) , "pfcUnackBlerLimit_notAvailable" char(250) , "prdHighIf" char(250) , "prdNokBts" char(250) , "qcActionTriggerThr_drop" char(250) , "qcActionTriggerThr_nccr" char(250) , "qcActionTriggerThr_qosRenego" char(250) , "qcActionTriggerThr_realloca" char(250) , "reestablishOnFacch" char(250) , "rnwConfId" char(250) , "rnwFallbackConfId" char(250) , "rnwPlanConfId" char(250) , "rnwPlanDatabaseState" char(250) , "rtsl0PrefInTCHAlloc" char(250) , "rxAntSupPer" char(250) , "rxLevBalance" char(250) , "rxLevelBasedTchAccess" char(250) , "rxqualLimitUL_Prof0_2tsl" char(250) , "rxqualLimitUL_Prof0_3tsl" char(250) , "rxqualLimitUL_Prof0_4tsl" char(250) , "rxqualLimitUL_Prof1_2tsl" char(250) , "rxqualLimitUL_Prof1_3tsl" char(250) , "rxqualLimitUL_Prof1_4tsl" char(250) , "rxqualLimitUL_Prof2_3tsl" char(250) , "rxqualLimitUL_Prof2_4tsl" char(250) , "sacchRepeatWindow" char(250) , "saicDlCIOffset" char(250) , "schedStepSizeDlHighPrior" char(250) , "schedStepSizeDlLowPrior" char(250) , "schedStepSizeDlNormPrior" char(250) , "schedStepSizeUlPrior1" char(250) , "schedStepSizeUlPrior2" char(250) , "schedStepSizeUlPrior3" char(250) , "schedStepSizeUlPrior4" char(250) , "schedulingWeight_backgroundARP1" char(250) , "schedulingWeight_backgroundARP2" char(250) , "schedulingWeight_backgroundARP3" char(250) , "schedulingWeight_interactive1ARP1" char(250) , "schedulingWeight_interactive1ARP2" char(250) , "schedulingWeight_interactive1ARP3" char(250) , "schedulingWeight_interactive2ARP1" char(250) , "schedulingWeight_interactive2ARP2" char(250) , "schedulingWeight_interactive2ARP3" char(250) , "schedulingWeight_interactive3ARP1" char(250) , "schedulingWeight_interactive3ARP2" char(250) , "schedulingWeight_interactive3ARP3" char(250) , "schedulingWeight_streamingARP1" char(250) , "schedulingWeight_streamingARP2" char(250) , "schedulingWeight_streamingARP3" char(250) , "sdcchAlLimit" char(250) , "signallingPointCodeIN0" char(250) , "signallingPointCodeIN1" char(250) , "signallingPointCodeNA0" char(250) , "signallingPointCodeNA1" char(250) , "slowAmrLaEnabled" char(250) , "supervisionPeriod" char(250) , "tchRateInternalHo" char(250) , "tchTransactionCount" char(250) , "terrUpdGuardTGprs" char(250) , "triggerMeasPeriod" char(250) , "variableDlStepSize" char(250) , "wcdmaRanSaiPenalty" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.BSC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "bscOptions" text , "dcsMacrocellThreshold" char(250) , "dcsMicrocellThreshold" char(250) , "address" char(250) , "name" char(250) , "neSwRelease" char(250) , "adjCellFreqsInMeasBAInfo" char(250) , "alrmChFail" char(250) , "alrmNoOfSei" char(250) , "alrmSchFail" char(250) , "alrmSdcch" char(250) , "alrmSeizReq" char(250) , "alrmTch" char(250) , "amhLowerLoadThreshold" char(250) , "amhMaxLoadOfTgtCell" char(250) , "amhTrhoGuardTime" char(250) , "amhUpperLoadThreshold" char(250) , "amrConfInHandovers" char(250) , "amrSetGradesEnabl" char(250) , "ansiEnvironment" char(250) , "batteryBackupTimer" char(250) , "bcsuLoadThr" char(250) , "bscType" char(250) , "btsLoadDepTchRateLower" char(250) , "btsLoadDepTchRateUpper" char(250) , "callReleaseLimit" char(250) , "delayHoPcEmergencyCalls" char(250) , "dfcaAmrFrConnection_softBlockingCn" char(250) , "dfcaAmrHrConnection_softBlockingCn" char(250) , "dfcaFrConnection_softBlockingCn" char(250) , "disableExtDr" char(250) , "disableIntHo" char(250) , "dtmFragmentationPenalty" char(250) , "emerCallOnFacch" char(250) , "extraTrxBcsuNumber" char(250) , "extraTrxMaxTrxInBcsu" char(250) , "fepInPcHoUse" char(250) , "frTchALim" char(250) , "freeTSLsCsDowngrade" char(250) , "freeTSLsCsUpgrade" char(250) , "freqInMeasBAInfo" char(250) , "gprsTerritoryCalc" char(250) , "gsmMacrocellThreshold" char(250) , "gsmMicrocellThreshold" char(250) , "hoPrefOrderInterfDl" char(250) , "hoPrefOrderInterfUl" char(250) , "hrTchALim" char(250) , "inactCriteria" char(250) , "inactEventsPerHour" char(250) , "incomeRateThreshold" char(250) , "initAmrChannelRate" char(250) , "internalHoToExternal" char(250) , "intraSegSdcchHoGuard" char(250) , "ishoPreferredForNonDtmMs" char(250) , "lapdLoadThr" char(250) , "loadRateChSearch" char(250) , "maxBcfCapacity" char(250) , "maxBtsCapacity" char(250) , "maxHldSdcch" char(250) , "maxHldTch" char(250) , "maxOnHiIf" char(250) , "maxTchTransactionRate" char(250) , "maxTrxCapacityHw" char(250) , "maxTrxCapacityReal" char(250) , "meanBepLimitUL_Prof0_2tsl" char(250) , "meanBepLimitUL_Prof0_3tsl" char(250) , "meanBepLimitUL_Prof0_4tsl" char(250) , "meanBepLimitUL_Prof1_2tsl" char(250) , "meanBepLimitUL_Prof1_3tsl" char(250) , "meanBepLimitUL_Prof1_4tsl" char(250) , "meanBepLimitUL_Prof2_3tsl" char(250) , "meanBepLimitUL_Prof2_4tsl" char(250) , "measPrdCh" char(250) , "measPrdFail" char(250) , "measPrdSdcch" char(250) , "measTchMhold" char(250) , "minHiIf" char(250) , "minHldTch" char(250) , "msDistanceBehaviour" char(250) , "msSpeedC11" char(250) , "msSpeedC12" char(250) , "noOfPrefCells" char(250) , "nokBtsOffHour" char(250) , "nokBtsOffMinute" char(250) , "nokBtsOnHour" char(250) , "nokBtsOnMinute" char(250) , "ordinaryCallOnFacch" char(250) , "pagingAnsOnFacch" char(250) , "pcuMaxNoDLtbfInCH" char(250) , "pcuMaxNoULtbfInCH" char(250) , "pfcAckBlerLimit_legacyStream" char(250) , "pfcAckBlerLimit_limit10004000ms" char(250) , "pfcAckBlerLimit_limit10150ms" char(250) , "pfcAckBlerLimit_limit200950ms" char(250) , "pfcAckBlerLimit_notAvailable" char(250) , "pfcUnackBlerLimit_legacyStream" char(250) , "pfcUnackBlerLimit_limit110e1" char(250) , "pfcUnackBlerLimit_limit110e2" char(250) , "pfcUnackBlerLimit_limit110e3" char(250) , "pfcUnackBlerLimit_limit710e3" char(250) , "pfcUnackBlerLimit_notAvailable" char(250) , "prdHighIf" char(250) , "prdNokBts" char(250) , "qcActionTriggerThr_drop" char(250) , "qcActionTriggerThr_nccr" char(250) , "qcActionTriggerThr_qosRenego" char(250) , "qcActionTriggerThr_realloca" char(250) , "reestablishOnFacch" char(250) , "rnwConfId" char(250) , "rnwFallbackConfId" char(250) , "rnwPlanConfId" char(250) , "rnwPlanDatabaseState" char(250) , "rtsl0PrefInTCHAlloc" char(250) , "rxAntSupPer" char(250) , "rxLevBalance" char(250) , "rxLevelBasedTchAccess" char(250) , "rxqualLimitUL_Prof0_2tsl" char(250) , "rxqualLimitUL_Prof0_3tsl" char(250) , "rxqualLimitUL_Prof0_4tsl" char(250) , "rxqualLimitUL_Prof1_2tsl" char(250) , "rxqualLimitUL_Prof1_3tsl" char(250) , "rxqualLimitUL_Prof1_4tsl" char(250) , "rxqualLimitUL_Prof2_3tsl" char(250) , "rxqualLimitUL_Prof2_4tsl" char(250) , "sacchRepeatWindow" char(250) , "saicDlCIOffset" char(250) , "schedStepSizeDlHighPrior" char(250) , "schedStepSizeDlLowPrior" char(250) , "schedStepSizeDlNormPrior" char(250) , "schedStepSizeUlPrior1" char(250) , "schedStepSizeUlPrior2" char(250) , "schedStepSizeUlPrior3" char(250) , "schedStepSizeUlPrior4" char(250) , "schedulingWeight_backgroundARP1" char(250) , "schedulingWeight_backgroundARP2" char(250) , "schedulingWeight_backgroundARP3" char(250) , "schedulingWeight_interactive1ARP1" char(250) , "schedulingWeight_interactive1ARP2" char(250) , "schedulingWeight_interactive1ARP3" char(250) , "schedulingWeight_interactive2ARP1" char(250) , "schedulingWeight_interactive2ARP2" char(250) , "schedulingWeight_interactive2ARP3" char(250) , "schedulingWeight_interactive3ARP1" char(250) , "schedulingWeight_interactive3ARP2" char(250) , "schedulingWeight_interactive3ARP3" char(250) , "schedulingWeight_streamingARP1" char(250) , "schedulingWeight_streamingARP2" char(250) , "schedulingWeight_streamingARP3" char(250) , "sdcchAlLimit" char(250) , "signallingPointCodeIN0" char(250) , "signallingPointCodeIN1" char(250) , "signallingPointCodeNA0" char(250) , "signallingPointCodeNA1" char(250) , "slowAmrLaEnabled" char(250) , "supervisionPeriod" char(250) , "tchRateInternalHo" char(250) , "tchTransactionCount" char(250) , "terrUpdGuardTGprs" char(250) , "triggerMeasPeriod" char(250) , "variableDlStepSize" char(250) , "wcdmaRanSaiPenalty" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.BTS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "notAllowedAccessClasses" char(250) , "plmnPermitted" char(250) , "frequencyBandInUse" char(250) , "gprsMsTxPwrMaxCCH1x00" char(250) , "minMsTxPower" char(250) , "msTxPwrMaxCCH1x00" char(250) , "msTxPwrMaxGSM1x00" char(250) , "address" char(250) , "angle" char(250) , "cellType" char(250) , "insiteGateway" char(250) , "name" char(250) , "adaptiveLaAlgorithm" char(250) , "adminState" char(250) , "allowIMSIAttachDetach" char(250) , "amhLowerLoadThreshold" char(250) , "amhMaxLoadOfTgtCell" char(250) , "amhTrhoGuardTime" char(250) , "amhUpperLoadThreshold" char(250) , "amrConfFrCodecModeSet" char(250) , "amrConfFrDlThreshold1" char(250) , "amrConfFrDlThreshold2" char(250) , "amrConfFrDlThreshold3" char(250) , "amrConfFrHysteresis1" char(250) , "amrConfFrHysteresis2" char(250) , "amrConfFrHysteresis3" char(250) , "amrConfFrInitCodecMode" char(250) , "amrConfFrStartMode" char(250) , "amrConfFrUlThreshold1" char(250) , "amrConfFrUlThreshold2" char(250) , "amrConfFrUlThreshold3" char(250) , "amrConfHrCodecModeSet" char(250) , "amrConfHrDlThreshold1" char(250) , "amrConfHrDlThreshold2" char(250) , "amrConfHrDlThreshold3" char(250) , "amrConfHrHysteresis1" char(250) , "amrConfHrHysteresis2" char(250) , "amrConfHrHysteresis3" char(250) , "amrConfHrInitCodecMode" char(250) , "amrConfHrStartMode" char(250) , "amrConfHrUlThreshold1" char(250) , "amrConfHrUlThreshold2" char(250) , "amrConfHrUlThreshold3" char(250) , "amrHoFrInHoThrDlRxQual" char(250) , "amrHoFrThrDlRxQual" char(250) , "amrHoFrThrUlRxQual" char(250) , "amrHoHrInHoThrDlRxQual" char(250) , "amrHoHrThrDlRxQual" char(250) , "amrHoHrThrUlRxQual" char(250) , "amrPocFrPcLThrDlRxQual" char(250) , "amrPocFrPcLThrUlRxQual" char(250) , "amrPocFrPcUThrDlRxQual" char(250) , "amrPocFrPcUThrUlRxQual" char(250) , "amrPocHrPcLThrDlRxQual" char(250) , "amrPocHrPcLThrUlRxQual" char(250) , "amrPocHrPcUThrDlRxQual" char(250) , "amrPocHrPcUThrUlRxQual" char(250) , "antennaHopping" char(250) , "bsIdentityCodeBCC" char(250) , "bsIdentityCodeNCC" char(250) , "btsIsHopping" char(250) , "btsLoadInSeg" char(250) , "btsLoadThreshold" char(250) , "btsMeasAver" char(250) , "btsSpLoadDepTchRateLower" char(250) , "btsSpLoadDepTchRateUpper" char(250) , "callReestablishmentAllowed" char(250) , "cellBarQualify" char(250) , "cellBarred" char(250) , "cellId" char(250) , "cellLoadForChannelSearch" char(250) , "cellNumberInBtsHw" char(250) , "cellReselectHysteresis" char(250) , "cellReselectOffset" char(250) , "cellReselectParamInd" char(250) , "cnThreshold" char(250) , "dedicatedGPRScapacity" char(250) , "defaultGPRScapacity" char(250) , "directGPRSAccessBts" char(250) , "diversityUsed" char(250) , "dlNoiseLevel" char(250) , "drInUse" char(250) , "drMethod" char(250) , "dtxMode" char(250) , "earlySendingIndication" char(250) , "egprsEnabled" char(250) , "egprsInitMcsAckMode" char(250) , "egprsInitMcsUnAckMode" char(250) , "egprsLinkAdaptEnabled" char(250) , "egprsMaxBlerAckMode" char(250) , "egprsMaxBlerUnAckMode" char(250) , "egprsMeanBepOffset8psk" char(250) , "egprsMeanBepOffsetGmsk" char(250) , "emergencyCallRestricted" char(250) , "fddQMin" char(250) , "fddQOffset" char(250) , "gprsEnabled" char(250) , "gprsMsTxpwrMaxCCH" char(250) , "gprsNonBCCHRxlevLower" char(250) , "gprsNonBCCHRxlevUpper" char(250) , "gprsRxlevAccessMin" char(250) , "gsmPriority" char(250) , "hcsPriorityClass" char(250) , "hcsThreshold" char(250) , "hoppingMode" char(250) , "hoppingSequenceNumber1" char(250) , "hoppingSequenceNumber2" char(250) , "idleStateBcchAllocListId" char(250) , "inactEndTimeHour" char(250) , "inactEndTimeMinute" char(250) , "inactStartTimeHour" char(250) , "inactStartTimeMinute" char(250) , "inactWeekDays" char(250) , "csAckDl" char(250) , "csAckUl" char(250) , "csExtAckDl" char(250) , "csExtAckUl" char(250) , "csExtUnackDl" char(250) , "csExtUnackUl" char(250) , "csUnackDl" char(250) , "csUnackUl" char(250) , "initMcsExtAckMode" char(250) , "initMcsExtUnackMode" char(250) , "interferenceAveragingProcessAverPeriod" char(250) , "interferenceAveragingProcessBoundary0" char(250) , "interferenceAveragingProcessBoundary1" char(250) , "interferenceAveragingProcessBoundary2" char(250) , "interferenceAveragingProcessBoundary3" char(250) , "interferenceAveragingProcessBoundary4" char(250) , "interferenceAveragingProcessBoundary5" char(250) , "locationAreaIdLAC" char(250) , "locationAreaIdMCC" char(250) , "locationAreaIdMNC" char(250) , "lowPriorityThr" char(250) , "maioOffset" char(250) , "maioStep" char(250) , "masterBcf" char(250) , "maxGPRSCapacity" char(250) , "maxNumberOfRepetition" char(250) , "maxNumberRetransmission" char(250) , "maxQueueLength" char(250) , "maxTimeLimitDirectedRetry" char(250) , "measListUsedDuringMeas" char(250) , "measurementBCCHAllocation" char(250) , "minTimeLimitDirectedRetry" char(250) , "msMaxDistInCallSetup" char(250) , "msPriorityUsedInQueueing" char(250) , "msTxPwrMaxCCH" char(250) , "msTxPwrMaxGSM" char(250) , "multiBandCell" char(250) , "multiBandCellReporting" char(250) , "nbrOfSlotsSpreadTrans" char(250) , "newEstabCausesSupport" char(250) , "noOfBlocksForAccessGrant" char(250) , "noOfMFramesBetweenPaging" char(250) , "nonBCCHLayerOffset" char(250) , "nsei" char(250) , "nwName" char(250) , "pcuCsHopping" char(250) , "pcuCsNonHopping" char(250) , "pcuDlBlerCpHopping" char(250) , "pcuDlBlerCpNonHop" char(250) , "pcuDlLaRiskLevel" char(250) , "pcuUlBlerCpHopping" char(250) , "pcuUlBlerCpNonHop" char(250) , "pcuUlLaRiskLevel" char(250) , "penaltyTime" char(250) , "powerOffset" char(250) , "preferBCCHfreqGPRS2" char(250) , "prioritySearchThr" char(250) , "psei" char(250) , "qSearchI" char(250) , "qSearchP" char(250) , "queuePriorityNonUrgentHo" char(250) , "queuePriorityUsed" char(250) , "queueingPriorityCall" char(250) , "queueingPriorityHandover" char(250) , "raReselectHysteresis" char(250) , "rac" char(250) , "radioLinkTimeout" char(250) , "radioLinkTimeoutAmr" char(250) , "radiusExtension" char(250) , "reselectionAlgorithmHysteresis" char(250) , "rxLevAccessMin" char(250) , "sectorId" char(250) , "segmentId" char(250) , "segmentName" char(250) , "smsCbUsed" char(250) , "stircEnabled" char(250) , "tchRateIntraCellHo" char(250) , "temporaryOffset" char(250) , "throughputFactor_cs1cs4dlcs" char(250) , "throughputFactor_cs1cs4ulcs" char(250) , "throughputFactor_mcs1mcs4ulcs" char(250) , "throughputFactor_mcs1mcs9dlcs" char(250) , "throughputFactor_mcs1mcs9ulcs" char(250) , "timeHysteresis" char(250) , "timeLimitCall" char(250) , "timeLimitHandover" char(250) , "timerPeriodicUpdateMs" char(250) , "trxPriorityInTchAlloc" char(250) , "ulNoiseLevel" char(250) , "usedMobileAllocation" char(250) , "utranQualRxLevelMargin" char(250) , "utranThresholdReselection" char(250) , "wcdmaPriority" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.BTS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "notAllowedAccessClasses" char(250) , "plmnPermitted" char(250) , "frequencyBandInUse" char(250) , "gprsMsTxPwrMaxCCH1x00" char(250) , "minMsTxPower" char(250) , "msTxPwrMaxCCH1x00" char(250) , "msTxPwrMaxGSM1x00" char(250) , "address" char(250) , "angle" char(250) , "cellType" char(250) , "insiteGateway" char(250) , "name" char(250) , "adaptiveLaAlgorithm" char(250) , "adminState" char(250) , "allowIMSIAttachDetach" char(250) , "amhLowerLoadThreshold" char(250) , "amhMaxLoadOfTgtCell" char(250) , "amhTrhoGuardTime" char(250) , "amhUpperLoadThreshold" char(250) , "amrConfFrCodecModeSet" char(250) , "amrConfFrDlThreshold1" char(250) , "amrConfFrDlThreshold2" char(250) , "amrConfFrDlThreshold3" char(250) , "amrConfFrHysteresis1" char(250) , "amrConfFrHysteresis2" char(250) , "amrConfFrHysteresis3" char(250) , "amrConfFrInitCodecMode" char(250) , "amrConfFrStartMode" char(250) , "amrConfFrUlThreshold1" char(250) , "amrConfFrUlThreshold2" char(250) , "amrConfFrUlThreshold3" char(250) , "amrConfHrCodecModeSet" char(250) , "amrConfHrDlThreshold1" char(250) , "amrConfHrDlThreshold2" char(250) , "amrConfHrDlThreshold3" char(250) , "amrConfHrHysteresis1" char(250) , "amrConfHrHysteresis2" char(250) , "amrConfHrHysteresis3" char(250) , "amrConfHrInitCodecMode" char(250) , "amrConfHrStartMode" char(250) , "amrConfHrUlThreshold1" char(250) , "amrConfHrUlThreshold2" char(250) , "amrConfHrUlThreshold3" char(250) , "amrHoFrInHoThrDlRxQual" char(250) , "amrHoFrThrDlRxQual" char(250) , "amrHoFrThrUlRxQual" char(250) , "amrHoHrInHoThrDlRxQual" char(250) , "amrHoHrThrDlRxQual" char(250) , "amrHoHrThrUlRxQual" char(250) , "amrPocFrPcLThrDlRxQual" char(250) , "amrPocFrPcLThrUlRxQual" char(250) , "amrPocFrPcUThrDlRxQual" char(250) , "amrPocFrPcUThrUlRxQual" char(250) , "amrPocHrPcLThrDlRxQual" char(250) , "amrPocHrPcLThrUlRxQual" char(250) , "amrPocHrPcUThrDlRxQual" char(250) , "amrPocHrPcUThrUlRxQual" char(250) , "antennaHopping" char(250) , "bsIdentityCodeBCC" char(250) , "bsIdentityCodeNCC" char(250) , "btsIsHopping" char(250) , "btsLoadInSeg" char(250) , "btsLoadThreshold" char(250) , "btsMeasAver" char(250) , "btsSpLoadDepTchRateLower" char(250) , "btsSpLoadDepTchRateUpper" char(250) , "callReestablishmentAllowed" char(250) , "cellBarQualify" char(250) , "cellBarred" char(250) , "cellId" char(250) , "cellLoadForChannelSearch" char(250) , "cellNumberInBtsHw" char(250) , "cellReselectHysteresis" char(250) , "cellReselectOffset" char(250) , "cellReselectParamInd" char(250) , "cnThreshold" char(250) , "dedicatedGPRScapacity" char(250) , "defaultGPRScapacity" char(250) , "directGPRSAccessBts" char(250) , "diversityUsed" char(250) , "dlNoiseLevel" char(250) , "drInUse" char(250) , "drMethod" char(250) , "dtxMode" char(250) , "earlySendingIndication" char(250) , "egprsEnabled" char(250) , "egprsInitMcsAckMode" char(250) , "egprsInitMcsUnAckMode" char(250) , "egprsLinkAdaptEnabled" char(250) , "egprsMaxBlerAckMode" char(250) , "egprsMaxBlerUnAckMode" char(250) , "egprsMeanBepOffset8psk" char(250) , "egprsMeanBepOffsetGmsk" char(250) , "emergencyCallRestricted" char(250) , "fddQMin" char(250) , "fddQOffset" char(250) , "gprsEnabled" char(250) , "gprsMsTxpwrMaxCCH" char(250) , "gprsNonBCCHRxlevLower" char(250) , "gprsNonBCCHRxlevUpper" char(250) , "gprsRxlevAccessMin" char(250) , "gsmPriority" char(250) , "hcsPriorityClass" char(250) , "hcsThreshold" char(250) , "hoppingMode" char(250) , "hoppingSequenceNumber1" char(250) , "hoppingSequenceNumber2" char(250) , "idleStateBcchAllocListId" char(250) , "inactEndTimeHour" char(250) , "inactEndTimeMinute" char(250) , "inactStartTimeHour" char(250) , "inactStartTimeMinute" char(250) , "inactWeekDays" char(250) , "csAckDl" char(250) , "csAckUl" char(250) , "csExtAckDl" char(250) , "csExtAckUl" char(250) , "csExtUnackDl" char(250) , "csExtUnackUl" char(250) , "csUnackDl" char(250) , "csUnackUl" char(250) , "initMcsExtAckMode" char(250) , "initMcsExtUnackMode" char(250) , "interferenceAveragingProcessAverPeriod" char(250) , "interferenceAveragingProcessBoundary0" char(250) , "interferenceAveragingProcessBoundary1" char(250) , "interferenceAveragingProcessBoundary2" char(250) , "interferenceAveragingProcessBoundary3" char(250) , "interferenceAveragingProcessBoundary4" char(250) , "interferenceAveragingProcessBoundary5" char(250) , "locationAreaIdLAC" char(250) , "locationAreaIdMCC" char(250) , "locationAreaIdMNC" char(250) , "lowPriorityThr" char(250) , "maioOffset" char(250) , "maioStep" char(250) , "masterBcf" char(250) , "maxGPRSCapacity" char(250) , "maxNumberOfRepetition" char(250) , "maxNumberRetransmission" char(250) , "maxQueueLength" char(250) , "maxTimeLimitDirectedRetry" char(250) , "measListUsedDuringMeas" char(250) , "measurementBCCHAllocation" char(250) , "minTimeLimitDirectedRetry" char(250) , "msMaxDistInCallSetup" char(250) , "msPriorityUsedInQueueing" char(250) , "msTxPwrMaxCCH" char(250) , "msTxPwrMaxGSM" char(250) , "multiBandCell" char(250) , "multiBandCellReporting" char(250) , "nbrOfSlotsSpreadTrans" char(250) , "newEstabCausesSupport" char(250) , "noOfBlocksForAccessGrant" char(250) , "noOfMFramesBetweenPaging" char(250) , "nonBCCHLayerOffset" char(250) , "nsei" char(250) , "nwName" char(250) , "pcuCsHopping" char(250) , "pcuCsNonHopping" char(250) , "pcuDlBlerCpHopping" char(250) , "pcuDlBlerCpNonHop" char(250) , "pcuDlLaRiskLevel" char(250) , "pcuUlBlerCpHopping" char(250) , "pcuUlBlerCpNonHop" char(250) , "pcuUlLaRiskLevel" char(250) , "penaltyTime" char(250) , "powerOffset" char(250) , "preferBCCHfreqGPRS2" char(250) , "prioritySearchThr" char(250) , "psei" char(250) , "qSearchI" char(250) , "qSearchP" char(250) , "queuePriorityNonUrgentHo" char(250) , "queuePriorityUsed" char(250) , "queueingPriorityCall" char(250) , "queueingPriorityHandover" char(250) , "raReselectHysteresis" char(250) , "rac" char(250) , "radioLinkTimeout" char(250) , "radioLinkTimeoutAmr" char(250) , "radiusExtension" char(250) , "reselectionAlgorithmHysteresis" char(250) , "rxLevAccessMin" char(250) , "sectorId" char(250) , "segmentId" char(250) , "segmentName" char(250) , "smsCbUsed" char(250) , "stircEnabled" char(250) , "tchRateIntraCellHo" char(250) , "temporaryOffset" char(250) , "throughputFactor_cs1cs4dlcs" char(250) , "throughputFactor_cs1cs4ulcs" char(250) , "throughputFactor_mcs1mcs4ulcs" char(250) , "throughputFactor_mcs1mcs9dlcs" char(250) , "throughputFactor_mcs1mcs9ulcs" char(250) , "timeHysteresis" char(250) , "timeLimitCall" char(250) , "timeLimitHandover" char(250) , "timerPeriodicUpdateMs" char(250) , "trxPriorityInTchAlloc" char(250) , "ulNoiseLevel" char(250) , "usedMobileAllocation" char(250) , "utranQualRxLevelMargin" char(250) , "utranThresholdReselection" char(250) , "wcdmaPriority" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.DAP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "bcsuID" char(250) , "firstTSL" char(250) , "lastTSL" char(250) , "logicalBCSUAddress" char(250) , "pcmCircuit_ID" char(250) , "pcuID" char(250) , "psei" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.DAP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "bcsuID" char(250) , "firstTSL" char(250) , "lastTSL" char(250) , "logicalBCSUAddress" char(250) , "pcmCircuit_ID" char(250) , "pcuID" char(250) , "psei" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.GPC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "name" char(250) , "qcTputThrModes_egprsDlRlcAckMode" char(250) , "qcTputThrModes_egprsUlRlcAckMode" char(250) , "qcTputThrModes_gprsDlRlcAckMode" char(250) , "qcTputThrModes_gprsUlRlcAckMode" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.GPC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "name" char(250) , "qcTputThrModes_egprsDlRlcAckMode" char(250) , "qcTputThrModes_egprsUlRlcAckMode" char(250) , "qcTputThrModes_gprsDlRlcAckMode" char(250) , "qcTputThrModes_gprsUlRlcAckMode" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.HOC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "allAdjacentCellsAveraged" char(250) , "allUtranAdjAver" char(250) , "amhTrafficControlIUO" char(250) , "amhTrafficControlMCN" char(250) , "amhTrhoPbgtMargin" char(250) , "averagingWindowSizeAdjCell" char(250) , "ddeThresholdsLevNx" char(250) , "ddeThresholdsLevPx" char(250) , "ddeThresholdsLevRxLevel" char(250) , "ddeWindow" char(250) , "enaFastAveCallSetup" char(250) , "enaFastAveHo" char(250) , "enaFastAvePc" char(250) , "enaHierCellHo" char(250) , "enableIntraHoDl" char(250) , "enableIntraHoUl" char(250) , "enableMsDistance" char(250) , "enablePowerBudgetHo" char(250) , "enableSddchHandover" char(250) , "enableUmbrellaHo" char(250) , "erfdEnabled" char(250) , "erfdOver" char(250) , "failMoveThreshold" char(250) , "gsmPlmnPriorisation" char(250) , "hoAvaragingLevDLWeighting" char(250) , "hoAvaragingLevDlWindowSize" char(250) , "hoAveragingLevUlWeighting" char(250) , "hoAveragingLevUlWindowSize" char(250) , "hoAveragingQualDlWeighting" char(250) , "hoAveragingQualDlWindowSize" char(250) , "hoAveragingQualUlWeighting" char(250) , "hoAveragingQualUlWindowSize" char(250) , "hoPeriodPbgt" char(250) , "hoPeriodUmbrella" char(250) , "hoTLDlPx" char(250) , "hoTLDlRxLevel" char(250) , "hoTLUlNx" char(250) , "hoTLUlPx" char(250) , "hoTLUlRxLevel" char(250) , "hoTQDlNx" char(250) , "hoTQDlPx" char(250) , "hoTQDlRxQual" char(250) , "hoTQUlNx" char(250) , "hoTQUlPx" char(250) , "hoTQUlRxQual" char(250) , "hoThrInterferenceDlNx" char(250) , "hoThrInterferenceDlPx" char(250) , "hoThresholdsInterferenceDlRxLevel" char(250) , "hoThresholdsInterferenceULNx" char(250) , "hoThresholdsInterferenceULPx" char(250) , "hoThresholdsInterferenceULRxLevel" char(250) , "hoThresholdsLevDLNx" char(250) , "hoThresholdsRapidLevUl" char(250) , "hoThresholdsRapidLevUlN" char(250) , "interSystemDa" char(250) , "intraHoLoRxLevLimAmrHr" char(250) , "intraHoLoRxQualLimAmr" char(250) , "intraHoUpRxLevLimAmrHr" char(250) , "maxMsDistanceHoThreshold" char(250) , "minIntBetweenHoReq" char(250) , "minIntBetweenUnsuccHoAttempt" char(250) , "minIntUnsuccIsHo" char(250) , "minMsDistanceHoThreshold" char(250) , "modifiedAveWinNCell" char(250) , "modifiedNoz" char(250) , "msDHoThrParamN8" char(250) , "msDistanceAveragingParamHreqave" char(250) , "msDistanceHoThresholdParamMsRangeMax" char(250) , "msDistanceHoThresholdParamP8" char(250) , "multiratRep" char(250) , "noOfZeroResUtran" char(250) , "nonBcchLayerAccessThr" char(250) , "nonBcchLayerExitThr_nx" char(250) , "nonBcchLayerExitThr_px" char(250) , "numberOfZeroResults" char(250) , "qSearchC" char(250) , "rxLevel" char(250) , "utranAveragingNumber" char(250) , "utranHoThScTpdc" char(250) , "wcdmaRanCellPenalty" char(250) , "name" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.HOC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "allAdjacentCellsAveraged" char(250) , "allUtranAdjAver" char(250) , "amhTrafficControlIUO" char(250) , "amhTrafficControlMCN" char(250) , "amhTrhoPbgtMargin" char(250) , "averagingWindowSizeAdjCell" char(250) , "ddeThresholdsLevNx" char(250) , "ddeThresholdsLevPx" char(250) , "ddeThresholdsLevRxLevel" char(250) , "ddeWindow" char(250) , "enaFastAveCallSetup" char(250) , "enaFastAveHo" char(250) , "enaFastAvePc" char(250) , "enaHierCellHo" char(250) , "enableIntraHoDl" char(250) , "enableIntraHoUl" char(250) , "enableMsDistance" char(250) , "enablePowerBudgetHo" char(250) , "enableSddchHandover" char(250) , "enableUmbrellaHo" char(250) , "erfdEnabled" char(250) , "erfdOver" char(250) , "failMoveThreshold" char(250) , "gsmPlmnPriorisation" char(250) , "hoAvaragingLevDLWeighting" char(250) , "hoAvaragingLevDlWindowSize" char(250) , "hoAveragingLevUlWeighting" char(250) , "hoAveragingLevUlWindowSize" char(250) , "hoAveragingQualDlWeighting" char(250) , "hoAveragingQualDlWindowSize" char(250) , "hoAveragingQualUlWeighting" char(250) , "hoAveragingQualUlWindowSize" char(250) , "hoPeriodPbgt" char(250) , "hoPeriodUmbrella" char(250) , "hoTLDlPx" char(250) , "hoTLDlRxLevel" char(250) , "hoTLUlNx" char(250) , "hoTLUlPx" char(250) , "hoTLUlRxLevel" char(250) , "hoTQDlNx" char(250) , "hoTQDlPx" char(250) , "hoTQDlRxQual" char(250) , "hoTQUlNx" char(250) , "hoTQUlPx" char(250) , "hoTQUlRxQual" char(250) , "hoThrInterferenceDlNx" char(250) , "hoThrInterferenceDlPx" char(250) , "hoThresholdsInterferenceDlRxLevel" char(250) , "hoThresholdsInterferenceULNx" char(250) , "hoThresholdsInterferenceULPx" char(250) , "hoThresholdsInterferenceULRxLevel" char(250) , "hoThresholdsLevDLNx" char(250) , "hoThresholdsRapidLevUl" char(250) , "hoThresholdsRapidLevUlN" char(250) , "interSystemDa" char(250) , "intraHoLoRxLevLimAmrHr" char(250) , "intraHoLoRxQualLimAmr" char(250) , "intraHoUpRxLevLimAmrHr" char(250) , "maxMsDistanceHoThreshold" char(250) , "minIntBetweenHoReq" char(250) , "minIntBetweenUnsuccHoAttempt" char(250) , "minIntUnsuccIsHo" char(250) , "minMsDistanceHoThreshold" char(250) , "modifiedAveWinNCell" char(250) , "modifiedNoz" char(250) , "msDHoThrParamN8" char(250) , "msDistanceAveragingParamHreqave" char(250) , "msDistanceHoThresholdParamMsRangeMax" char(250) , "msDistanceHoThresholdParamP8" char(250) , "multiratRep" char(250) , "noOfZeroResUtran" char(250) , "nonBcchLayerAccessThr" char(250) , "nonBcchLayerExitThr_nx" char(250) , "nonBcchLayerExitThr_px" char(250) , "numberOfZeroResults" char(250) , "qSearchC" char(250) , "rxLevel" char(250) , "utranAveragingNumber" char(250) , "utranHoThScTpdc" char(250) , "wcdmaRanCellPenalty" char(250) , "name" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.LAPD( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "abisSigChannelSubSlot" char(250) , "bitRate" char(250) , "abisSigChannelTimeSlotPcm" char(250) , "abisSigChannelTimeSlotTsl" char(250) , "adminState" char(250) , "dChannelType" char(250) , "logicalBCSUAddress" char(250) , "name" char(250) , "parameterSetNumber" char(250) , "sapi" char(250) , "tei" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.LAPD( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "abisSigChannelSubSlot" char(250) , "bitRate" char(250) , "abisSigChannelTimeSlotPcm" char(250) , "abisSigChannelTimeSlotTsl" char(250) , "adminState" char(250) , "dChannelType" char(250) , "logicalBCSUAddress" char(250) , "name" char(250) , "parameterSetNumber" char(250) , "sapi" char(250) , "tei" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.MAL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "frequency" char(250) , "frequencyBandInUse" char(250) , "address" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.MAL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "frequency" char(250) , "frequencyBandInUse" char(250) , "address" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.NSE( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "pcuCapacity" char(250) , "localUdpPort" char(250) , "nseType" char(250) , "psei" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.NSE( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "pcuCapacity" char(250) , "localUdpPort" char(250) , "nseType" char(250) , "psei" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.NSVL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "dataWeight" char(250) , "ipAddressValue" char(250) , "ipAddressVersion" char(250) , "localUdpPort" char(250) , "nsEntityId" char(250) , "nsVirtualConnectionName" char(250) , "preconfSgsnIpEpInd" char(250) , "psei" char(250) , "signWeight" char(250) , "udpPort" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.NSVL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "dataWeight" char(250) , "ipAddressValue" char(250) , "ipAddressVersion" char(250) , "localUdpPort" char(250) , "nsEntityId" char(250) , "nsVirtualConnectionName" char(250) , "preconfSgsnIpEpInd" char(250) , "psei" char(250) , "signWeight" char(250) , "udpPort" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.PCM( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "name" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.PCM( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "name" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.PCU( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "abisInType" char(250) , "bcsuID" char(250) , "gbIfType" char(250) , "pcuAbisConnectionType" char(250) , "pcuID" char(250) , "pcuObjectState" char(250) , "piuType" char(250) , "psei" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.PCU( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "abisInType" char(250) , "bcsuID" char(250) , "gbIfType" char(250) , "pcuAbisConnectionType" char(250) , "pcuID" char(250) , "pcuObjectState" char(250) , "piuType" char(250) , "psei" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.POC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "alpha" char(250) , "bepPeriod" char(250) , "bsTxPwrMax" char(250) , "bsTxPwrMax1x00" char(250) , "bsTxPwrMin" char(250) , "enableAla" char(250) , "gamma" char(250) , "maxPwrCompensation" char(250) , "minIntBetweenAla" char(250) , "pcALDlWeighting" char(250) , "pcALDlWindowSize" char(250) , "pcALUlWeighting" char(250) , "pcALUlWindowSize" char(250) , "pcAQLDlWeighting" char(250) , "pcAQLDlWindowSize" char(250) , "pcAQLUlWeighting" char(250) , "pcAQLUlWindowSize" char(250) , "pcControlEnabled" char(250) , "pcControlInterval" char(250) , "pcIncrStepSize" char(250) , "pcLTLevDlNx" char(250) , "pcLTLevDlPx" char(250) , "pcLTLevUlNx" char(250) , "pcLTLevUlPx" char(250) , "pcLTQual144Nx" char(250) , "pcLTQual144Px" char(250) , "pcLTQual144RxQual" char(250) , "pcLTQualDlNx" char(250) , "pcLTQualDlPx" char(250) , "pcLTQualDlRxQual" char(250) , "pcLTQualUlNx" char(250) , "pcLTQualUlPx" char(250) , "pcLTQualUlRxQual" char(250) , "pcLowerThresholdsLevDLRxLevel" char(250) , "pcLowerThresholsLevULRxLevel" char(250) , "pcRedStepSize" char(250) , "pcUTLevDlNx" char(250) , "pcUTLevDlPx" char(250) , "pcUTLevUlNx" char(250) , "pcUTLevUlPx" char(250) , "pcUTQualDlNx" char(250) , "pcUTQualDlPx" char(250) , "pcUTQualDlRxQual" char(250) , "pcUTQualUlNx" char(250) , "pcUTQualUlPx" char(250) , "pcUTQualUlRxQual" char(250) , "pcUpperThresholdsLevDLRxLevel" char(250) , "pcUpperThresholdsLevULRxLevel" char(250) , "powerDecrQualFactor" char(250) , "powerLimitAla" char(250) , "pwrDecrLimitBand0" char(250) , "pwrDecrLimitBand1" char(250) , "pwrDecrLimitBand2" char(250) , "tAvgT" char(250) , "tAvgW" char(250) , "name" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.POC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "alpha" char(250) , "bepPeriod" char(250) , "bsTxPwrMax" char(250) , "bsTxPwrMax1x00" char(250) , "bsTxPwrMin" char(250) , "enableAla" char(250) , "gamma" char(250) , "maxPwrCompensation" char(250) , "minIntBetweenAla" char(250) , "pcALDlWeighting" char(250) , "pcALDlWindowSize" char(250) , "pcALUlWeighting" char(250) , "pcALUlWindowSize" char(250) , "pcAQLDlWeighting" char(250) , "pcAQLDlWindowSize" char(250) , "pcAQLUlWeighting" char(250) , "pcAQLUlWindowSize" char(250) , "pcControlEnabled" char(250) , "pcControlInterval" char(250) , "pcIncrStepSize" char(250) , "pcLTLevDlNx" char(250) , "pcLTLevDlPx" char(250) , "pcLTLevUlNx" char(250) , "pcLTLevUlPx" char(250) , "pcLTQual144Nx" char(250) , "pcLTQual144Px" char(250) , "pcLTQual144RxQual" char(250) , "pcLTQualDlNx" char(250) , "pcLTQualDlPx" char(250) , "pcLTQualDlRxQual" char(250) , "pcLTQualUlNx" char(250) , "pcLTQualUlPx" char(250) , "pcLTQualUlRxQual" char(250) , "pcLowerThresholdsLevDLRxLevel" char(250) , "pcLowerThresholsLevULRxLevel" char(250) , "pcRedStepSize" char(250) , "pcUTLevDlNx" char(250) , "pcUTLevDlPx" char(250) , "pcUTLevUlNx" char(250) , "pcUTLevUlPx" char(250) , "pcUTQualDlNx" char(250) , "pcUTQualDlPx" char(250) , "pcUTQualDlRxQual" char(250) , "pcUTQualUlNx" char(250) , "pcUTQualUlPx" char(250) , "pcUTQualUlRxQual" char(250) , "pcUpperThresholdsLevDLRxLevel" char(250) , "pcUpperThresholdsLevULRxLevel" char(250) , "powerDecrQualFactor" char(250) , "powerLimitAla" char(250) , "pwrDecrLimitBand0" char(250) , "pwrDecrLimitBand1" char(250) , "pwrDecrLimitBand2" char(250) , "tAvgT" char(250) , "tAvgW" char(250) , "name" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.RA( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "nseiList" char(250) , "routingAreaIdLac" char(250) , "routingAreaIdMcc" char(250) , "routingAreaIdMnc" char(250) , "routingAreaIdRac" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.RA( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "nseiList" char(250) , "routingAreaIdLac" char(250) , "routingAreaIdMcc" char(250) , "routingAreaIdMnc" char(250) , "routingAreaIdRac" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.SMLC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "name" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.SMLC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "name" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.TCSM( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "cardConfiguration_cardName_cardNumber" char(250) , "pcmConfiguration_pcmNumber_pcmType" char(250) , "tcsmType" char(250) , "name" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.TCSM( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "cardConfiguration_cardName_cardNumber" char(250) , "pcmConfiguration_pcmNumber_pcmType" char(250) , "tcsmType" char(250) , "name" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.TID( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "ioTextValue" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.TID( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "ioTextValue" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.TRE( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "name" char(250) , "q1Address" char(250) , "unitType" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.TRE( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "name" char(250) , "q1Address" char(250) , "unitType" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g.TRX( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "name" char(250) , "adminState" char(250) , "bbUnitSupportsEdge" char(250) , "channel0AdminState" char(250) , "channel0Maio" char(250) , "channel0Pcm" char(250) , "channel0Subslot" char(250) , "channel0Tsl" char(250) , "channel0Type" char(250) , "channel1AdminState" char(250) , "channel1Maio" char(250) , "channel1Pcm" char(250) , "channel1Subslot" char(250) , "channel1Tsl" char(250) , "channel1Type" char(250) , "channel2AdminState" char(250) , "channel2Maio" char(250) , "channel2Pcm" char(250) , "channel2Subslot" char(250) , "channel2Tsl" char(250) , "channel2Type" char(250) , "channel3AdminState" char(250) , "channel3Maio" char(250) , "channel3Pcm" char(250) , "channel3Subslot" char(250) , "channel3Tsl" char(250) , "channel3Type" char(250) , "channel4AdminState" char(250) , "channel4Maio" char(250) , "channel4Pcm" char(250) , "channel4Subslot" char(250) , "channel4Tsl" char(250) , "channel4Type" char(250) , "channel5AdminState" char(250) , "channel5Maio" char(250) , "channel5Pcm" char(250) , "channel5Subslot" char(250) , "channel5Tsl" char(250) , "channel5Type" char(250) , "channel6AdminState" char(250) , "channel6Maio" char(250) , "channel6Pcm" char(250) , "channel6Subslot" char(250) , "channel6Tsl" char(250) , "channel6Type" char(250) , "channel7AdminState" char(250) , "channel7Maio" char(250) , "channel7Pcm" char(250) , "channel7Subslot" char(250) , "channel7Tsl" char(250) , "channel7Type" char(250) , "daPool_ID" char(250) , "eTrxInd" char(250) , "gprsEnabledTrx" char(250) , "halfRateSupport" char(250) , "initialFrequency" char(250) , "lapdLinkName" char(250) , "lapdLinkNumber" char(250) , "optimumRxLevDL" char(250) , "optimumRxLevUL" char(250) , "preferredBcchMark" char(250) , "subslotsForSignalling" char(250) , "trxAbilities" char(250) , "tsc" char(250) , "metroTrxType" char(250) , "notificationOrigin" char(250) , "numberOfTrxRfPowerLevels" char(250) , "trxOscCapability" char(250) , "trxRfPower" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_2g_hist.TRX( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "address" char(250) , "name" char(250) , "adminState" char(250) , "bbUnitSupportsEdge" char(250) , "channel0AdminState" char(250) , "channel0Maio" char(250) , "channel0Pcm" char(250) , "channel0Subslot" char(250) , "channel0Tsl" char(250) , "channel0Type" char(250) , "channel1AdminState" char(250) , "channel1Maio" char(250) , "channel1Pcm" char(250) , "channel1Subslot" char(250) , "channel1Tsl" char(250) , "channel1Type" char(250) , "channel2AdminState" char(250) , "channel2Maio" char(250) , "channel2Pcm" char(250) , "channel2Subslot" char(250) , "channel2Tsl" char(250) , "channel2Type" char(250) , "channel3AdminState" char(250) , "channel3Maio" char(250) , "channel3Pcm" char(250) , "channel3Subslot" char(250) , "channel3Tsl" char(250) , "channel3Type" char(250) , "channel4AdminState" char(250) , "channel4Maio" char(250) , "channel4Pcm" char(250) , "channel4Subslot" char(250) , "channel4Tsl" char(250) , "channel4Type" char(250) , "channel5AdminState" char(250) , "channel5Maio" char(250) , "channel5Pcm" char(250) , "channel5Subslot" char(250) , "channel5Tsl" char(250) , "channel5Type" char(250) , "channel6AdminState" char(250) , "channel6Maio" char(250) , "channel6Pcm" char(250) , "channel6Subslot" char(250) , "channel6Tsl" char(250) , "channel6Type" char(250) , "channel7AdminState" char(250) , "channel7Maio" char(250) , "channel7Pcm" char(250) , "channel7Subslot" char(250) , "channel7Tsl" char(250) , "channel7Type" char(250) , "daPool_ID" char(250) , "eTrxInd" char(250) , "gprsEnabledTrx" char(250) , "halfRateSupport" char(250) , "initialFrequency" char(250) , "lapdLinkName" char(250) , "lapdLinkNumber" char(250) , "optimumRxLevDL" char(250) , "optimumRxLevUL" char(250) , "preferredBcchMark" char(250) , "subslotsForSignalling" char(250) , "trxAbilities" char(250) , "tsc" char(250) , "metroTrxType" char(250) , "notificationOrigin" char(250) , "numberOfTrxRfPowerLevels" char(250) , "trxOscCapability" char(250) , "trxRfPower" char(250) );

