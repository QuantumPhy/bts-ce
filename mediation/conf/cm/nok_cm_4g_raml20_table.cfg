-- psql -U bodastage -d bodastage -a -f nok_cm_4g.sql
-- \i nok_cm_4g_tables.sql

CREATE TABLE IF NOT EXISTS nok_cm_4g.AMGR( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "ldapConnectionType" char(250) , "primaryLdapPort" char(250) , "primaryLdapServer" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.AMGR( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "ldapConnectionType" char(250) , "primaryLdapPort" char(250) , "primaryLdapServer" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.ANRPRL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "actAlsoForUeBasedANR" char(250) , "anrThresRSRPNbCell" char(250) , "anrThresRSRPNbCellMobEv" char(250) , "anrThresRSRQNbCell" char(250) , "nrLimitInterFreq" char(250) , "nrLimitIntraFreq" char(250) , "targetCarrierFreq" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.ANRPRL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "actAlsoForUeBasedANR" char(250) , "anrThresRSRPNbCell" char(250) , "anrThresRSRPNbCellMobEv" char(250) , "anrThresRSRQNbCell" char(250) , "nrLimitInterFreq" char(250) , "nrLimitIntraFreq" char(250) , "targetCarrierFreq" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.ANTL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "additionalRxGain" char(250) , "alDcVoltageEnabled" char(250) , "antId" char(250) , "antennaRoundTripDelay" char(250) , "antennaTotalLoss" char(250) , "communication3gppEnabled" char(250) , "feederVoltage" char(250) , "rModId" char(250) , "ulDelay" char(250) , "vswrMajorAlarm" char(250) , "vswrMinorAlarm" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.ANTL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "additionalRxGain" char(250) , "alDcVoltageEnabled" char(250) , "antId" char(250) , "antennaRoundTripDelay" char(250) , "antennaTotalLoss" char(250) , "communication3gppEnabled" char(250) , "feederVoltage" char(250) , "rModId" char(250) , "ulDelay" char(250) , "vswrMajorAlarm" char(250) , "vswrMinorAlarm" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.BFDGRP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.BFDGRP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.BTSSCL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "btsId" char(250) , "btsName" char(250) , "btsSyncMode" char(250) , "ext1ppsClkOutOn" char(250) , "ext2M048ClkInUse" char(250) , "ext2M048ClkOutOn" char(250) , "gpsCtrlBlockForCoLocatedBts" char(250) , "gpsInUse" char(250) , "holdOverModeUsed" char(250) , "rfSharingEnabled" char(250) , "syncPropagationEnabled" char(250) , "tdmSyncInUse" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.BTSSCL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "btsId" char(250) , "btsName" char(250) , "btsSyncMode" char(250) , "ext1ppsClkOutOn" char(250) , "ext2M048ClkInUse" char(250) , "ext2M048ClkOutOn" char(250) , "gpsCtrlBlockForCoLocatedBts" char(250) , "gpsInUse" char(250) , "holdOverModeUsed" char(250) , "rfSharingEnabled" char(250) , "syncPropagationEnabled" char(250) , "tdmSyncInUse" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.CERTH( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "CRLDPSource" char(250) , "CRLUsageEnabled" char(250) , "btsCertificateUpdateTime" char(250) , "caCertificateUpdateTime" char(250) , "cmpDirectory" char(250) , "cmpServerIpAddress" char(250) , "cmpServerPort" char(250) , "crlUpdatePeriod" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.CERTH( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "CRLDPSource" char(250) , "CRLUsageEnabled" char(250) , "btsCertificateUpdateTime" char(250) , "caCertificateUpdateTime" char(250) , "cmpDirectory" char(250) , "cmpServerIpAddress" char(250) , "cmpServerPort" char(250) , "crlUpdatePeriod" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.CTRLTS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "extCellTraceRep" char(250) , "extUeTraceRep" char(250) , "maxUeTraceSessions" char(250) , "netActIpAddr" char(250) , "omsTracePortNum" char(250) , "tceTracePortNum" char(250) , "cellTraceRepMode" char(250) , "ueTraceRepMode" char(250) , "taTracing" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.CTRLTS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "extCellTraceRep" char(250) , "extUeTraceRep" char(250) , "maxUeTraceSessions" char(250) , "netActIpAddr" char(250) , "omsTracePortNum" char(250) , "tceTracePortNum" char(250) , "cellTraceRepMode" char(250) , "ueTraceRepMode" char(250) , "taTracing" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.ETHLK( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "acceptableFrameTypes" char(250) , "administrativeState" char(250) , "l2BurstSize" char(250) , "l2IngressRate" char(250) , "l2ShaperRate" char(250) , "l2VlanIdList_highValue" char(250) , "linkOAMEnabled" char(250) , "macAddr" char(250) , "portDefaultPriority" char(250) , "portDefaultVlanId" char(250) , "speedAndDuplex" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.ETHLK( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "acceptableFrameTypes" char(250) , "administrativeState" char(250) , "l2BurstSize" char(250) , "l2IngressRate" char(250) , "l2ShaperRate" char(250) , "l2VlanIdList_highValue" char(250) , "linkOAMEnabled" char(250) , "macAddr" char(250) , "portDefaultPriority" char(250) , "portDefaultVlanId" char(250) , "speedAndDuplex" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.FTM( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "locationName" char(250) , "softwareReleaseVersion" char(250) , "systemTitle" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.FTM( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "locationName" char(250) , "softwareReleaseVersion" char(250) , "systemTitle" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.GTPU( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "gtpuN3Reqs" char(250) , "gtpuPathSupint" char(250) , "gtpuT3Resp" char(250) , "sgwIpAddressList_sgwIpAddress_transportNwId" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.GTPU( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "gtpuN3Reqs" char(250) , "gtpuPathSupint" char(250) , "gtpuT3Resp" char(250) , "sgwIpAddressList_sgwIpAddress_transportNwId" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.HW( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "NEType" char(250) , "locationName" char(250) , "operationalState" char(250) , "systemTitle" char(250) , "vendorName" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.HW( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "NEType" char(250) , "locationName" char(250) , "operationalState" char(250) , "systemTitle" char(250) , "vendorName" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.IDNS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "serverIpAddress" char(250) , "serverIpAddress2" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.IDNS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "serverIpAddress" char(250) , "serverIpAddress2" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.IEIF( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "localIpAddr" char(250) , "localIpv6Addr" char(250) , "localIpv6PrefixLength" char(250) , "mtu" char(250) , "netmask" char(250) , "qosEnabled" char(250) , "sbs" char(250) , "sbsTotal" char(250) , "sir" char(250) , "sirTotal" char(250) , "trafficPathShapingEnable" char(250) , "upperLayerShaping" char(250) , "wfqSchedQueueWeight" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.IEIF( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "localIpAddr" char(250) , "localIpv6Addr" char(250) , "localIpv6PrefixLength" char(250) , "mtu" char(250) , "netmask" char(250) , "qosEnabled" char(250) , "sbs" char(250) , "sbsTotal" char(250) , "sir" char(250) , "sirTotal" char(250) , "trafficPathShapingEnable" char(250) , "upperLayerShaping" char(250) , "wfqSchedQueueWeight" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.IHCP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.IHCP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.INTP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "ntpServers" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.INTP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "ntpServers" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.IPNO( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "actFastIpRerouting" char(250) , "actIpTnlMeasure" char(250) , "actIpv6" char(250) , "actSeparationRanSharing" char(250) , "bfdHoldUpTime" char(250) , "btsId" char(250) , "cPlaneIpAddress" char(250) , "cPlaneIpv6Address" char(250) , "enableSoam" char(250) , "ftmBtsSubnetAddress" char(250) , "ftmBtsSubnetMask" char(250) , "icmpResponseEnabled" char(250) , "mPlaneIpAddress" char(250) , "mainTransportNwId" char(250) , "oamIpAddr" char(250) , "oamTlvReply" char(250) , "omsTls" char(250) , "retransTimer" char(250) , "sPlaneIpAddress" char(250) , "secOmsIpAddr" char(250) , "servingOms" char(250) , "servingOmsAdminSetting" char(250) , "twampMessageRate" char(250) , "twampReflectorPort" char(250) , "uPlaneIpAddress" char(250) , "uPlaneIpv6Address" char(250) , "wfqSchedOamWeight" char(250) , "twampFlag_twampIpAddress_twampReflFlag_udpEchoFlag" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.IPNO( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "actFastIpRerouting" char(250) , "actIpTnlMeasure" char(250) , "actIpv6" char(250) , "actSeparationRanSharing" char(250) , "bfdHoldUpTime" char(250) , "btsId" char(250) , "cPlaneIpAddress" char(250) , "cPlaneIpv6Address" char(250) , "enableSoam" char(250) , "ftmBtsSubnetAddress" char(250) , "ftmBtsSubnetMask" char(250) , "icmpResponseEnabled" char(250) , "mPlaneIpAddress" char(250) , "mainTransportNwId" char(250) , "oamIpAddr" char(250) , "oamTlvReply" char(250) , "omsTls" char(250) , "retransTimer" char(250) , "sPlaneIpAddress" char(250) , "secOmsIpAddr" char(250) , "servingOms" char(250) , "servingOmsAdminSetting" char(250) , "twampMessageRate" char(250) , "twampReflectorPort" char(250) , "uPlaneIpAddress" char(250) , "uPlaneIpv6Address" char(250) , "wfqSchedOamWeight" char(250) , "twampFlag_twampIpAddress_twampReflFlag_udpEchoFlag" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.IPRM( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.IPRM( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.IPRT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "staticRoutes_bfdId_destIpAddr_gateway_netmask_preference" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.IPRT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "staticRoutes_bfdId_destIpAddr_gateway_netmask_preference" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.IPRTV6( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.IPRTV6( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.IPSECC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "ipSecEmBypassCtrlIpAddr" char(250) , "ipSecEmBypassEnabled" char(250) , "ipSecEmBypassPingTimer" char(250) , "ipSecEmBypassState" char(250) , "ipSecEnabled" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.IPSECC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "ipSecEmBypassCtrlIpAddr" char(250) , "ipSecEmBypassEnabled" char(250) , "ipSecEmBypassPingTimer" char(250) , "ipSecEmBypassState" char(250) , "ipSecEnabled" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.IVIF( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "localIpAddr" char(250) , "localIpv6Addr" char(250) , "localIpv6PrefixLength" char(250) , "netmask" char(250) , "qosEnabled" char(250) , "sbs" char(250) , "sir" char(250) , "vlanId" char(250) , "wfqSchedQueueWeight" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.IVIF( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "localIpAddr" char(250) , "localIpv6Addr" char(250) , "localIpv6PrefixLength" char(250) , "netmask" char(250) , "qosEnabled" char(250) , "sbs" char(250) , "sir" char(250) , "vlanId" char(250) , "wfqSchedQueueWeight" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.L2SWI( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "dscpMap_dscp_priorityQueue" text , "enableLayer2Switching" char(250) , "l2PriorityQueueWeight2" char(250) , "l2PriorityQueueWeight3" char(250) , "l2PriorityQueueWeight4" char(250) , "l2PriorityQueueWeight5" char(250) , "l2PriorityQueueWeight6" char(250) , "portDefaultPriority" char(250) , "portDefaultVlanId" char(250) , "priorityQueueNonIP" char(250) , "priorityQueuePcp0" char(250) , "priorityQueuePcp1" char(250) , "priorityQueuePcp2" char(250) , "priorityQueuePcp3" char(250) , "priorityQueuePcp4" char(250) , "priorityQueuePcp5" char(250) , "priorityQueuePcp6" char(250) , "priorityQueuePcp7" char(250) , "priorityQueueUntagged" char(250) , "qosClassification" char(250) , "vlanAwareSwitch" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.L2SWI( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "dscpMap_dscp_priorityQueue" text , "enableLayer2Switching" char(250) , "l2PriorityQueueWeight2" char(250) , "l2PriorityQueueWeight3" char(250) , "l2PriorityQueueWeight4" char(250) , "l2PriorityQueueWeight5" char(250) , "l2PriorityQueueWeight6" char(250) , "portDefaultPriority" char(250) , "portDefaultVlanId" char(250) , "priorityQueueNonIP" char(250) , "priorityQueuePcp0" char(250) , "priorityQueuePcp1" char(250) , "priorityQueuePcp2" char(250) , "priorityQueuePcp3" char(250) , "priorityQueuePcp4" char(250) , "priorityQueuePcp5" char(250) , "priorityQueuePcp6" char(250) , "priorityQueuePcp7" char(250) , "priorityQueueUntagged" char(250) , "qosClassification" char(250) , "vlanAwareSwitch" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.LCELL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "resourceList_antlId_txRxUsage" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.LCELL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "resourceList_antlId_txRxUsage" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.LNADJ( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "guGroupIdList_mcc_mmeGroupId_mnc" char(250) , "name" char(250) , "mcc" char(250) , "mnc" char(250) , "targetBtsDn" char(250) , "adjEnbId" char(250) , "cPlaneIpAddr" char(250) , "cPlaneIpAddrCtrl" char(250) , "x2LinkStatus" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.LNADJ( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "guGroupIdList_mcc_mmeGroupId_mnc" char(250) , "name" char(250) , "mcc" char(250) , "mnc" char(250) , "targetBtsDn" char(250) , "adjEnbId" char(250) , "cPlaneIpAddr" char(250) , "cPlaneIpAddrCtrl" char(250) , "x2LinkStatus" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.LNADJL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "bcPlmnIdList_mcc_mnc" char(250) , "mcc" char(250) , "mnc" char(250) , "dlTrmBw" char(250) , "ecgiAdjEnbId" char(250) , "ecgiLcrId" char(250) , "fDlEarfcn" char(250) , "fUlEarfcn" char(250) , "phyCellId" char(250) , "sourceOfData" char(250) , "tac" char(250) , "ulTrmBw" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.LNADJL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "bcPlmnIdList_mcc_mnc" char(250) , "mcc" char(250) , "mnc" char(250) , "dlTrmBw" char(250) , "ecgiAdjEnbId" char(250) , "ecgiLcrId" char(250) , "fDlEarfcn" char(250) , "fUlEarfcn" char(250) , "phyCellId" char(250) , "sourceOfData" char(250) , "tac" char(250) , "ulTrmBw" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.LNADJW( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "mcc" char(250) , "mnc" char(250) , "targetCellDn" char(250) , "srvccHoInd" char(250) , "uTargetCid" char(250) , "uTargetFreq" char(250) , "uTargetLac" char(250) , "uTargetRac" char(250) , "uTargetRncId" char(250) , "uTargetScFdd" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.LNADJW( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "mcc" char(250) , "mnc" char(250) , "targetCellDn" char(250) , "srvccHoInd" char(250) , "uTargetCid" char(250) , "uTargetFreq" char(250) , "uTargetLac" char(250) , "uTargetRac" char(250) , "uTargetRncId" char(250) , "uTargetScFdd" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.LNBTS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "mcc" char(250) , "mnc" char(250) , "name" char(250) , "act1xCsfb" char(250) , "act8EpsBearers" char(250) , "actCMAS" char(250) , "actCSFBRedir" char(250) , "actCellTrace" char(250) , "actCellTraceWithIMSI" char(250) , "actCiphering" char(250) , "actCompChecks" char(250) , "actConvVoice" char(250) , "actCplaneOvlHandling" char(250) , "actCsfbPsHoToUtra" char(250) , "actDLCAggr" char(250) , "actDistributedSite" char(250) , "actDualBand" char(250) , "actDualCarrier" char(250) , "actDualRx1xCsfb" char(250) , "actERabModify" char(250) , "actETWS" char(250) , "actEmerCallRedir" char(250) , "actEnhAcAndGbrServices" char(250) , "actFlexBbUsage" char(250) , "actGsmRedirWithSI" char(250) , "actHOtoHrpd" char(250) , "actHOtoWcdma" char(250) , "actHeNBMobility" char(250) , "actHighPrioServices" char(250) , "actHighRrc" char(250) , "actHoFromUtran" char(250) , "actIMSEmerSessR9" char(250) , "actIdleLB" char(250) , "actIfHo" char(250) , "actImmHRPD" char(250) , "actImmXrtt" char(250) , "actInterFreqLB" char(250) , "actIntraFreqLoadBal" char(250) , "actLPPaOtdoa" char(250) , "actLTES1Ho" char(250) , "actLocRep" char(250) , "actMDTCellTrace" char(250) , "actMFBI" char(250) , "actMultBearers" char(250) , "actMultGbrBearers" char(250) , "actNonGbrServiceDiff" char(250) , "actOTNRecovery" char(250) , "actOperatorQCI" char(250) , "actOperatorQCIGBR" char(250) , "actOptMmeSelection" char(250) , "actPdcpRohc" char(250) , "actRIMforGSM" char(250) , "actRedirect" char(250) , "actRfChaining" char(250) , "actS1Flex" char(250) , "actS1OlHandling" char(250) , "actSelMobPrf" char(250) , "actSrvccToGsm" char(250) , "actSrvccToWcdma" char(250) , "actSubscriberTrace" char(250) , "actUeBasedAnrInterFreqLte" char(250) , "actUeBasedAnrIntraFreqLte" char(250) , "actUeBasedAnrUtran" char(250) , "actUlCoMp" char(250) , "actZUC" char(250) , "acteNACCtoGSM" char(250) , "amRlcPBTab1dlPollByte" char(250) , "amRlcPBTab1ueCategory" char(250) , "amRlcPBTab1ulPollByte" char(250) , "amRlcPBTab2dlPollByte" char(250) , "amRlcPBTab2ueCategory" char(250) , "amRlcPBTab2ulPollByte" char(250) , "amRlcPBTab3dlPollByte" char(250) , "amRlcPBTab3ueCategory" char(250) , "amRlcPBTab3ulPollByte" char(250) , "amRlcPBTab4dlPollByte" char(250) , "amRlcPBTab4ueCategory" char(250) , "amRlcPBTab4ulPollByte" char(250) , "amRlcPBTab5dlPollByte" char(250) , "amRlcPBTab5ueCategory" char(250) , "amRlcPBTab5ulPollByte" char(250) , "anrIfTRSC" char(250) , "anrOmExtEnable" char(250) , "anrRobLevel" char(250) , "caMinDlAmbr" char(250) , "eea0" char(250) , "eea1" char(250) , "eea2" char(250) , "eea3" char(250) , "congWeightAlg" char(250) , "defProfIdxAM" char(250) , "defProfIdxUM" char(250) , "enableAutoLock" char(250) , "enableGrflShdn" char(250) , "enbName" char(250) , "etwsPrimNotifBcDur" char(250) , "hpsSessArpMax" char(250) , "hpsSessArpMin" char(250) , "eia0" char(250) , "eia1" char(250) , "eia2" char(250) , "eia3" char(250) , "keyRefrMarg" char(250) , "maxNumOfLnadjLimit" char(250) , "maxNumPreEmptions" char(250) , "maxNumX2LinksIn" char(250) , "maxNumX2LinksOut" char(250) , "minNotActivatedUtraRSCFS" char(250) , "moProfileSelect" char(250) , "nRimRirG" char(250) , "nullFallback" char(250) , "operationalState" char(250) , "otnRecoveryPeriod" char(250) , "actInHORed" char(250) , "actRrcConnRed" char(250) , "pbrNonGbr" char(250) , "pdcpProf1pdcpProfileId" char(250) , "pdcpProf1statusRepReq" char(250) , "pdcpProf1tDiscard" char(250) , "pdcpProf101pdcpProfileId" char(250) , "pdcpProf101rohcMaxCid" char(250) , "pdcpProf101snSize" char(250) , "pdcpProf101tDiscard" char(250) , "pdcpProf102pdcpProfileId" char(250) , "pdcpProf102snSize" char(250) , "pdcpProf102tDiscard" char(250) , "pdcpProf103pdcpProfileId" char(250) , "pdcpProf103snSize" char(250) , "pdcpProf103tDiscard" char(250) , "pdcpProf104pdcpProfileId" char(250) , "pdcpProf104snSize" char(250) , "pdcpProf104tDiscard" char(250) , "pdcpProf2pdcpProfileId" char(250) , "pdcpProf2statusRepReq" char(250) , "pdcpProf2tDiscard" char(250) , "pdcpProf3pdcpProfileId" char(250) , "pdcpProf3statusRepReq" char(250) , "pdcpProf3tDiscard" char(250) , "pdcpProf4pdcpProfileId" char(250) , "pdcpProf4statusRepReq" char(250) , "pdcpProf4tDiscard" char(250) , "pdcpProf5pdcpProfileId" char(250) , "pdcpProf5statusRepReq" char(250) , "pdcpProf5tDiscard" char(250) , "prioTopoHO" char(250) , "prohibitLBHOTimer" char(250) , "prohibitPsHOtoWcdma" char(250) , "pwsWithEmAreaId" char(250) , "qciTab1delayTarget" char(250) , "qciTab1drxProfileIndex" char(250) , "qciTab1dscp" char(250) , "qciTab1enforceTtiBundling" char(250) , "qciTab1lcgid" char(250) , "qciTab1maxGbrDl" char(250) , "qciTab1maxGbrUl" char(250) , "qciTab1pdcpProfIdx" char(250) , "qciTab1prio" char(250) , "qciTab1qci" char(250) , "qciTab1qciSupp" char(250) , "qciTab1resType" char(250) , "qciTab1rlcMode" char(250) , "qciTab1rlcProfIdx" char(250) , "qciTab1schedulBSD" char(250) , "qciTab1schedulPrio" char(250) , "qciTab2delayTarget" char(250) , "qciTab2drxProfileIndex" char(250) , "qciTab2dscp" char(250) , "qciTab2enforceTtiBundling" char(250) , "qciTab2l2OHFactorDL" char(250) , "qciTab2l2OHFactorUL" char(250) , "qciTab2lcgid" char(250) , "qciTab2maxGbrDl" char(250) , "qciTab2maxGbrUl" char(250) , "qciTab2pdcpProfIdx" char(250) , "qciTab2prio" char(250) , "qciTab2qci" char(250) , "qciTab2qciSupp" char(250) , "qciTab2resType" char(250) , "qciTab2rlcMode" char(250) , "qciTab2rlcProfIdx" char(250) , "qciTab2schedulBSD" char(250) , "qciTab2schedulPrio" char(250) , "qciTab3delayTarget" char(250) , "qciTab3drxProfileIndex" char(250) , "qciTab3dscp" char(250) , "qciTab3enforceTtiBundling" char(250) , "qciTab3l2OHFactorDL" char(250) , "qciTab3l2OHFactorUL" char(250) , "qciTab3lcgid" char(250) , "qciTab3maxGbrDl" char(250) , "qciTab3maxGbrUl" char(250) , "qciTab3pdcpProfIdx" char(250) , "qciTab3prio" char(250) , "qciTab3qci" char(250) , "qciTab3qciSupp" char(250) , "qciTab3resType" char(250) , "qciTab3rlcMode" char(250) , "qciTab3rlcProfIdx" char(250) , "qciTab3schedulBSD" char(250) , "qciTab3schedulPrio" char(250) , "qciTab4delayTarget" char(250) , "qciTab4drxProfileIndex" char(250) , "qciTab4dscp" char(250) , "qciTab4enforceTtiBundling" char(250) , "qciTab4l2OHFactorDL" char(250) , "qciTab4l2OHFactorUL" char(250) , "qciTab4lcgid" char(250) , "qciTab4maxGbrDl" char(250) , "qciTab4maxGbrUl" char(250) , "qciTab4pdcpProfIdx" char(250) , "qciTab4prio" char(250) , "qciTab4qci" char(250) , "qciTab4qciSupp" char(250) , "qciTab4resType" char(250) , "qciTab4rlcMode" char(250) , "qciTab4rlcProfIdx" char(250) , "qciTab4schedulBSD" char(250) , "qciTab4schedulPrio" char(250) , "qciTab5drxProfileIndex" char(250) , "qciTab5dscp" char(250) , "qciTab5enforceTtiBundling" char(250) , "qciTab5lcgid" char(250) , "qciTab5pdcpProfIdx" char(250) , "qciTab5prio" char(250) , "qciTab5qci" char(250) , "qciTab5qciSupp" char(250) , "qciTab5resType" char(250) , "qciTab5rlcMode" char(250) , "qciTab5rlcProfIdx" char(250) , "qciTab5schedulBSD" char(250) , "qciTab5schedulPrio" char(250) , "qciTab5schedulType" char(250) , "qciTab5schedulWeight" char(250) , "qciTab6drxProfileIndex" char(250) , "qciTab6dscp" char(250) , "qciTab6enforceTtiBundling" char(250) , "qciTab6lcgid" char(250) , "qciTab6pdcpProfIdx" char(250) , "qciTab6prio" char(250) , "qciTab6qci" char(250) , "qciTab6qciSupp" char(250) , "qciTab6resType" char(250) , "qciTab6rlcMode" char(250) , "qciTab6rlcProfIdx" char(250) , "qciTab6schedulBSD" char(250) , "qciTab6schedulPrio" char(250) , "qciTab6schedulWeight" char(250) , "qciTab7drxProfileIndex" char(250) , "qciTab7dscp" char(250) , "qciTab7enforceTtiBundling" char(250) , "qciTab7lcgid" char(250) , "qciTab7pdcpProfIdx" char(250) , "qciTab7prio" char(250) , "qciTab7qci" char(250) , "qciTab7qciSupp" char(250) , "qciTab7resType" char(250) , "qciTab7rlcMode" char(250) , "qciTab7rlcProfIdx" char(250) , "qciTab7schedulBSD" char(250) , "qciTab7schedulPrio" char(250) , "qciTab7schedulWeight" char(250) , "qciTab8drxProfileIndex" char(250) , "qciTab8dscp" char(250) , "qciTab8enforceTtiBundling" char(250) , "qciTab8lcgid" char(250) , "qciTab8pdcpProfIdx" char(250) , "qciTab8prio" char(250) , "qciTab8qci" char(250) , "qciTab8qciSupp" char(250) , "qciTab8resType" char(250) , "qciTab8rlcMode" char(250) , "qciTab8rlcProfIdx" char(250) , "qciTab8schedulBSD" char(250) , "qciTab8schedulPrio" char(250) , "qciTab8schedulWeight" char(250) , "qciTab9drxProfileIndex" char(250) , "qciTab9dscp" char(250) , "qciTab9enforceTtiBundling" char(250) , "qciTab9lcgid" char(250) , "qciTab9pdcpProfIdx" char(250) , "qciTab9prio" char(250) , "qciTab9qci" char(250) , "qciTab9qciSupp" char(250) , "qciTab9resType" char(250) , "qciTab9rlcMode" char(250) , "qciTab9rlcProfIdx" char(250) , "qciTab9schedulBSD" char(250) , "qciTab9schedulPrio" char(250) , "qciTab9schedulWeight" char(250) , "rachAccessForHoFromUtran" char(250) , "recoveryResetDelay" char(250) , "rlcProf1pollPdu" char(250) , "rlcProf1rlcProfileId" char(250) , "rlcProf1tPollRetr" char(250) , "rlcProf1tProhib" char(250) , "rlcProf1tReord" char(250) , "rlcProf101rlcProfileId" char(250) , "rlcProf101snFieldLengthDL" char(250) , "rlcProf101snFieldLengthUL" char(250) , "rlcProf101tReord" char(250) , "rlcProf102rlcProfileId" char(250) , "rlcProf102snFieldLengthDL" char(250) , "rlcProf102snFieldLengthUL" char(250) , "rlcProf102tReord" char(250) , "rlcProf103rlcProfileId" char(250) , "rlcProf103snFieldLengthDL" char(250) , "rlcProf103snFieldLengthUL" char(250) , "rlcProf103tReord" char(250) , "rlcProf104rlcProfileId" char(250) , "rlcProf104snFieldLengthDL" char(250) , "rlcProf104snFieldLengthUL" char(250) , "rlcProf104tReord" char(250) , "rlcProf2pollPdu" char(250) , "rlcProf2rlcProfileId" char(250) , "rlcProf2tPollRetr" char(250) , "rlcProf2tProhib" char(250) , "rlcProf2tReord" char(250) , "rlcProf3pollPdu" char(250) , "rlcProf3rlcProfileId" char(250) , "rlcProf3tPollRetr" char(250) , "rlcProf3tProhib" char(250) , "rlcProf3tReord" char(250) , "rlcProf4pollPdu" char(250) , "rlcProf4rlcProfileId" char(250) , "rlcProf4tPollRetr" char(250) , "rlcProf4tProhib" char(250) , "rlcProf4tReord" char(250) , "rlcProf5pollPdu" char(250) , "rlcProf5rlcProfileId" char(250) , "rlcProf5tPollRetr" char(250) , "rlcProf5tProhib" char(250) , "rlcProf5tReord" char(250) , "s1InducedCellDeactDelayTime" char(250) , "sCellActivationCyclePeriod" char(250) , "sCellActivationMethod" char(250) , "sCellDeactivationTimereNB" char(250) , "sCellpCellHARQFdbkUsage" char(250) , "shutdownStepAmount" char(250) , "shutdownWindow" char(250) , "supportedNumOfLnadj" char(250) , "tRimKaG" char(250) , "tRimPollG" char(250) , "tRimRirG" char(250) , "tS1RelPrepG" char(250) , "tS1RelPrepL" char(250) , "tS1RelPrepU" char(250) , "tagMaxAM" char(250) , "tagMaxUM" char(250) , "timDelACContPreempt" char(250) , "ttiBundlingDuringHoMeas" char(250) , "txPathFailureMode" char(250) , "ulpcRssiMaxIAw" char(250) , "voiceSuppMatchInd" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.LNBTS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "mcc" char(250) , "mnc" char(250) , "name" char(250) , "act1xCsfb" char(250) , "act8EpsBearers" char(250) , "actCMAS" char(250) , "actCSFBRedir" char(250) , "actCellTrace" char(250) , "actCellTraceWithIMSI" char(250) , "actCiphering" char(250) , "actCompChecks" char(250) , "actConvVoice" char(250) , "actCplaneOvlHandling" char(250) , "actCsfbPsHoToUtra" char(250) , "actDLCAggr" char(250) , "actDistributedSite" char(250) , "actDualBand" char(250) , "actDualCarrier" char(250) , "actDualRx1xCsfb" char(250) , "actERabModify" char(250) , "actETWS" char(250) , "actEmerCallRedir" char(250) , "actEnhAcAndGbrServices" char(250) , "actFlexBbUsage" char(250) , "actGsmRedirWithSI" char(250) , "actHOtoHrpd" char(250) , "actHOtoWcdma" char(250) , "actHeNBMobility" char(250) , "actHighPrioServices" char(250) , "actHighRrc" char(250) , "actHoFromUtran" char(250) , "actIMSEmerSessR9" char(250) , "actIdleLB" char(250) , "actIfHo" char(250) , "actImmHRPD" char(250) , "actImmXrtt" char(250) , "actInterFreqLB" char(250) , "actIntraFreqLoadBal" char(250) , "actLPPaOtdoa" char(250) , "actLTES1Ho" char(250) , "actLocRep" char(250) , "actMDTCellTrace" char(250) , "actMFBI" char(250) , "actMultBearers" char(250) , "actMultGbrBearers" char(250) , "actNonGbrServiceDiff" char(250) , "actOTNRecovery" char(250) , "actOperatorQCI" char(250) , "actOperatorQCIGBR" char(250) , "actOptMmeSelection" char(250) , "actPdcpRohc" char(250) , "actRIMforGSM" char(250) , "actRedirect" char(250) , "actRfChaining" char(250) , "actS1Flex" char(250) , "actS1OlHandling" char(250) , "actSelMobPrf" char(250) , "actSrvccToGsm" char(250) , "actSrvccToWcdma" char(250) , "actSubscriberTrace" char(250) , "actUeBasedAnrInterFreqLte" char(250) , "actUeBasedAnrIntraFreqLte" char(250) , "actUeBasedAnrUtran" char(250) , "actUlCoMp" char(250) , "actZUC" char(250) , "acteNACCtoGSM" char(250) , "amRlcPBTab1dlPollByte" char(250) , "amRlcPBTab1ueCategory" char(250) , "amRlcPBTab1ulPollByte" char(250) , "amRlcPBTab2dlPollByte" char(250) , "amRlcPBTab2ueCategory" char(250) , "amRlcPBTab2ulPollByte" char(250) , "amRlcPBTab3dlPollByte" char(250) , "amRlcPBTab3ueCategory" char(250) , "amRlcPBTab3ulPollByte" char(250) , "amRlcPBTab4dlPollByte" char(250) , "amRlcPBTab4ueCategory" char(250) , "amRlcPBTab4ulPollByte" char(250) , "amRlcPBTab5dlPollByte" char(250) , "amRlcPBTab5ueCategory" char(250) , "amRlcPBTab5ulPollByte" char(250) , "anrIfTRSC" char(250) , "anrOmExtEnable" char(250) , "anrRobLevel" char(250) , "caMinDlAmbr" char(250) , "eea0" char(250) , "eea1" char(250) , "eea2" char(250) , "eea3" char(250) , "congWeightAlg" char(250) , "defProfIdxAM" char(250) , "defProfIdxUM" char(250) , "enableAutoLock" char(250) , "enableGrflShdn" char(250) , "enbName" char(250) , "etwsPrimNotifBcDur" char(250) , "hpsSessArpMax" char(250) , "hpsSessArpMin" char(250) , "eia0" char(250) , "eia1" char(250) , "eia2" char(250) , "eia3" char(250) , "keyRefrMarg" char(250) , "maxNumOfLnadjLimit" char(250) , "maxNumPreEmptions" char(250) , "maxNumX2LinksIn" char(250) , "maxNumX2LinksOut" char(250) , "minNotActivatedUtraRSCFS" char(250) , "moProfileSelect" char(250) , "nRimRirG" char(250) , "nullFallback" char(250) , "operationalState" char(250) , "otnRecoveryPeriod" char(250) , "actInHORed" char(250) , "actRrcConnRed" char(250) , "pbrNonGbr" char(250) , "pdcpProf1pdcpProfileId" char(250) , "pdcpProf1statusRepReq" char(250) , "pdcpProf1tDiscard" char(250) , "pdcpProf101pdcpProfileId" char(250) , "pdcpProf101rohcMaxCid" char(250) , "pdcpProf101snSize" char(250) , "pdcpProf101tDiscard" char(250) , "pdcpProf102pdcpProfileId" char(250) , "pdcpProf102snSize" char(250) , "pdcpProf102tDiscard" char(250) , "pdcpProf103pdcpProfileId" char(250) , "pdcpProf103snSize" char(250) , "pdcpProf103tDiscard" char(250) , "pdcpProf104pdcpProfileId" char(250) , "pdcpProf104snSize" char(250) , "pdcpProf104tDiscard" char(250) , "pdcpProf2pdcpProfileId" char(250) , "pdcpProf2statusRepReq" char(250) , "pdcpProf2tDiscard" char(250) , "pdcpProf3pdcpProfileId" char(250) , "pdcpProf3statusRepReq" char(250) , "pdcpProf3tDiscard" char(250) , "pdcpProf4pdcpProfileId" char(250) , "pdcpProf4statusRepReq" char(250) , "pdcpProf4tDiscard" char(250) , "pdcpProf5pdcpProfileId" char(250) , "pdcpProf5statusRepReq" char(250) , "pdcpProf5tDiscard" char(250) , "prioTopoHO" char(250) , "prohibitLBHOTimer" char(250) , "prohibitPsHOtoWcdma" char(250) , "pwsWithEmAreaId" char(250) , "qciTab1delayTarget" char(250) , "qciTab1drxProfileIndex" char(250) , "qciTab1dscp" char(250) , "qciTab1enforceTtiBundling" char(250) , "qciTab1lcgid" char(250) , "qciTab1maxGbrDl" char(250) , "qciTab1maxGbrUl" char(250) , "qciTab1pdcpProfIdx" char(250) , "qciTab1prio" char(250) , "qciTab1qci" char(250) , "qciTab1qciSupp" char(250) , "qciTab1resType" char(250) , "qciTab1rlcMode" char(250) , "qciTab1rlcProfIdx" char(250) , "qciTab1schedulBSD" char(250) , "qciTab1schedulPrio" char(250) , "qciTab2delayTarget" char(250) , "qciTab2drxProfileIndex" char(250) , "qciTab2dscp" char(250) , "qciTab2enforceTtiBundling" char(250) , "qciTab2l2OHFactorDL" char(250) , "qciTab2l2OHFactorUL" char(250) , "qciTab2lcgid" char(250) , "qciTab2maxGbrDl" char(250) , "qciTab2maxGbrUl" char(250) , "qciTab2pdcpProfIdx" char(250) , "qciTab2prio" char(250) , "qciTab2qci" char(250) , "qciTab2qciSupp" char(250) , "qciTab2resType" char(250) , "qciTab2rlcMode" char(250) , "qciTab2rlcProfIdx" char(250) , "qciTab2schedulBSD" char(250) , "qciTab2schedulPrio" char(250) , "qciTab3delayTarget" char(250) , "qciTab3drxProfileIndex" char(250) , "qciTab3dscp" char(250) , "qciTab3enforceTtiBundling" char(250) , "qciTab3l2OHFactorDL" char(250) , "qciTab3l2OHFactorUL" char(250) , "qciTab3lcgid" char(250) , "qciTab3maxGbrDl" char(250) , "qciTab3maxGbrUl" char(250) , "qciTab3pdcpProfIdx" char(250) , "qciTab3prio" char(250) , "qciTab3qci" char(250) , "qciTab3qciSupp" char(250) , "qciTab3resType" char(250) , "qciTab3rlcMode" char(250) , "qciTab3rlcProfIdx" char(250) , "qciTab3schedulBSD" char(250) , "qciTab3schedulPrio" char(250) , "qciTab4delayTarget" char(250) , "qciTab4drxProfileIndex" char(250) , "qciTab4dscp" char(250) , "qciTab4enforceTtiBundling" char(250) , "qciTab4l2OHFactorDL" char(250) , "qciTab4l2OHFactorUL" char(250) , "qciTab4lcgid" char(250) , "qciTab4maxGbrDl" char(250) , "qciTab4maxGbrUl" char(250) , "qciTab4pdcpProfIdx" char(250) , "qciTab4prio" char(250) , "qciTab4qci" char(250) , "qciTab4qciSupp" char(250) , "qciTab4resType" char(250) , "qciTab4rlcMode" char(250) , "qciTab4rlcProfIdx" char(250) , "qciTab4schedulBSD" char(250) , "qciTab4schedulPrio" char(250) , "qciTab5drxProfileIndex" char(250) , "qciTab5dscp" char(250) , "qciTab5enforceTtiBundling" char(250) , "qciTab5lcgid" char(250) , "qciTab5pdcpProfIdx" char(250) , "qciTab5prio" char(250) , "qciTab5qci" char(250) , "qciTab5qciSupp" char(250) , "qciTab5resType" char(250) , "qciTab5rlcMode" char(250) , "qciTab5rlcProfIdx" char(250) , "qciTab5schedulBSD" char(250) , "qciTab5schedulPrio" char(250) , "qciTab5schedulType" char(250) , "qciTab5schedulWeight" char(250) , "qciTab6drxProfileIndex" char(250) , "qciTab6dscp" char(250) , "qciTab6enforceTtiBundling" char(250) , "qciTab6lcgid" char(250) , "qciTab6pdcpProfIdx" char(250) , "qciTab6prio" char(250) , "qciTab6qci" char(250) , "qciTab6qciSupp" char(250) , "qciTab6resType" char(250) , "qciTab6rlcMode" char(250) , "qciTab6rlcProfIdx" char(250) , "qciTab6schedulBSD" char(250) , "qciTab6schedulPrio" char(250) , "qciTab6schedulWeight" char(250) , "qciTab7drxProfileIndex" char(250) , "qciTab7dscp" char(250) , "qciTab7enforceTtiBundling" char(250) , "qciTab7lcgid" char(250) , "qciTab7pdcpProfIdx" char(250) , "qciTab7prio" char(250) , "qciTab7qci" char(250) , "qciTab7qciSupp" char(250) , "qciTab7resType" char(250) , "qciTab7rlcMode" char(250) , "qciTab7rlcProfIdx" char(250) , "qciTab7schedulBSD" char(250) , "qciTab7schedulPrio" char(250) , "qciTab7schedulWeight" char(250) , "qciTab8drxProfileIndex" char(250) , "qciTab8dscp" char(250) , "qciTab8enforceTtiBundling" char(250) , "qciTab8lcgid" char(250) , "qciTab8pdcpProfIdx" char(250) , "qciTab8prio" char(250) , "qciTab8qci" char(250) , "qciTab8qciSupp" char(250) , "qciTab8resType" char(250) , "qciTab8rlcMode" char(250) , "qciTab8rlcProfIdx" char(250) , "qciTab8schedulBSD" char(250) , "qciTab8schedulPrio" char(250) , "qciTab8schedulWeight" char(250) , "qciTab9drxProfileIndex" char(250) , "qciTab9dscp" char(250) , "qciTab9enforceTtiBundling" char(250) , "qciTab9lcgid" char(250) , "qciTab9pdcpProfIdx" char(250) , "qciTab9prio" char(250) , "qciTab9qci" char(250) , "qciTab9qciSupp" char(250) , "qciTab9resType" char(250) , "qciTab9rlcMode" char(250) , "qciTab9rlcProfIdx" char(250) , "qciTab9schedulBSD" char(250) , "qciTab9schedulPrio" char(250) , "qciTab9schedulWeight" char(250) , "rachAccessForHoFromUtran" char(250) , "recoveryResetDelay" char(250) , "rlcProf1pollPdu" char(250) , "rlcProf1rlcProfileId" char(250) , "rlcProf1tPollRetr" char(250) , "rlcProf1tProhib" char(250) , "rlcProf1tReord" char(250) , "rlcProf101rlcProfileId" char(250) , "rlcProf101snFieldLengthDL" char(250) , "rlcProf101snFieldLengthUL" char(250) , "rlcProf101tReord" char(250) , "rlcProf102rlcProfileId" char(250) , "rlcProf102snFieldLengthDL" char(250) , "rlcProf102snFieldLengthUL" char(250) , "rlcProf102tReord" char(250) , "rlcProf103rlcProfileId" char(250) , "rlcProf103snFieldLengthDL" char(250) , "rlcProf103snFieldLengthUL" char(250) , "rlcProf103tReord" char(250) , "rlcProf104rlcProfileId" char(250) , "rlcProf104snFieldLengthDL" char(250) , "rlcProf104snFieldLengthUL" char(250) , "rlcProf104tReord" char(250) , "rlcProf2pollPdu" char(250) , "rlcProf2rlcProfileId" char(250) , "rlcProf2tPollRetr" char(250) , "rlcProf2tProhib" char(250) , "rlcProf2tReord" char(250) , "rlcProf3pollPdu" char(250) , "rlcProf3rlcProfileId" char(250) , "rlcProf3tPollRetr" char(250) , "rlcProf3tProhib" char(250) , "rlcProf3tReord" char(250) , "rlcProf4pollPdu" char(250) , "rlcProf4rlcProfileId" char(250) , "rlcProf4tPollRetr" char(250) , "rlcProf4tProhib" char(250) , "rlcProf4tReord" char(250) , "rlcProf5pollPdu" char(250) , "rlcProf5rlcProfileId" char(250) , "rlcProf5tPollRetr" char(250) , "rlcProf5tProhib" char(250) , "rlcProf5tReord" char(250) , "s1InducedCellDeactDelayTime" char(250) , "sCellActivationCyclePeriod" char(250) , "sCellActivationMethod" char(250) , "sCellDeactivationTimereNB" char(250) , "sCellpCellHARQFdbkUsage" char(250) , "shutdownStepAmount" char(250) , "shutdownWindow" char(250) , "supportedNumOfLnadj" char(250) , "tRimKaG" char(250) , "tRimPollG" char(250) , "tRimRirG" char(250) , "tS1RelPrepG" char(250) , "tS1RelPrepL" char(250) , "tS1RelPrepU" char(250) , "tagMaxAM" char(250) , "tagMaxUM" char(250) , "timDelACContPreempt" char(250) , "ttiBundlingDuringHoMeas" char(250) , "txPathFailureMode" char(250) , "ulpcRssiMaxIAw" char(250) , "voiceSuppMatchInd" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.LNCEL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "deploymentType" char(250) , "furtherPlmnIdL_mcc_mnc_cellReserve" char(250) , "mcc" char(250) , "mnc" char(250) , "name" char(250) , "a1TimeToTriggerDeactInterMeas" char(250) , "a2TimeToTriggerActGERANMeas" char(250) , "a2TimeToTriggerActHrpdMeas" char(250) , "a2TimeToTriggerActInterFreqMeas" char(250) , "a2TimeToTriggerActWcdmaMeas" char(250) , "a2TimeToTriggerRedirect" char(250) , "a3Offset" char(250) , "a3ReportInterval" char(250) , "a3TimeToTrigger" char(250) , "a5ReportInterval" char(250) , "a5TimeToTrigger" char(250) , "actDlsOldtc" char(250) , "actDlsVoicePacketAgg" char(250) , "actDrx" char(250) , "actFastMimoSwitch" char(250) , "actLdPdcch" char(250) , "actModulationSchemeUL" char(250) , "actNoIntraBandIFMeasurements" char(250) , "actOlLaPdcch" char(250) , "actOtdoa" char(250) , "actPrsTxDiv" char(250) , "actPuschMask" char(250) , "actRepeaterMode" char(250) , "actSixIfMeasurements" char(250) , "actSmartDrx" char(250) , "actSuperCell" char(250) , "actTtiBundling" char(250) , "actUlGrpHop" char(250) , "actUlLnkAdp" char(250) , "actUlpcMethod" char(250) , "addAUeRrHo" char(250) , "addAUeTcHo" char(250) , "addEmergencySessions" char(250) , "addGbrTrafficRrHo" char(250) , "addGbrTrafficTcHo" char(250) , "addNumDrbRadioReasHo" char(250) , "addNumDrbTimeCriticalHo" char(250) , "addNumQci1DrbRadioReasHo" char(250) , "addNumQci1DrbTimeCriticalHo" char(250) , "addSpectrEmi" char(250) , "administrativeState" char(250) , "anrUtraRscpThres" char(250) , "applyOutOfSyncState" char(250) , "blankedPucch" char(250) , "tC2KMeasReport" char(250) , "tC2KRelocPrep" char(250) , "tC2kRelocExec" char(250) , "tULHOPrepTransfer" char(250) , "celResTiFHM" char(250) , "celResTiFMM" char(250) , "cellBarred" char(250) , "cellCapClass" char(250) , "cellIndOffServ" char(250) , "cellName" char(250) , "cellReSelPrio" char(250) , "cellResourceSharingMode" char(250) , "cellSelectionInfoV920qQualMinR9" char(250) , "cellSrPeriod" char(250) , "cellType" char(250) , "cqiAperEnable" char(250) , "cqiAperMode" char(250) , "cqiPerNp" char(250) , "cqiPerSbCycK" char(250) , "cqiPerSimulAck" char(250) , "dFpucchF1" char(250) , "dFpucchF1b" char(250) , "dFpucchF2" char(250) , "dFpucchF2a" char(250) , "dFpucchF2b" char(250) , "dSrTransMax" char(250) , "defPagCyc" char(250) , "deltaMargin" char(250) , "deltaPreMsg3" char(250) , "deltaPucchShift" char(250) , "deltaTfEnabled" char(250) , "dl64QamEnable" char(250) , "dlCellPwrRed" char(250) , "dlChBw" char(250) , "dlInterferenceEnable" char(250) , "dlInterferenceLevel" char(250) , "dlInterferenceModulation" char(250) , "dlMimoMode" char(250) , "dlOlqcEnable" char(250) , "dlPathlossChg" char(250) , "dlPcfichBoost" char(250) , "dlPhichBoost" char(250) , "dlRsBoost" char(250) , "dlTargetBler" char(250) , "dlamcCqiDef" char(250) , "dlamcEnable" char(250) , "dlpcMimoComp" char(250) , "dlsDciCch" char(250) , "dlsFdAlg" char(250) , "dlsOldtcTarget" char(250) , "dlsUsePartPrb" char(250) , "drxApplyDeviceType" char(250) , "drxProfile1drxProfileIndex" char(250) , "drxProfile1drxProfilePriority" char(250) , "drxProfile101drxInactivityT" char(250) , "drxProfile101drxLongCycle" char(250) , "drxProfile101drxOnDuratT" char(250) , "drxProfile101drxProfileIndex" char(250) , "drxProfile101drxProfilePriority" char(250) , "drxProfile101drxRetransT" char(250) , "drxProfile102drxInactivityT" char(250) , "drxProfile102drxLongCycle" char(250) , "drxProfile102drxOnDuratT" char(250) , "drxProfile102drxProfileIndex" char(250) , "drxProfile102drxProfilePriority" char(250) , "drxProfile102drxRetransT" char(250) , "drxProfile103drxInactivityT" char(250) , "drxProfile103drxLongCycle" char(250) , "drxProfile103drxOnDuratT" char(250) , "drxProfile103drxProfileIndex" char(250) , "drxProfile103drxProfilePriority" char(250) , "drxProfile103drxRetransT" char(250) , "drxProfile2drxInactivityT" char(250) , "drxProfile2drxLongCycle" char(250) , "drxProfile2drxOnDuratT" char(250) , "drxProfile2drxProfileIndex" char(250) , "drxProfile2drxProfilePriority" char(250) , "drxProfile2drxRetransT" char(250) , "drxProfile3drxInactivityT" char(250) , "drxProfile3drxLongCycle" char(250) , "drxProfile3drxOnDuratT" char(250) , "drxProfile3drxProfileIndex" char(250) , "drxProfile3drxProfilePriority" char(250) , "drxProfile3drxRetransT" char(250) , "drxProfile4drxInactivityT" char(250) , "drxProfile4drxLongCycle" char(250) , "drxProfile4drxOnDuratT" char(250) , "drxProfile4drxProfileIndex" char(250) , "drxProfile4drxProfilePriority" char(250) , "drxProfile4drxRetransT" char(250) , "drxProfile5drxInactivityT" char(250) , "drxProfile5drxLongCycle" char(250) , "drxProfile5drxOnDuratT" char(250) , "drxProfile5drxProfileIndex" char(250) , "drxProfile5drxProfilePriority" char(250) , "drxProfile5drxRetransT" char(250) , "drxSmartProfile2drxInactivityT" char(250) , "drxSmartProfile2drxLongCycle" char(250) , "drxSmartProfile2drxOnDuratT" char(250) , "drxSmartProfile2drxProfileIndex" char(250) , "drxSmartProfile2drxProfilePriority" char(250) , "drxSmartProfile2drxRetransT" char(250) , "drxSmartProfile2drxShortCycle" char(250) , "drxSmartProfile2drxShortCycleT" char(250) , "drxSmartProfile2smartStInactFactor" char(250) , "drxSmartProfile3drxInactivityT" char(250) , "drxSmartProfile3drxLongCycle" char(250) , "drxSmartProfile3drxOnDuratT" char(250) , "drxSmartProfile3drxProfileIndex" char(250) , "drxSmartProfile3drxProfilePriority" char(250) , "drxSmartProfile3drxRetransT" char(250) , "drxSmartProfile3drxShortCycle" char(250) , "drxSmartProfile3drxShortCycleT" char(250) , "drxSmartProfile3smartStInactFactor" char(250) , "drxSmartProfile4drxInactivityT" char(250) , "drxSmartProfile4drxLongCycle" char(250) , "drxSmartProfile4drxOnDuratT" char(250) , "drxSmartProfile4drxProfileIndex" char(250) , "drxSmartProfile4drxProfilePriority" char(250) , "drxSmartProfile4drxRetransT" char(250) , "drxSmartProfile4drxShortCycle" char(250) , "drxSmartProfile4drxShortCycleT" char(250) , "drxSmartProfile4smartStInactFactor" char(250) , "drxSmartProfile5drxInactivityT" char(250) , "drxSmartProfile5drxLongCycle" char(250) , "drxSmartProfile5drxOnDuratT" char(250) , "drxSmartProfile5drxProfileIndex" char(250) , "drxSmartProfile5drxProfilePriority" char(250) , "drxSmartProfile5drxRetransT" char(250) , "drxSmartProfile5drxShortCycle" char(250) , "drxSmartProfile5drxShortCycleT" char(250) , "drxSmartProfile5smartStInactFactor" char(250) , "eCallAcBarred" char(250) , "eUlLaAtbPeriod" char(250) , "eUlLaBlerAveWin" char(250) , "eUlLaDeltaMcs" char(250) , "eUlLaLowMcsThr" char(250) , "eUlLaLowPrbThr" char(250) , "eUlLaPrbIncDecFactor" char(250) , "earfcnDL" char(250) , "earfcnUL" char(250) , "enableAmcPdcch" char(250) , "enableBetterCellHo" char(250) , "enableCovHo" char(250) , "enableDl16Qam" char(250) , "enableLowAgg" char(250) , "enablePcPdcch" char(250) , "eutraCelId" char(250) , "altitude" char(250) , "confidence" char(250) , "degreesOfLatitude" char(250) , "degreesOfLongitude" char(250) , "directionOfAltitude" char(250) , "latitudeSign" char(250) , "orientationOfMajorAxis" char(250) , "uncertaintyAltitude" char(250) , "uncertaintySemiMajor" char(250) , "uncertaintySemiMinor" char(250) , "fUlLAAtbTrigThr" char(250) , "filterCoeff" char(250) , "filterCoefficientCSFBCpichEcn0" char(250) , "filterCoefficientCSFBCpichRscp" char(250) , "filterCoefficientCpichEcn0" char(250) , "filterCoefficientCpichRscp" char(250) , "filterCoefficientRSRP" char(250) , "filterCoefficientRSRQ" char(250) , "filterCoefficientRSSI" char(250) , "gbrCongHandling" char(250) , "grpAssigPUSCH" char(250) , "harqMaxMsg3" char(250) , "harqMaxTrDl" char(250) , "harqMaxTrUl" char(250) , "harqMaxTrUlTtiBundling" char(250) , "hopModePusch" char(250) , "tC2KRelocOverallHrpd" char(250) , "tC2KRelocPrepHrpd" char(250) , "tUlHoPrepTransferHrpd" char(250) , "hysA3Offset" char(250) , "hysThreshold2GERAN" char(250) , "hysThreshold2Hrpd" char(250) , "hysThreshold2InterFreq" char(250) , "hysThreshold2Wcdma" char(250) , "hysThreshold2a" char(250) , "hysThreshold3" char(250) , "hysThreshold4" char(250) , "iFLBBearCheckTimer" char(250) , "iFLBHighLoadGBRDL" char(250) , "iFLBHighLoadNonGBRDL" char(250) , "iFLBHighLoadPdcch" char(250) , "iFLBNomNumPrb" char(250) , "iFLBRetryTimer" char(250) , "iFLBTargetLoadGBRDL" char(250) , "iFLBTargetLoadNonGBRDL" char(250) , "iFLBTargetLoadPdcch" char(250) , "idleLBCelResWeight" char(250) , "idleLBPercentageOfUes" char(250) , "ilReacTimerUl" char(250) , "inactivityTimer" char(250) , "iniMcsDl" char(250) , "iniMcsUl" char(250) , "iniPrbsUl" char(250) , "intrFrqCelRes" char(250) , "intraPresAntP" char(250) , "lcrId" char(250) , "loadBalancingProfile" char(250) , "lowerMarginCIO" char(250) , "maxBitrateDl" char(250) , "maxBitrateUl" char(250) , "maxCrPgDl" char(250) , "maxCrRa4Dl" char(250) , "maxCrRaDl" char(250) , "maxCrSibDl" char(250) , "maxGbrTrafficLimit" char(250) , "maxNrSymPdcch" char(250) , "maxNumActDrb" char(250) , "maxNumActUE" char(250) , "maxNumCaConfUeDc" char(250) , "maxNumQci1Drb" char(250) , "maxNumRrc" char(250) , "maxNumRrcEmergency" char(250) , "maxNumUeDl" char(250) , "maxNumUeUl" char(250) , "mbrSelector" char(250) , "measQuantityCSFBUtra" char(250) , "measQuantityUtra" char(250) , "mimoClCqiThD" char(250) , "mimoClCqiThU" char(250) , "mimoClRiThD" char(250) , "mimoClRiThU" char(250) , "mimoOlCqiThD" char(250) , "mimoOlCqiThU" char(250) , "mimoOlRiThD" char(250) , "mimoOlRiThU" char(250) , "minBitrateDl" char(250) , "minBitrateUl" char(250) , "mobStateParamNCelChgHgh" char(250) , "mobStateParamNCelChgMed" char(250) , "mobStateParamTEval" char(250) , "mobStateParamTHystNorm" char(250) , "modPeriodCoeff" char(250) , "n1PucchAn" char(250) , "n310" char(250) , "n311" char(250) , "nCqiRb" char(250) , "offsetFreqIntra" char(250) , "operationalState" char(250) , "p0NomPucch" char(250) , "p0NomPusch" char(250) , "pMax" char(250) , "pagingNb" char(250) , "pdcchAggDefUe" char(250) , "pdcchAggMsg4" char(250) , "pdcchAggPaging" char(250) , "pdcchAggPreamb" char(250) , "pdcchAggRaresp" char(250) , "pdcchAggSib" char(250) , "pdcchAlpha" char(250) , "pdcchCqiShift" char(250) , "pdcchHarqTargetBler" char(250) , "pdcchUlDlBal" char(250) , "periodicCqiFeedbackType" char(250) , "activateMeas" char(250) , "measurementType" char(250) , "reportAmount" char(250) , "reportInterval" char(250) , "phichDur" char(250) , "phichRes" char(250) , "phyCellId" char(250) , "prachCS" char(250) , "prachConfIndex" char(250) , "prachFreqOff" char(250) , "prachHsFlag" char(250) , "prachPwrRamp" char(250) , "preambTxMax" char(250) , "primPlmnCellres" char(250) , "prsConfigurationIndex" char(250) , "prsMutingInfo" char(250) , "prsMutingInfoPatternLen" char(250) , "prsNumDlFrames" char(250) , "prsPowerBoost" char(250) , "pucchNAnCs" char(250) , "puschAckOffI" char(250) , "puschCqiOffI" char(250) , "puschRiOffI" char(250) , "qHyst" char(250) , "qQualMinR9" char(250) , "qrxlevmin" char(250) , "qrxlevminintraF" char(250) , "raContResoT" char(250) , "raLargeMcsUl" char(250) , "raMsgPoffGrB" char(250) , "raNondedPreamb" char(250) , "raPreGrASize" char(250) , "raRespWinSize" char(250) , "raSmallMcsUl" char(250) , "raSmallVolUl" char(250) , "rand" char(250) , "rcAmbrMgnDl" char(250) , "rcAmbrMgnUl" char(250) , "rcEnableDl" char(250) , "rcEnableUl" char(250) , "redBwEnDl" char(250) , "redBwMaxRbDl" char(250) , "redBwMaxRbUl" char(250) , "redBwMinRbUl" char(250) , "redBwRpaEnUl" char(250) , "riEnable" char(250) , "riPerM" char(250) , "riPerOffset" char(250) , "rootSeqIndex" char(250) , "a1ReportInterval" char(250) , "a2TimeToTriggerMobRsrq" char(250) , "hysThreshold2MobRsrq" char(250) , "threshold2MobRsrq" char(250) , "threshold2aRsrq" char(250) , "a2TimeToTriggerRedirectRsrq" char(250) , "hysThreshold4Rsrq" char(250) , "threshold4Rsrq" char(250) , "rttCellIdInfo" char(250) , "rttCsfbType" char(250) , "sIntraSearchPR9" char(250) , "sIntraSearchQR9" char(250) , "sIntrasearch" char(250) , "sNonIntraSearchPR9" char(250) , "sNonIntraSearchQR9" char(250) , "sNonIntrsearch" char(250) , "siWindowLen" char(250) , "sib2SchedulingsiMessagePeriodicity" char(250) , "sib2SchedulingsiMessageRepetition" char(250) , "sib2SchedulingsiMessageSibType" char(250) , "sib3SchedulingsiMessagePeriodicity" char(250) , "sib3SchedulingsiMessageRepetition" char(250) , "sib3SchedulingsiMessageSibType" char(250) , "sibSchedulingList_siMessagePeriodicity_siMessageRepetition_siMessageSibType" char(250) , "nCellChgHigh" char(250) , "nCellChgMed" char(250) , "qHystSfHigh" char(250) , "qHystSfMed" char(250) , "tEvaluation" char(250) , "tHystNormal" char(250) , "srbSchedWeightDl" char(250) , "srbSchedWeightUl" char(250) , "srsPwrOffset" char(250) , "stInactFactor" char(250) , "syncSigTxMode" char(250) , "t300" char(250) , "t301" char(250) , "t302" char(250) , "t304InterRAT" char(250) , "t304InterRATGsm" char(250) , "t304IntraLte" char(250) , "t304eNaccGsm" char(250) , "t310" char(250) , "t311" char(250) , "t320" char(250) , "tExtendedWait" char(250) , "tPageCorrInt" char(250) , "tPeriodicBsr" char(250) , "tPeriodicPhr" char(250) , "tProhibitPhr" char(250) , "tReTxBsrTime" char(250) , "tReselEutr" char(250) , "tStoreUeCntxt" char(250) , "taMaxOffset" char(250) , "taTimer" char(250) , "taTimerMargin" char(250) , "tac" char(250) , "threshSrvLow" char(250) , "threshold1" char(250) , "threshold2GERAN" char(250) , "threshold2Hrpd" char(250) , "threshold2InterFreq" char(250) , "threshold2Wcdma" char(250) , "threshold2a" char(250) , "threshold3" char(250) , "threshold3a" char(250) , "threshold4" char(250) , "timeToTriggerSfHigh" char(250) , "timeToTriggerSfMedium" char(250) , "ttiBundlingBlerTarget" char(250) , "ttiBundlingBlerThreshold" char(250) , "ttiBundlingSinrThreshold" char(250) , "ulChBw" char(250) , "ulCombinationMode" char(250) , "ulRsCs" char(250) , "ulTargetBler" char(250) , "ulamcAllTbEn" char(250) , "ulamcSwitchPer" char(250) , "ulatbEventPer" char(250) , "ulpcAlpha" char(250) , "p0NomPuschIAw" char(250) , "ulpcCEBalanceIAw" char(250) , "ulpcMinQualIAw" char(250) , "ulpcMinWaitForPc" char(250) , "ulpcRefPwrIAw" char(250) , "ulpcIniPrePwr" char(250) , "ulpcLowlevCch" char(250) , "ulpcLowqualCch" char(250) , "ulpcUplevCch" char(250) , "ulpcUpqualCch" char(250) , "ulpcLowlevSch" char(250) , "ulpcLowqualSch" char(250) , "ulpcUplevSch" char(250) , "ulpcUpqualSch" char(250) , "ulpcRarespTpc" char(250) , "ulpcReadPeriod" char(250) , "ulsFdPrbAssignAlg" char(250) , "ulsMaxPacketAgg" char(250) , "ulsMinRbPerUe" char(250) , "ulsMinTbs" char(250) , "ulsSchedMethod" char(250) , "deltaFPucchF1bCSr10" char(250) , "deltaFPucchF3r10" char(250) , "upperMarginCIO" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.LNCEL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "deploymentType" char(250) , "furtherPlmnIdL_mcc_mnc_cellReserve" char(250) , "mcc" char(250) , "mnc" char(250) , "name" char(250) , "a1TimeToTriggerDeactInterMeas" char(250) , "a2TimeToTriggerActGERANMeas" char(250) , "a2TimeToTriggerActHrpdMeas" char(250) , "a2TimeToTriggerActInterFreqMeas" char(250) , "a2TimeToTriggerActWcdmaMeas" char(250) , "a2TimeToTriggerRedirect" char(250) , "a3Offset" char(250) , "a3ReportInterval" char(250) , "a3TimeToTrigger" char(250) , "a5ReportInterval" char(250) , "a5TimeToTrigger" char(250) , "actDlsOldtc" char(250) , "actDlsVoicePacketAgg" char(250) , "actDrx" char(250) , "actFastMimoSwitch" char(250) , "actLdPdcch" char(250) , "actModulationSchemeUL" char(250) , "actNoIntraBandIFMeasurements" char(250) , "actOlLaPdcch" char(250) , "actOtdoa" char(250) , "actPrsTxDiv" char(250) , "actPuschMask" char(250) , "actRepeaterMode" char(250) , "actSixIfMeasurements" char(250) , "actSmartDrx" char(250) , "actSuperCell" char(250) , "actTtiBundling" char(250) , "actUlGrpHop" char(250) , "actUlLnkAdp" char(250) , "actUlpcMethod" char(250) , "addAUeRrHo" char(250) , "addAUeTcHo" char(250) , "addEmergencySessions" char(250) , "addGbrTrafficRrHo" char(250) , "addGbrTrafficTcHo" char(250) , "addNumDrbRadioReasHo" char(250) , "addNumDrbTimeCriticalHo" char(250) , "addNumQci1DrbRadioReasHo" char(250) , "addNumQci1DrbTimeCriticalHo" char(250) , "addSpectrEmi" char(250) , "administrativeState" char(250) , "anrUtraRscpThres" char(250) , "applyOutOfSyncState" char(250) , "blankedPucch" char(250) , "tC2KMeasReport" char(250) , "tC2KRelocPrep" char(250) , "tC2kRelocExec" char(250) , "tULHOPrepTransfer" char(250) , "celResTiFHM" char(250) , "celResTiFMM" char(250) , "cellBarred" char(250) , "cellCapClass" char(250) , "cellIndOffServ" char(250) , "cellName" char(250) , "cellReSelPrio" char(250) , "cellResourceSharingMode" char(250) , "cellSelectionInfoV920qQualMinR9" char(250) , "cellSrPeriod" char(250) , "cellType" char(250) , "cqiAperEnable" char(250) , "cqiAperMode" char(250) , "cqiPerNp" char(250) , "cqiPerSbCycK" char(250) , "cqiPerSimulAck" char(250) , "dFpucchF1" char(250) , "dFpucchF1b" char(250) , "dFpucchF2" char(250) , "dFpucchF2a" char(250) , "dFpucchF2b" char(250) , "dSrTransMax" char(250) , "defPagCyc" char(250) , "deltaMargin" char(250) , "deltaPreMsg3" char(250) , "deltaPucchShift" char(250) , "deltaTfEnabled" char(250) , "dl64QamEnable" char(250) , "dlCellPwrRed" char(250) , "dlChBw" char(250) , "dlInterferenceEnable" char(250) , "dlInterferenceLevel" char(250) , "dlInterferenceModulation" char(250) , "dlMimoMode" char(250) , "dlOlqcEnable" char(250) , "dlPathlossChg" char(250) , "dlPcfichBoost" char(250) , "dlPhichBoost" char(250) , "dlRsBoost" char(250) , "dlTargetBler" char(250) , "dlamcCqiDef" char(250) , "dlamcEnable" char(250) , "dlpcMimoComp" char(250) , "dlsDciCch" char(250) , "dlsFdAlg" char(250) , "dlsOldtcTarget" char(250) , "dlsUsePartPrb" char(250) , "drxApplyDeviceType" char(250) , "drxProfile1drxProfileIndex" char(250) , "drxProfile1drxProfilePriority" char(250) , "drxProfile101drxInactivityT" char(250) , "drxProfile101drxLongCycle" char(250) , "drxProfile101drxOnDuratT" char(250) , "drxProfile101drxProfileIndex" char(250) , "drxProfile101drxProfilePriority" char(250) , "drxProfile101drxRetransT" char(250) , "drxProfile102drxInactivityT" char(250) , "drxProfile102drxLongCycle" char(250) , "drxProfile102drxOnDuratT" char(250) , "drxProfile102drxProfileIndex" char(250) , "drxProfile102drxProfilePriority" char(250) , "drxProfile102drxRetransT" char(250) , "drxProfile103drxInactivityT" char(250) , "drxProfile103drxLongCycle" char(250) , "drxProfile103drxOnDuratT" char(250) , "drxProfile103drxProfileIndex" char(250) , "drxProfile103drxProfilePriority" char(250) , "drxProfile103drxRetransT" char(250) , "drxProfile2drxInactivityT" char(250) , "drxProfile2drxLongCycle" char(250) , "drxProfile2drxOnDuratT" char(250) , "drxProfile2drxProfileIndex" char(250) , "drxProfile2drxProfilePriority" char(250) , "drxProfile2drxRetransT" char(250) , "drxProfile3drxInactivityT" char(250) , "drxProfile3drxLongCycle" char(250) , "drxProfile3drxOnDuratT" char(250) , "drxProfile3drxProfileIndex" char(250) , "drxProfile3drxProfilePriority" char(250) , "drxProfile3drxRetransT" char(250) , "drxProfile4drxInactivityT" char(250) , "drxProfile4drxLongCycle" char(250) , "drxProfile4drxOnDuratT" char(250) , "drxProfile4drxProfileIndex" char(250) , "drxProfile4drxProfilePriority" char(250) , "drxProfile4drxRetransT" char(250) , "drxProfile5drxInactivityT" char(250) , "drxProfile5drxLongCycle" char(250) , "drxProfile5drxOnDuratT" char(250) , "drxProfile5drxProfileIndex" char(250) , "drxProfile5drxProfilePriority" char(250) , "drxProfile5drxRetransT" char(250) , "drxSmartProfile2drxInactivityT" char(250) , "drxSmartProfile2drxLongCycle" char(250) , "drxSmartProfile2drxOnDuratT" char(250) , "drxSmartProfile2drxProfileIndex" char(250) , "drxSmartProfile2drxProfilePriority" char(250) , "drxSmartProfile2drxRetransT" char(250) , "drxSmartProfile2drxShortCycle" char(250) , "drxSmartProfile2drxShortCycleT" char(250) , "drxSmartProfile2smartStInactFactor" char(250) , "drxSmartProfile3drxInactivityT" char(250) , "drxSmartProfile3drxLongCycle" char(250) , "drxSmartProfile3drxOnDuratT" char(250) , "drxSmartProfile3drxProfileIndex" char(250) , "drxSmartProfile3drxProfilePriority" char(250) , "drxSmartProfile3drxRetransT" char(250) , "drxSmartProfile3drxShortCycle" char(250) , "drxSmartProfile3drxShortCycleT" char(250) , "drxSmartProfile3smartStInactFactor" char(250) , "drxSmartProfile4drxInactivityT" char(250) , "drxSmartProfile4drxLongCycle" char(250) , "drxSmartProfile4drxOnDuratT" char(250) , "drxSmartProfile4drxProfileIndex" char(250) , "drxSmartProfile4drxProfilePriority" char(250) , "drxSmartProfile4drxRetransT" char(250) , "drxSmartProfile4drxShortCycle" char(250) , "drxSmartProfile4drxShortCycleT" char(250) , "drxSmartProfile4smartStInactFactor" char(250) , "drxSmartProfile5drxInactivityT" char(250) , "drxSmartProfile5drxLongCycle" char(250) , "drxSmartProfile5drxOnDuratT" char(250) , "drxSmartProfile5drxProfileIndex" char(250) , "drxSmartProfile5drxProfilePriority" char(250) , "drxSmartProfile5drxRetransT" char(250) , "drxSmartProfile5drxShortCycle" char(250) , "drxSmartProfile5drxShortCycleT" char(250) , "drxSmartProfile5smartStInactFactor" char(250) , "eCallAcBarred" char(250) , "eUlLaAtbPeriod" char(250) , "eUlLaBlerAveWin" char(250) , "eUlLaDeltaMcs" char(250) , "eUlLaLowMcsThr" char(250) , "eUlLaLowPrbThr" char(250) , "eUlLaPrbIncDecFactor" char(250) , "earfcnDL" char(250) , "earfcnUL" char(250) , "enableAmcPdcch" char(250) , "enableBetterCellHo" char(250) , "enableCovHo" char(250) , "enableDl16Qam" char(250) , "enableLowAgg" char(250) , "enablePcPdcch" char(250) , "eutraCelId" char(250) , "altitude" char(250) , "confidence" char(250) , "degreesOfLatitude" char(250) , "degreesOfLongitude" char(250) , "directionOfAltitude" char(250) , "latitudeSign" char(250) , "orientationOfMajorAxis" char(250) , "uncertaintyAltitude" char(250) , "uncertaintySemiMajor" char(250) , "uncertaintySemiMinor" char(250) , "fUlLAAtbTrigThr" char(250) , "filterCoeff" char(250) , "filterCoefficientCSFBCpichEcn0" char(250) , "filterCoefficientCSFBCpichRscp" char(250) , "filterCoefficientCpichEcn0" char(250) , "filterCoefficientCpichRscp" char(250) , "filterCoefficientRSRP" char(250) , "filterCoefficientRSRQ" char(250) , "filterCoefficientRSSI" char(250) , "gbrCongHandling" char(250) , "grpAssigPUSCH" char(250) , "harqMaxMsg3" char(250) , "harqMaxTrDl" char(250) , "harqMaxTrUl" char(250) , "harqMaxTrUlTtiBundling" char(250) , "hopModePusch" char(250) , "tC2KRelocOverallHrpd" char(250) , "tC2KRelocPrepHrpd" char(250) , "tUlHoPrepTransferHrpd" char(250) , "hysA3Offset" char(250) , "hysThreshold2GERAN" char(250) , "hysThreshold2Hrpd" char(250) , "hysThreshold2InterFreq" char(250) , "hysThreshold2Wcdma" char(250) , "hysThreshold2a" char(250) , "hysThreshold3" char(250) , "hysThreshold4" char(250) , "iFLBBearCheckTimer" char(250) , "iFLBHighLoadGBRDL" char(250) , "iFLBHighLoadNonGBRDL" char(250) , "iFLBHighLoadPdcch" char(250) , "iFLBNomNumPrb" char(250) , "iFLBRetryTimer" char(250) , "iFLBTargetLoadGBRDL" char(250) , "iFLBTargetLoadNonGBRDL" char(250) , "iFLBTargetLoadPdcch" char(250) , "idleLBCelResWeight" char(250) , "idleLBPercentageOfUes" char(250) , "ilReacTimerUl" char(250) , "inactivityTimer" char(250) , "iniMcsDl" char(250) , "iniMcsUl" char(250) , "iniPrbsUl" char(250) , "intrFrqCelRes" char(250) , "intraPresAntP" char(250) , "lcrId" char(250) , "loadBalancingProfile" char(250) , "lowerMarginCIO" char(250) , "maxBitrateDl" char(250) , "maxBitrateUl" char(250) , "maxCrPgDl" char(250) , "maxCrRa4Dl" char(250) , "maxCrRaDl" char(250) , "maxCrSibDl" char(250) , "maxGbrTrafficLimit" char(250) , "maxNrSymPdcch" char(250) , "maxNumActDrb" char(250) , "maxNumActUE" char(250) , "maxNumCaConfUeDc" char(250) , "maxNumQci1Drb" char(250) , "maxNumRrc" char(250) , "maxNumRrcEmergency" char(250) , "maxNumUeDl" char(250) , "maxNumUeUl" char(250) , "mbrSelector" char(250) , "measQuantityCSFBUtra" char(250) , "measQuantityUtra" char(250) , "mimoClCqiThD" char(250) , "mimoClCqiThU" char(250) , "mimoClRiThD" char(250) , "mimoClRiThU" char(250) , "mimoOlCqiThD" char(250) , "mimoOlCqiThU" char(250) , "mimoOlRiThD" char(250) , "mimoOlRiThU" char(250) , "minBitrateDl" char(250) , "minBitrateUl" char(250) , "mobStateParamNCelChgHgh" char(250) , "mobStateParamNCelChgMed" char(250) , "mobStateParamTEval" char(250) , "mobStateParamTHystNorm" char(250) , "modPeriodCoeff" char(250) , "n1PucchAn" char(250) , "n310" char(250) , "n311" char(250) , "nCqiRb" char(250) , "offsetFreqIntra" char(250) , "operationalState" char(250) , "p0NomPucch" char(250) , "p0NomPusch" char(250) , "pMax" char(250) , "pagingNb" char(250) , "pdcchAggDefUe" char(250) , "pdcchAggMsg4" char(250) , "pdcchAggPaging" char(250) , "pdcchAggPreamb" char(250) , "pdcchAggRaresp" char(250) , "pdcchAggSib" char(250) , "pdcchAlpha" char(250) , "pdcchCqiShift" char(250) , "pdcchHarqTargetBler" char(250) , "pdcchUlDlBal" char(250) , "periodicCqiFeedbackType" char(250) , "activateMeas" char(250) , "measurementType" char(250) , "reportAmount" char(250) , "reportInterval" char(250) , "phichDur" char(250) , "phichRes" char(250) , "phyCellId" char(250) , "prachCS" char(250) , "prachConfIndex" char(250) , "prachFreqOff" char(250) , "prachHsFlag" char(250) , "prachPwrRamp" char(250) , "preambTxMax" char(250) , "primPlmnCellres" char(250) , "prsConfigurationIndex" char(250) , "prsMutingInfo" char(250) , "prsMutingInfoPatternLen" char(250) , "prsNumDlFrames" char(250) , "prsPowerBoost" char(250) , "pucchNAnCs" char(250) , "puschAckOffI" char(250) , "puschCqiOffI" char(250) , "puschRiOffI" char(250) , "qHyst" char(250) , "qQualMinR9" char(250) , "qrxlevmin" char(250) , "qrxlevminintraF" char(250) , "raContResoT" char(250) , "raLargeMcsUl" char(250) , "raMsgPoffGrB" char(250) , "raNondedPreamb" char(250) , "raPreGrASize" char(250) , "raRespWinSize" char(250) , "raSmallMcsUl" char(250) , "raSmallVolUl" char(250) , "rand" char(250) , "rcAmbrMgnDl" char(250) , "rcAmbrMgnUl" char(250) , "rcEnableDl" char(250) , "rcEnableUl" char(250) , "redBwEnDl" char(250) , "redBwMaxRbDl" char(250) , "redBwMaxRbUl" char(250) , "redBwMinRbUl" char(250) , "redBwRpaEnUl" char(250) , "riEnable" char(250) , "riPerM" char(250) , "riPerOffset" char(250) , "rootSeqIndex" char(250) , "a1ReportInterval" char(250) , "a2TimeToTriggerMobRsrq" char(250) , "hysThreshold2MobRsrq" char(250) , "threshold2MobRsrq" char(250) , "threshold2aRsrq" char(250) , "a2TimeToTriggerRedirectRsrq" char(250) , "hysThreshold4Rsrq" char(250) , "threshold4Rsrq" char(250) , "rttCellIdInfo" char(250) , "rttCsfbType" char(250) , "sIntraSearchPR9" char(250) , "sIntraSearchQR9" char(250) , "sIntrasearch" char(250) , "sNonIntraSearchPR9" char(250) , "sNonIntraSearchQR9" char(250) , "sNonIntrsearch" char(250) , "siWindowLen" char(250) , "sib2SchedulingsiMessagePeriodicity" char(250) , "sib2SchedulingsiMessageRepetition" char(250) , "sib2SchedulingsiMessageSibType" char(250) , "sib3SchedulingsiMessagePeriodicity" char(250) , "sib3SchedulingsiMessageRepetition" char(250) , "sib3SchedulingsiMessageSibType" char(250) , "sibSchedulingList_siMessagePeriodicity_siMessageRepetition_siMessageSibType" char(250) , "nCellChgHigh" char(250) , "nCellChgMed" char(250) , "qHystSfHigh" char(250) , "qHystSfMed" char(250) , "tEvaluation" char(250) , "tHystNormal" char(250) , "srbSchedWeightDl" char(250) , "srbSchedWeightUl" char(250) , "srsPwrOffset" char(250) , "stInactFactor" char(250) , "syncSigTxMode" char(250) , "t300" char(250) , "t301" char(250) , "t302" char(250) , "t304InterRAT" char(250) , "t304InterRATGsm" char(250) , "t304IntraLte" char(250) , "t304eNaccGsm" char(250) , "t310" char(250) , "t311" char(250) , "t320" char(250) , "tExtendedWait" char(250) , "tPageCorrInt" char(250) , "tPeriodicBsr" char(250) , "tPeriodicPhr" char(250) , "tProhibitPhr" char(250) , "tReTxBsrTime" char(250) , "tReselEutr" char(250) , "tStoreUeCntxt" char(250) , "taMaxOffset" char(250) , "taTimer" char(250) , "taTimerMargin" char(250) , "tac" char(250) , "threshSrvLow" char(250) , "threshold1" char(250) , "threshold2GERAN" char(250) , "threshold2Hrpd" char(250) , "threshold2InterFreq" char(250) , "threshold2Wcdma" char(250) , "threshold2a" char(250) , "threshold3" char(250) , "threshold3a" char(250) , "threshold4" char(250) , "timeToTriggerSfHigh" char(250) , "timeToTriggerSfMedium" char(250) , "ttiBundlingBlerTarget" char(250) , "ttiBundlingBlerThreshold" char(250) , "ttiBundlingSinrThreshold" char(250) , "ulChBw" char(250) , "ulCombinationMode" char(250) , "ulRsCs" char(250) , "ulTargetBler" char(250) , "ulamcAllTbEn" char(250) , "ulamcSwitchPer" char(250) , "ulatbEventPer" char(250) , "ulpcAlpha" char(250) , "p0NomPuschIAw" char(250) , "ulpcCEBalanceIAw" char(250) , "ulpcMinQualIAw" char(250) , "ulpcMinWaitForPc" char(250) , "ulpcRefPwrIAw" char(250) , "ulpcIniPrePwr" char(250) , "ulpcLowlevCch" char(250) , "ulpcLowqualCch" char(250) , "ulpcUplevCch" char(250) , "ulpcUpqualCch" char(250) , "ulpcLowlevSch" char(250) , "ulpcLowqualSch" char(250) , "ulpcUplevSch" char(250) , "ulpcUpqualSch" char(250) , "ulpcRarespTpc" char(250) , "ulpcReadPeriod" char(250) , "ulsFdPrbAssignAlg" char(250) , "ulsMaxPacketAgg" char(250) , "ulsMinRbPerUe" char(250) , "ulsMinTbs" char(250) , "ulsSchedMethod" char(250) , "deltaFPucchF1bCSr10" char(250) , "deltaFPucchF3r10" char(250) , "upperMarginCIO" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.LNHOW( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "b1ThresholdCSFBUtraEcn0" char(250) , "b1ThresholdCSFBUtraRscp" char(250) , "b1TimeToTriggerCSFBUtraMeas" char(250) , "b2Threshold1Utra" char(250) , "b2Threshold2UtraEcn0" char(250) , "b2Threshold2UtraRscp" char(250) , "b2TimeToTriggerUtraMeas" char(250) , "hysB1ThresholdCSFBUtra" char(250) , "hysB2ThresholdUtra" char(250) , "maxNumCsfbTargets" char(250) , "offsetFreqUtra" char(250) , "reportIntervalUtra" char(250) , "utraCarrierFreq" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.LNHOW( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "b1ThresholdCSFBUtraEcn0" char(250) , "b1ThresholdCSFBUtraRscp" char(250) , "b1TimeToTriggerCSFBUtraMeas" char(250) , "b2Threshold1Utra" char(250) , "b2Threshold2UtraEcn0" char(250) , "b2Threshold2UtraRscp" char(250) , "b2TimeToTriggerUtraMeas" char(250) , "hysB1ThresholdCSFBUtra" char(250) , "hysB2ThresholdUtra" char(250) , "maxNumCsfbTargets" char(250) , "offsetFreqUtra" char(250) , "reportIntervalUtra" char(250) , "utraCarrierFreq" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.LNMME( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "accMmePlmnsList_mcc_mnc" char(250) , "administrativeState" char(250) , "ipAddrPrim" char(250) , "ipAddrSec" char(250) , "relMmeCap" char(250) , "s1LinkStatus" char(250) , "transportNwId" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.LNMME( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "accMmePlmnsList_mcc_mnc" char(250) , "administrativeState" char(250) , "ipAddrPrim" char(250) , "ipAddrSec" char(250) , "relMmeCap" char(250) , "s1LinkStatus" char(250) , "transportNwId" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.LNREL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "mcc" char(250) , "mnc" char(250) , "cellIndOffNeigh" char(250) , "ecgiAdjEnbId" char(250) , "ecgiLcrId" char(250) , "handoverAllowed" char(250) , "nrControl" char(250) , "nrStatus" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.LNREL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "mcc" char(250) , "mnc" char(250) , "cellIndOffNeigh" char(250) , "ecgiAdjEnbId" char(250) , "ecgiLcrId" char(250) , "handoverAllowed" char(250) , "nrControl" char(250) , "nrStatus" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.LTAC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "tacLimitGbrEmergency" char(250) , "tacLimitGbrHandover" char(250) , "tacLimitGbrNormal" char(250) , "transportNwId" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.LTAC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "tacLimitGbrEmergency" char(250) , "tacLimitGbrHandover" char(250) , "tacLimitGbrNormal" char(250) , "transportNwId" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.MODULE( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "identificationCode" char(250) , "state" char(250) , "subrackSpecificType" char(250) , "userLabel" char(250) , "vendorName" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.MODULE( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "identificationCode" char(250) , "state" char(250) , "subrackSpecificType" char(250) , "userLabel" char(250) , "vendorName" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.MRBTS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "actEthernetSec" char(250) , "cmSyncCheck" char(250) , "cmSyncCheckPeriod" char(250) , "configDataRevisionNumber" char(250) , "passUnitList_comment_name_serNum" char(250) , "passUnitList_comment_name_prodCode_serNum_version" text , "passUnitList_comment_name_prodCode_serNum" char(250) , "resetToTestDedicated" char(250) , "sharedRfTechnologies" char(250) , "timeZone" char(250) , "unitList_primaryConnection_prodCode_unitName_unitNumber_variant" char(250) , "passUnitList_comment_name_prodCode_version" char(250) , "passUnitList_name_prodCode_serNum_version" char(250) , "passUnitList_name" char(250) , "passUnitList_comment_name" char(250) , "passUnitList_comment_name_prodCode" char(250) , "passUnitList_name_prodCode_serNum" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.MRBTS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "name" char(250) , "actEthernetSec" char(250) , "cmSyncCheck" char(250) , "cmSyncCheckPeriod" char(250) , "configDataRevisionNumber" char(250) , "passUnitList_comment_name_serNum" char(250) , "passUnitList_comment_name_prodCode_serNum_version" text , "passUnitList_comment_name_prodCode_serNum" char(250) , "resetToTestDedicated" char(250) , "sharedRfTechnologies" char(250) , "timeZone" char(250) , "unitList_primaryConnection_prodCode_unitName_unitNumber_variant" char(250) , "passUnitList_comment_name_prodCode_version" char(250) , "passUnitList_name_prodCode_serNum_version" char(250) , "passUnitList_name" char(250) , "passUnitList_comment_name" char(250) , "passUnitList_comment_name_prodCode" char(250) , "passUnitList_name_prodCode_serNum" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.MTRACE( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "eutranTraceIdMcc" char(250) , "eutranTraceIdMnc" char(250) , "traceId" char(250) , "trcRecSessionRef" text , "cellId" char(250) , "cellMaxActiveUEsTraced" char(250) , "cellTrcMode" char(250) , "cellTaTracing" char(250) , "tceCellTracePortNum" char(250) , "tceIpAddress" char(250) , "traceRrcMsgCategory" char(250) , "traceRrcNonUeSpecMsgList" char(250) , "traceRrcSetting" char(250) , "traceRrcUeSpecMsgList" char(250) , "traceS1MsgCategory" char(250) , "traceS1NonUeSpecMsgList" char(250) , "traceS1Setting" char(250) , "traceS1UeSpecMsgList" char(250) , "traceX2MsgCategory" char(250) , "traceX2NonUeSpecMsgList" char(250) , "traceX2Setting" char(250) , "traceX2UeSpecMsgList" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.MTRACE( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "eutranTraceIdMcc" char(250) , "eutranTraceIdMnc" char(250) , "traceId" char(250) , "trcRecSessionRef" text , "cellId" char(250) , "cellMaxActiveUEsTraced" char(250) , "cellTrcMode" char(250) , "cellTaTracing" char(250) , "tceCellTracePortNum" char(250) , "tceIpAddress" char(250) , "traceRrcMsgCategory" char(250) , "traceRrcNonUeSpecMsgList" char(250) , "traceRrcSetting" char(250) , "traceRrcUeSpecMsgList" char(250) , "traceS1MsgCategory" char(250) , "traceS1NonUeSpecMsgList" char(250) , "traceS1Setting" char(250) , "traceS1UeSpecMsgList" char(250) , "traceX2MsgCategory" char(250) , "traceX2NonUeSpecMsgList" char(250) , "traceX2Setting" char(250) , "traceX2UeSpecMsgList" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.OAMPRF( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "activeMode" char(250) , "alarmClearanceDelay" char(250) , "efEventThreshold" char(250) , "efEventWindow" char(250) , "efpEventThreshold" char(250) , "efpEventWindow" char(250) , "efssEventThreshold" char(250) , "efssEventWindow" char(250) , "eventRepetition" char(250) , "eventSupport" char(250) , "linkOAMProfileName" char(250) , "loopBackTime" char(250) , "loopbackSupported" char(250) , "testFrameRate" char(250) , "testFrameSize" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.OAMPRF( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "activeMode" char(250) , "alarmClearanceDelay" char(250) , "efEventThreshold" char(250) , "efEventWindow" char(250) , "efpEventThreshold" char(250) , "efpEventWindow" char(250) , "efssEventThreshold" char(250) , "efssEventWindow" char(250) , "eventRepetition" char(250) , "eventSupport" char(250) , "linkOAMProfileName" char(250) , "loopBackTime" char(250) , "loopbackSupported" char(250) , "testFrameRate" char(250) , "testFrameSize" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.PMCADM( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "reportingIntervalPm" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.PMCADM( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "reportingIntervalPm" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.PMRNL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "mtCellAvailability" char(250) , "mtCellLoad" char(250) , "mtCellRes" char(250) , "mtCellThruput" char(250) , "mtEPSBearer" char(250) , "mtInterSysHo" char(250) , "mtInterSysHoEhrpdBc" char(250) , "mtInterSysHoGsmNb" char(250) , "mtInterSysHoUtranNb" char(250) , "mtIntereNBHo" char(250) , "mtIntraeNBHo" char(250) , "mtLTEHo" char(250) , "mtPowQualDL" char(250) , "mtPowQualUL" char(250) , "mtQoS" char(250) , "mtRRC" char(250) , "mtRadBearer" char(250) , "mtS1AP" char(250) , "mtTranspLoad" char(250) , "mtUEandServiceDiff" char(250) , "mtUEstate" char(250) , "mtX2AP" char(250) , "mteNBload" char(250) , "mtintraLTEHoNb" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.PMRNL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "mtCellAvailability" char(250) , "mtCellLoad" char(250) , "mtCellRes" char(250) , "mtCellThruput" char(250) , "mtEPSBearer" char(250) , "mtInterSysHo" char(250) , "mtInterSysHoEhrpdBc" char(250) , "mtInterSysHoGsmNb" char(250) , "mtInterSysHoUtranNb" char(250) , "mtIntereNBHo" char(250) , "mtIntraeNBHo" char(250) , "mtLTEHo" char(250) , "mtPowQualDL" char(250) , "mtPowQualUL" char(250) , "mtQoS" char(250) , "mtRRC" char(250) , "mtRadBearer" char(250) , "mtS1AP" char(250) , "mtTranspLoad" char(250) , "mtUEandServiceDiff" char(250) , "mtUEstate" char(250) , "mtX2AP" char(250) , "mteNBload" char(250) , "mtintraLTEHoNb" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.PMTNL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "lte_ETHIF_Stats_Interval" char(250) , "lte_Ethernet_Link_Interval" char(250) , "lte_IPSec_Interval" char(250) , "lte_IP_Filtering_Interval" char(250) , "lte_IP_Stats_Interval" char(250) , "lte_PHB_Stats_Interval" char(250) , "lte_TAC_Statistics_Interval" char(250) , "lte_TOP_FreqSync_Stats_Interval" char(250) , "lte_TOP_PhaseSync_Stats_Interval" char(250) , "lte_TWAMP_Stats_Interval" char(250) , "lte_VLAN_IP_Stats_Interval" char(250) , "lte_VLAN_PHB_Stats_Interval" char(250) , "lte_VLAN_Stats_Interval" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.PMTNL( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "lte_ETHIF_Stats_Interval" char(250) , "lte_Ethernet_Link_Interval" char(250) , "lte_IPSec_Interval" char(250) , "lte_IP_Filtering_Interval" char(250) , "lte_IP_Stats_Interval" char(250) , "lte_PHB_Stats_Interval" char(250) , "lte_TAC_Statistics_Interval" char(250) , "lte_TOP_FreqSync_Stats_Interval" char(250) , "lte_TOP_PhaseSync_Stats_Interval" char(250) , "lte_TWAMP_Stats_Interval" char(250) , "lte_VLAN_IP_Stats_Interval" char(250) , "lte_VLAN_PHB_Stats_Interval" char(250) , "lte_VLAN_Stats_Interval" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.QOS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "dscpMap_dscp_pHB_vlanPrio" char(250) , "enablePhbCounters" char(250) , "assuredForwardingClass1" char(250) , "assuredForwardingClass2" char(250) , "assuredForwardingClass3" char(250) , "assuredForwardingClass4" char(250) , "bestEffort" char(250) , "sseDscpOverwrite" char(250) , "trafficTypesMap_dscp_trafficType" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.QOS( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "dscpMap_dscp_pHB_vlanPrio" char(250) , "enablePhbCounters" char(250) , "assuredForwardingClass1" char(250) , "assuredForwardingClass2" char(250) , "assuredForwardingClass3" char(250) , "assuredForwardingClass4" char(250) , "bestEffort" char(250) , "sseDscpOverwrite" char(250) , "trafficTypesMap_dscp_trafficType" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.REDRT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "addGsmSIToRedirMsg" char(250) , "csFallBPrio" char(250) , "emerCallPrio" char(250) , "redirFreqUtra" char(250) , "redirRat" char(250) , "redirectPrio" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.REDRT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "addGsmSIToRedirMsg" char(250) , "csFallBPrio" char(250) , "emerCallPrio" char(250) , "redirFreqUtra" char(250) , "redirRat" char(250) , "redirectPrio" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.RMOD( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "connectionList_linkId_positionInChain_sModId" char(250) , "linkSpeed" char(250) , "moduleLocation" char(250) , "prodCode" char(250) , "serNum" char(250) , "climateControlProfiling" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.RMOD( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "connectionList_linkId_positionInChain_sModId" char(250) , "linkSpeed" char(250) , "moduleLocation" char(250) , "prodCode" char(250) , "serNum" char(250) , "climateControlProfiling" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.SCTP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "assocMaxRetrans" char(250) , "maxTimeSctpSetup" char(250) , "pathMaxRetrans" char(250) , "rtoMax" char(250) , "rtoMin" char(250) , "sctpHeartbeatInterval" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.SCTP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "assocMaxRetrans" char(250) , "maxTimeSctpSetup" char(250) , "pathMaxRetrans" char(250) , "rtoMax" char(250) , "rtoMin" char(250) , "sctpHeartbeatInterval" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.SMOD( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "moduleLocation" char(250) , "prodCode" char(250) , "serNum" char(250) , "syncMaster" char(250) , "technology" char(250) , "climateControlProfiling" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.SMOD( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "moduleLocation" char(250) , "prodCode" char(250) , "serNum" char(250) , "syncMaster" char(250) , "technology" char(250) , "climateControlProfiling" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.STPG( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "synchroSourceList_clockProtocol_priority_ssmEnabled_ssmTimeout_unitNumber" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.STPG( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "synchroSourceList_clockProtocol_priority_ssmEnabled_ssmTimeout_unitNumber" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.SUBMODULE( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "identificationCode" char(250) , "serialNumber" char(250) , "unitType" char(250) , "vendorName" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.SUBMODULE( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "identificationCode" char(250) , "serialNumber" char(250) , "unitType" char(250) , "vendorName" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.SYNC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.SYNC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.TAC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.TAC( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.TOPB( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.TOPB( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.TOPF( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "actTopFreqSynch" char(250) , "logMeanSyncValue" char(250) , "masterIpAddr" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.TOPF( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "actTopFreqSynch" char(250) , "logMeanSyncValue" char(250) , "masterIpAddr" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.TOPP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "acceptedClockQuality" char(250) , "actTopPhaseSynch" char(250) , "logMeanSyncValue" char(250) , "phaseErrorComp" char(250) , "topComMode" char(250) , "topDomainNumber" char(250) , "topEthMulticastAddress" char(250) , "masterIpAddr" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.TOPP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "acceptedClockQuality" char(250) , "actTopPhaseSynch" char(250) , "logMeanSyncValue" char(250) , "phaseErrorComp" char(250) , "topComMode" char(250) , "topDomainNumber" char(250) , "topEthMulticastAddress" char(250) , "masterIpAddr" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.TWAMP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "administrativeState" char(250) , "destIpAddress" char(250) , "destPort" char(250) , "dscp" char(250) , "messageSize" char(250) , "plrAlarmThreshold" char(250) , "rttAlarmThreshold" char(250) , "sourceIpAddress" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.TWAMP( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "administrativeState" char(250) , "destIpAddress" char(250) , "destPort" char(250) , "dscp" char(250) , "messageSize" char(250) , "plrAlarmThreshold" char(250) , "rttAlarmThreshold" char(250) , "sourceIpAddress" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.UFFIM( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "tResUtra" char(250) , "utrResTiFHM" char(250) , "utrResTiFMM" char(250) , "utrFddCarFrqL_dlCarFrqUtra_pMaxUtra_qQualMinUtra_qRxLevMinUtra_uCelResPrio_utraFrqThrH_utraFrqThrL" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.UFFIM( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "tResUtra" char(250) , "utrResTiFHM" char(250) , "utrResTiFMM" char(250) , "utrFddCarFrqL_dlCarFrqUtra_pMaxUtra_qQualMinUtra_qRxLevMinUtra_uCelResPrio_utraFrqThrH_utraFrqThrL" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g.UNIT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "enableRP301Interface" char(250) , "unitTypeActual" char(250) , "unitTypeExpected" char(250) );

CREATE TABLE IF NOT EXISTS nok_cm_4g_hist.UNIT( "FileName" char(250) , "dateTime" TIMESTAMP , "version" char(250) , "distName" char(250) , "id" char(250) , "enableRP301Interface" char(250) , "unitTypeActual" char(250) , "unitTypeExpected" char(250) );

